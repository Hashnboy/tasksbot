# tasks_bot.py
# -*- coding: utf-8 -*-
import os
import re
import json
import time
import pytz
import hmac
import hashlib
import logging
import schedule
import threading
from datetime import datetime, timedelta

import gspread
from flask import Flask, request
from telebot import TeleBot, types

# ===================== –û–ö–†–£–ñ–ï–ù–ò–ï / –ù–ê–°–¢–†–û–ô–ö–ò =====================
API_TOKEN        = os.getenv("TELEGRAM_TOKEN")
TABLE_URL        = os.getenv("GOOGLE_SHEETS_URL")
CREDENTIALS_FILE = os.getenv("GOOGLE_CREDENTIALS_JSON", "/etc/secrets/credentials.json")
WEBHOOK_BASE     = os.getenv("WEBHOOK_BASE")
OPENAI_API_KEY   = os.getenv("OPENAI_API_KEY")
TZ_NAME          = os.getenv("TZ", "Europe/Moscow")
WEBHOOK_URL      = f"{WEBHOOK_BASE}/{API_TOKEN}" if API_TOKEN and WEBHOOK_BASE else None

LOCAL_TZ = pytz.timezone(TZ_NAME)

logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
log = logging.getLogger("tasksbot")

REQUIRED_ENVS = ["TELEGRAM_TOKEN", "GOOGLE_SHEETS_URL", "WEBHOOK_BASE"]
missing = [v for v in REQUIRED_ENVS if not os.getenv(v)]
if missing:
    log.warning("–ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: %s", ", ".join(missing))

bot = TeleBot(API_TOKEN, parse_mode="HTML")

# ===================== GOOGLE SHEETS =====================
# –ö–ª—é—á–µ–≤—ã–µ –ª–∏—Å—Ç—ã (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–¥–∞—á)
CATEGORIES = ["–ö–æ—Ñ–µ–π–Ω—è", "–¢–∞–±–∞—á–∫–∞", "–õ–∏—á–Ω–æ–µ", "WB"]
SHEET_SUPPLIERS = "–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏"
SHEET_USERS     = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
SHEET_LOGS      = "–õ–æ–≥–∏"

# –û–∂–∏–¥–∞–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–ª–æ–Ω–æ–∫ –Ω–∞ –ª–∏—Å—Ç–∞—Ö –∑–∞–¥–∞—á
TASK_HEADERS = ["–î–∞—Ç–∞","–ö–∞—Ç–µ–≥–æ—Ä–∏—è","–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è","–ó–∞–¥–∞—á–∞","–î–µ–¥–ª–∞–π–Ω","User ID","–°—Ç–∞—Ç—É—Å","–ü–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å","–ò—Å—Ç–æ—á–Ω–∏–∫"]

try:
    gc = gspread.service_account(filename=CREDENTIALS_FILE)
    sh = gc.open_by_url(TABLE_URL)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –ª–∏—Å—Ç–æ–≤ –∑–∞–¥–∞—á, –Ω–æ –ù–ï —Å–æ–∑–¥–∞—ë–º
    SHEETS = {}
    for cat in CATEGORIES:
        try:
            SHEETS[cat] = sh.worksheet(cat)
        except gspread.exceptions.WorksheetNotFound:
            log.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω –ª–∏—Å—Ç –∑–∞–¥–∞—á: {cat} (—Å–æ–∑–¥–∞–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ù–ï –±—É–¥–µ–º)")

    try:
        ws_suppliers = sh.worksheet(SHEET_SUPPLIERS)
    except gspread.exceptions.WorksheetNotFound:
        ws_suppliers = None
        log.error("–õ–∏—Å—Ç '–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏' –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    try:
        ws_users = sh.worksheet(SHEET_USERS)
    except gspread.exceptions.WorksheetNotFound:
        ws_users = None
        log.error("–õ–∏—Å—Ç '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    try:
        ws_logs = sh.worksheet(SHEET_LOGS)
    except gspread.exceptions.WorksheetNotFound:
        ws_logs = None
        log.error("–õ–∏—Å—Ç '–õ–æ–≥–∏' –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    log.info("Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω—ã.")
except Exception:
    log.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets", exc_info=True)
    raise

# ===================== –£–¢–ò–õ–ò–¢–´ / –û–ë–©–ï–ï =====================
PAGE_SIZE = 7
NOTIFIED  = set()  # –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: –∫–ª—é—á = taskId|date|HH:MM

def now_local():
    return datetime.now(LOCAL_TZ)

def today_str(dt=None):
    if dt is None:
        dt = now_local()
    return dt.strftime("%d.%m.%Y")

def weekday_ru(dt: datetime) -> str:
    names = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫","–í—Ç–æ—Ä–Ω–∏–∫","–°—Ä–µ–¥–∞","–ß–µ—Ç–≤–µ—Ä–≥","–ü—è—Ç–Ω–∏—Ü–∞","–°—É–±–±–æ—Ç–∞","–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    return names[dt.weekday()]

def parse_time_hhmm(s):
    try:
        return datetime.strptime(s, "%H:%M").time()
    except Exception:
        return None

def log_event(user_id, action, payload=""):
    if not ws_logs: return
    try:
        ws_logs.append_row([datetime.utcnow().isoformat(), str(user_id), action, payload], value_input_option="USER_ENTERED")
    except Exception:
        pass

def sha_task_id(user_id, date_s, cat, subcat, text, deadline):
    key = f"{user_id}|{date_s}|{cat}|{subcat}|{text}|{deadline}"
    return hashlib.sha1(key.encode("utf-8")).hexdigest()[:16]

def is_order_task(text: str) -> bool:
    t = (text or "").lower()
    return any(w in t for w in ["–∑–∞–∫–∞–∑", "–∑–∞–∫–∞–∑–∞—Ç—å"])

def guess_supplier(text: str) -> str:
    t = (text or "").lower()
    if "–∫-—ç–∫—Å–ø—Ä–æ" in t or "–∫ —ç–∫—Å–ø—Ä–æ" in t or "k-exp" in t or "–∫—ç–∫—Å–ø—Ä–æ" in t:
        return "–ö-–≠–∫—Å–ø—Ä–æ"
    if "–≤—ã–ª–µ–≥–∂–∞–Ω" in t:
        return "–ò–ü –í—ã–ª–µ–≥–∂–∞–Ω–∏–Ω–∞"
    return ""

def normalize_tt_from_subcat(subcat: str) -> str:
    s = (subcat or "").strip().lower()
    if "—Ü–µ–Ω—Ç—Ä" in s: return "–¶–µ–Ω—Ç—Ä"
    if "–ø–æ–ª–µ—Ç" in s or "–ø–æ–ª—ë—Ç" in s: return "–ü–æ–ª–µ—Ç"
    if "–∫–ª–∏–º–æ–≤" in s: return "–ö–ª–∏–º–æ–≤–æ"
    return subcat or ""

def get_ws_by_category(cat: str):
    return SHEETS.get(cat)

def get_all_task_rows():
    """–°—á–∏—Ç–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ —Å–æ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ dict."""
    all_rows = []
    for cat, ws in SHEETS.items():
        if not ws: 
            continue
        try:
            rows = ws.get_all_records()
        except Exception as e:
            log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–∏—Å—Ç {cat}: {e}")
            rows = []
        for r in rows:
            r["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] = r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è") or cat  # —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞
            all_rows.append(r)
    return all_rows

def find_row_index_by_id(ws, task_id, rows):
    # rows = ws.get_all_records(); –∏–Ω–¥–µ–∫—Å –≤ —Ç–∞–±–ª–∏—Ü–µ —Å 2-–π —Å—Ç—Ä–æ–∫–∏
    for i, r in enumerate(rows, start=2):
        rid = sha_task_id(str(r.get("User ID")), r.get("–î–∞—Ç–∞",""), r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ó–∞–¥–∞—á–∞",""), r.get("–î–µ–¥–ª–∞–π–Ω",""))
        if rid == task_id:
            return i
    return None

def append_task(cat, row_vals):
    ws = get_ws_by_category(cat)
    if not ws:
        raise RuntimeError(f"–õ–∏—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{cat}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    ws.append_row(row_vals, value_input_option="USER_ENTERED")

def update_cell(ws, row_idx, col_name, value):
    col = TASK_HEADERS.index(col_name) + 1
    ws.update_cell(row_idx, col, value)

# ===================== –ü–†–ê–í–ò–õ–ê –ü–û–°–¢–ê–í–©–ò–ö–û–í (–∏–∑ –ª–∏—Å—Ç–∞) =====================
# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ç–∞–∫–∏–µ —Ç–∏–ø—ã –ª–æ–≥–∏–∫–∏:
# 1) "–∫–∞–∂–¥—ã–µ N –¥–Ω–µ–π" ‚Äî –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: "–∫–∞–∂–¥—ã–µ", —á–∏—Å–ª–æ –≤ –ø—Ä–∞–≤–∏–ª–µ
# 2) "shelf Xh / X–¥" –∏–ª–∏ –ø–æ–ª–µ "–•—Ä–∞–Ω–µ–Ω–∏–µ (–¥–Ω–∏) / –•—Ä–∞–Ω–µ–Ω–∏–µ_–¥–Ω–µ–π" ‚Äî –∑–∞–∫–∞–∑ –ø–æ—Å–ª–µ —Ö—Ä–∞–Ω–µ–Ω–∏—è
SUPPLIER_RULES = {}

def _safe_int(x, default=0):
    try:
        if x is None or x == "": return default
        if isinstance(x, (int, float)): return int(x)
        x = str(x).strip().replace(",", ".")
        if x.endswith("–¥") or x.endswith("–¥–Ω"):  # "3–¥"
            x = re.findall(r"\d+", x)[0]
        return int(float(x))
    except Exception:
        return default

def load_supplier_rules_from_sheet():
    SUPPLIER_RULES.clear()
    if not ws_suppliers:
        log.warning("–õ–∏—Å—Ç '–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏' –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –ø—Ä–∞–≤–∏–ª–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        return
    try:
        rows = ws_suppliers.get_all_records()
        for r in rows:
            name = str(r.get("–ü–æ—Å—Ç–∞–≤—â–∏–∫") or "").strip()
            if not name: 
                continue
            active = str(r.get("–ê–∫—Ç–∏–≤–µ–Ω") or "").strip().lower() in ("1","–¥–∞","true","y","yes","on")
            auto   = str(r.get("–ê–≤—Ç–æ") or "").strip().lower() in ("1","–¥–∞","true","y","yes","on")
            rule_s = str(r.get("–ü—Ä–∞–≤–∏–ª–æ") or "").strip().lower()
            deadline = (str(r.get("–î–µ–¥–ª–∞–π–Ω–ó–∞–∫–∞–∑–∞") or "14:00")).strip()
            emoji = (str(r.get("Emoji") or "üì¶")).strip()

            deliv_off = _safe_int(r.get("DeliveryOffsetDays"), 1)
            storage_days = _safe_int(r.get("–•—Ä–∞–Ω–µ–Ω–∏–µ (–¥–Ω–∏)") or r.get("–•—Ä–∞–Ω–µ–Ω–∏–µ_–¥–Ω–µ–π"), 0)
            start_cycle = str(r.get("–°—Ç–∞—Ä—Ç_—Ü–∏–∫–ª–∞") or "").strip()  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –î–î.–ú–ú.–ì–ì–ì–ì

            if not active:
                continue

            rule = {"name": name, "deadline": deadline, "emoji": emoji,
                    "delivery_offset_days": max(0, deliv_off),
                    "storage_days": max(0, storage_days),
                    "auto": auto, "start_cycle": start_cycle}

            # –ø–∞—Ä—Å–∏–º ¬´–∫–∞–∂–¥—ã–µ N –¥–Ω–µ–π¬ª
            if "–∫–∞–∂–¥—ã–µ" in rule_s:
                nums = re.findall(r"\d+", rule_s)
                rule["kind"] = "cycle_every_n_days"
                rule["order_every_days"] = int(nums[0]) if nums else 2
            elif "shelf" in rule_s or "—á–∞—Å" in rule_s or "—Ö—Ä–∞–Ω" in rule_s:
                # —Ö—Ä–∞–Ω–µ–Ω–∏–µ -> –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –ø–æ—Å–ª–µ —Ö—Ä–∞–Ω–µ–Ω–∏—è
                rule["kind"] = "delivery_shelf_then_order"
                # storage_days —É–∂–µ —É—á—Ç—ë–Ω
            else:
                # –¥–µ—Ñ–æ–ª—Ç ‚Äî ¬´–∫–∞–∂–¥—ã–µ 2 –¥–Ω—è¬ª
                rule["kind"] = "cycle_every_n_days"
                rule["order_every_days"] = 2

            SUPPLIER_RULES[name.lower()] = rule
    except Exception as e:
        log.warning(f"–ù–µ —Å–º–æ–≥ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: {e}")

load_supplier_rules_from_sheet()

def plan_next_by_supplier_rule(user_id, supplier_name, category, subcategory, base_task_text):
    """
    –ü—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –∑–∞–∫–∞–∑–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ: —Å—Ç–∞–≤–∏–º –ø—Ä–∏—ë–º–∫—É –∏ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞.
    """
    key = (supplier_name or "").strip().lower()
    rule = SUPPLIER_RULES.get(key)
    if not rule:
        return []

    created = []
    today = now_local().date()
    cat = category or "–ö–æ—Ñ–µ–π–Ω—è"
    sub = normalize_tt_from_subcat(subcategory)

    def _add(date_dt, text, deadline, source):
        row = [
            date_dt.strftime("%d.%m.%Y"),
            cat, sub, text, deadline, str(user_id),
            "", "", source
        ]
        append_task(cat, row)

    if rule["kind"] == "cycle_every_n_days":
        delivery_day = today + timedelta(days=rule.get("delivery_offset_days", 1))
        next_order_day = today + timedelta(days=rule.get("order_every_days", 2))
        _add(delivery_day, f"{rule['emoji']} –ü—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É {supplier_name} ({sub or '‚Äî'})", "10:00", f"auto:delivery:{supplier_name}")
        _add(next_order_day, f"{rule['emoji']} –ó–∞–∫–∞–∑–∞—Ç—å {supplier_name} ({sub or '‚Äî'})", rule.get("deadline", "14:00"), f"auto:order:{supplier_name}")
        created.append((delivery_day, next_order_day))

    elif rule["kind"] == "delivery_shelf_then_order":
        delivery_day = today + timedelta(days=rule.get("delivery_offset_days", 1))
        # –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –ø–æ—Å–ª–µ —Ö—Ä–∞–Ω–µ–Ω–∏—è (–≤ –¥–Ω—è—Ö)
        next_order_day = delivery_day + timedelta(days=rule.get("storage_days", 2))
        _add(delivery_day, f"{rule['emoji']} –ü—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É {supplier_name} ({sub or '‚Äî'})", "11:00", f"auto:delivery:{supplier_name}")
        _add(next_order_day, f"{rule['emoji']} –ó–∞–∫–∞–∑–∞—Ç—å {supplier_name} ({sub or '‚Äî'})", rule.get("deadline", "14:00"), f"auto:order:{supplier_name}")
        created.append((delivery_day, next_order_day))

    return created

# ===================== –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï =====================
def format_grouped(tasks, header_date=None):
    if not tasks:
        return "–ó–∞–¥–∞—á –Ω–µ—Ç."
    def k(r):
        dl = r.get("–î–µ–¥–ª–∞–π–Ω") or ""
        t = parse_time_hhmm(dl)
        return (r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), t or datetime.min.time(), r.get("–ó–∞–¥–∞—á–∞",""))
    tasks = sorted(tasks, key=k)

    out = []
    if header_date:
        dt = datetime.strptime(header_date, "%d.%m.%Y")
        out.append(f"‚Ä¢ {weekday_ru(dt)} ‚Äî {header_date}\n")
    cur_cat = cur_sub = None
    for r in tasks:
        cat = r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è","") or "‚Äî"
        sub = r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è","") or "‚Äî"
        txt = r.get("–ó–∞–¥–∞—á–∞","")
        dl  = r.get("–î–µ–¥–ª–∞–π–Ω","")
        st  = (r.get("–°—Ç–∞—Ç—É—Å","") or "").lower()
        rep = (r.get("–ü–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å","") or "").strip()
        icon = "‚úÖ" if st == "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ" else ("üîÅ" if rep else "‚¨ú")
        if cat != cur_cat:
            out.append(f"üìÇ <b>{cat}</b>"); cur_cat = cat; cur_sub = None
        if sub != cur_sub:
            out.append(f"  ‚îî <b>{sub}</b>"); cur_sub = sub
        line = f"    ‚îî {icon} {txt}"
        if dl: line += f"  <i>(–¥–æ {dl})</i>"
        out.append(line)
    return "\n".join(out)

def build_task_line(r, i=None):
    dl = r.get("–î–µ–¥–ª–∞–π–Ω") or "‚Äî"
    prefix = f"{i}. " if i is not None else ""
    return f"{prefix}{r.get('–ö–∞—Ç–µ–≥–æ—Ä–∏—è','‚Äî')}/{r.get('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è','‚Äî')}: {r.get('–ó–∞–¥–∞—á–∞','')[:40]}‚Ä¶ (–¥–æ {dl})"

def get_tasks_by_date(user_id, date_s):
    uid = str(user_id)
    rows = get_all_task_rows()
    return [r for r in rows if str(r.get("User ID")) == uid and (r.get("–î–∞—Ç–∞") or "") == date_s]

def get_tasks_between(user_id, start_date: datetime.date, days=7):
    uid = str(user_id)
    date_set = {(start_date + timedelta(days=i)).strftime("%d.%m.%Y") for i in range(days)}
    rows = get_all_task_rows()
    return [r for r in rows if str(r.get("User ID")) == uid and (r.get("–î–∞—Ç–∞") or "") in date_set]

# ===================== –ü–ê–ì–ò–ù–ê–¶–ò–Ø / INLINE CB =====================
def mk_cb(action, **kwargs):
    payload = {"a": action, **kwargs}
    s = json.dumps(payload, ensure_ascii=False)
    sig = hmac.new(b"cb-key", s.encode("utf-8"), hashlib.sha1).hexdigest()[:6]
    return f"{sig}|{s}"

def parse_cb(data):
    try:
        sig, s = data.split("|", 1)
        check = hmac.new(b"cb-key", s.encode("utf-8"), hashlib.sha1).hexdigest()[:6]
        if sig != check:
            return None
        return json.loads(s)
    except Exception:
        return None

def page_buttons(items, page, total_pages, prefix_action):
    kb = types.InlineKeyboardMarkup()
    for it in items:
        kb.add(types.InlineKeyboardButton(it[0], callback_data=mk_cb(prefix_action, id=it[1])))
    nav = []
    if page > 1: nav.append(types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=mk_cb("page", p=page-1, pa=prefix_action)))
    nav.append(types.InlineKeyboardButton(f"{page}/{total_pages}", callback_data="noop"))
    if page < total_pages: nav.append(types.InlineKeyboardButton("‚û°Ô∏è", callback_data=mk_cb("page", p=page+1, pa=prefix_action)))
    if nav:
        kb.row(*nav)
    return kb

def render_task_card(uid, task_id):
    # –∏—â–µ–º –∑–∞–¥–∞—á—É –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ª–∏—Å—Ç
    for cat, ws in SHEETS.items():
        if not ws: 
            continue
        rows = ws.get_all_records()
        idx = find_row_index_by_id(ws, task_id, rows)
        if not idx:
            continue
        r = rows[idx-2]
        if str(r.get("User ID")) != str(uid):
            continue
        date_s = r.get("–î–∞—Ç–∞","")
        header = (
            f"<b>{r.get('–ó–∞–¥–∞—á–∞','')}</b>\n"
            f"üìÖ {weekday_ru(datetime.strptime(date_s,'%d.%m.%Y'))} ‚Äî {date_s}\n"
            f"üìÅ {r.get('–ö–∞—Ç–µ–≥–æ—Ä–∏—è',cat)} / {r.get('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è','‚Äî')}\n"
            f"‚è∞ –î–µ–¥–ª–∞–π–Ω: {r.get('–î–µ–¥–ª–∞–π–Ω') or '‚Äî'}\n"
            f"üìù –°—Ç–∞—Ç—É—Å: {r.get('–°—Ç–∞—Ç—É—Å') or '‚Äî'}"
        )
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å", callback_data=mk_cb("done", id=task_id)))
        if is_order_task(r.get("–ó–∞–¥–∞—á–∞","")):
            kb.add(types.InlineKeyboardButton("üöö –ü—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É", callback_data=mk_cb("accept_delivery", id=task_id)))
        kb.add(types.InlineKeyboardButton("‚ûï –ü–æ–¥–∑–∞–¥–∞—á–∞", callback_data=mk_cb("add_sub", id=task_id)))
        kb.add(types.InlineKeyboardButton("‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data=mk_cb("remind_set", id=task_id)))
        kb.add(types.InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data=mk_cb("close_card")))
        return header, kb
    return "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", None

# ===================== –ú–ï–ù–Æ =====================
def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üìÖ –°–µ–≥–æ–¥–Ω—è", "üìÜ –ù–µ–¥–µ–ª—è")
    kb.row("‚ûï –î–æ–±–∞–≤–∏—Ç—å", "üß© –ú–∞—Å—Ç–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è", "üîé –ù–∞–π—Ç–∏")
    kb.row("‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å", "üöö –ó–∞–∫—É–ø–æ—á–Ω—ã–π –¥–µ–Ω—å", "üß† –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç")
    kb.row("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    return kb

def supply_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üì¶ –ó–∞–∫–∞–∑—ã —Å–µ–≥–æ–¥–Ω—è", "üì• –ü—Ä–∏—ë–º–∫–∏ —Å–µ–≥–æ–¥–Ω—è")
    kb.row("üÜï –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞", "‚¨Ö –ù–∞–∑–∞–¥")
    return kb

# ===================== GPT: –ü–ê–†–°–ò–ù–ì / –ê–°–°–ò–°–¢–ï–ù–¢ =====================
def ai_parse_to_tasks(text, fallback_user_id):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤:
    {date, time, category, subcategory, task, repeat, supplier}
    """
    items = []
    used_ai = False
    if OPENAI_API_KEY:
        try:
            from openai import OpenAI
            client = OpenAI(api_key=OPENAI_API_KEY)
            sys = (
                "–¢—ã –ø–∞—Ä—Å–µ—Ä –∑–∞–¥–∞—á. –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON-–º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤.\n"
                "–û–±—ä–µ–∫—Ç: {date:'–î–î.–ú–ú.–ì–ì–ì–ì'|'' , time:'–ß–ß:–ú–ú'|'' , category:'–ö–æ—Ñ–µ–π–Ω—è|–¢–∞–±–∞—á–∫–∞|–õ–∏—á–Ω–æ–µ|WB'|'' , "
                "subcategory:'' , task:'', repeat:''|–æ–ø–∏—Å–∞–Ω–∏–µ , supplier:''|–∏–º—è}.\n"
                "–ï—Å–ª–∏ –µ—Å—Ç—å —Å–ª–æ–≤–∞ '–ö-–≠–∫—Å–ø—Ä–æ' –∏–ª–∏ '–ò–ü –í—ã–ª–µ–≥–∂–∞–Ω–∏–Ω–∞' ‚Äî —ç—Ç–æ –∑–∞–∫–∞–∑. "
                "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å '–¶–µ–Ω—Ç—Ä'/'–ü–æ–ª–µ—Ç', –µ—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è."
            )
            resp = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role":"system","content":sys},{"role":"user","content":text}],
                temperature=0.1
            )
            raw = resp.choices[0].message.content.strip()
            parsed = json.loads(raw)
            if isinstance(parsed, dict): parsed = [parsed]
            for it in parsed:
                items.append({
                    "date": it.get("date") or "",
                    "time": it.get("time") or "",
                    "category": it.get("category") or "",
                    "subcategory": it.get("subcategory") or "",
                    "task": it.get("task") or "",
                    "repeat": it.get("repeat") or "",
                    "supplier": it.get("supplier") or ""
                })
            used_ai = True
        except Exception as e:
            log.error(f"AI parse failed: {e}")

    if not used_ai:
        # —Ñ–æ–ª–ª–±–µ–∫
        tl = text.lower()
        cat = ""
        if any(x in tl for x in ["–∫–æ—Ñ–µ–π–Ω","–∫-—ç–∫—Å–ø—Ä–æ","–≤—ã–ª–µ–≥–∂–∞–Ω"]): cat = "–ö–æ—Ñ–µ–π–Ω—è"
        elif "—Ç–∞–±–∞—á" in tl: cat = "–¢–∞–±–∞—á–∫–∞"
        elif "wb" in tl: cat = "WB"
        else: cat = "–õ–∏—á–Ω–æ–µ"
        sub = "–¶–µ–Ω—Ç—Ä" if "—Ü–µ–Ω—Ç—Ä" in tl else ("–ü–æ–ª–µ—Ç" if ("–ø–æ–ª–µ—Ç" in tl or "–ø–æ–ª—ë—Ç" in tl) else "")
        dl = re.search(r"(\d{1,2}:\d{2})", text)
        deadline = dl.group(1) if dl else ""
        if "—Å–µ–≥–æ–¥–Ω—è" in tl: d = today_str()
        elif "–∑–∞–≤—Ç—Ä–∞" in tl: d = today_str(now_local()+timedelta(days=1))
        else:
            m = re.search(r"(\d{2}\.\d{2}\.\d{4})", text); d = m.group(1) if m else ""
        items = [{
            "date": d, "time": deadline, "category": cat, "subcategory": sub,
            "task": text.strip(), "repeat":"", "supplier":""
        }]
    return items

def ai_assist_answer(query, user_id):
    try:
        rows = get_tasks_between(user_id, now_local().date(), 7)
        brief = []
        for r in sorted(rows, key=lambda x: (datetime.strptime(x["–î–∞—Ç–∞"], "%d.%m.%Y"), x.get("–î–µ–¥–ª–∞–π–Ω","") or "", x.get("–ó–∞–¥–∞—á–∞","") or "")):
            brief.append(f"{r['–î–∞—Ç–∞']} ‚Ä¢ {r['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']}/{r['–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è'] or '‚Äî'} ‚Äî {r['–ó–∞–¥–∞—á–∞']} (–¥–æ {r['–î–µ–¥–ª–∞–π–Ω'] or '‚Äî'}) [{r.get('–°—Ç–∞—Ç—É—Å','')}]")
        context = "\n".join(brief)[:4000]
        if not OPENAI_API_KEY:
            return "–°–æ–≤–µ—Ç: –Ω–∞—á–Ω–∏ —Å –∑–∞–¥–∞—á —Å –±–ª–∏–∂–∞–π—à–∏–º –¥–µ–¥–ª–∞–π–Ω–æ–º; –∫—Ä—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Ä–∞–∑–±–µ–π –Ω–∞ 2‚Äì3 –ø–æ–¥–∑–∞–¥–∞—á–∏."
        from openai import OpenAI
        client = OpenAI(api_key=OPENAI_API_KEY)
        sys = "–¢—ã –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∑–∞–¥–∞—á–∞–º –∏ –∑–∞–∫—É–ø–∫–∞–º. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –±—É–ª–ª–µ—Ç–∞–º–∏, –Ω–∞ —Ä—É—Å—Å–∫–æ–º."
        prompt = f"–ó–∞–ø—Ä–æ—Å: {query}\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á –Ω–∞ 7 –¥–Ω–µ–π:\n{context}"
        resp = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role":"system","content":sys},{"role":"user","content":prompt}],
            temperature=0.3
        )
        return resp.choices[0].message.content.strip()
    except Exception as e:
        log.error(f"AI assistant error: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."

# ===================== –°–û–°–¢–û–Ø–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø =====================
USER_STATE = {}   # uid -> state
USER_DATA  = {}   # uid -> dict

def set_state(uid, state, data=None):
    USER_STATE[uid] = state
    if data is not None:
        USER_DATA[uid] = data

def get_state(uid):
    return USER_STATE.get(uid)

def get_data(uid):
    return USER_DATA.get(uid, {})

def clear_state(uid):
    USER_STATE.pop(uid, None)
    USER_DATA.pop(uid, None)

# ===================== –•–ï–õ–ü–ï–†–´ –î–õ–Ø –î–û–ë–ê–í–õ–ï–ù–ò–Ø =====================
def add_task_smart(cat, date_s, subcat, text, deadline, user_id, repeat="", source=""):
    row = [date_s, cat, subcat, text, deadline, str(user_id), "", repeat, source]
    append_task(cat, row)

def mark_done_by_id(task_id, user_id):
    for cat, ws in SHEETS.items():
        if not ws: continue
        rows = ws.get_all_records()
        idx = find_row_index_by_id(ws, task_id, rows)
        if not idx: 
            continue
        r = rows[idx-2]
        if str(r.get("User ID")) != str(user_id):
            return False, None
        update_cell(ws, idx, "–°—Ç–∞—Ç—É—Å", "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
        return True, r
    return False, None

# ===================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î/–ú–ï–ù–Æ =====================
@bot.message_handler(commands=["start"])
def cmd_start(m):
    bot.send_message(m.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∑–∞–¥–∞—á–∞–º –∏ –∑–∞–∫—É–ø–∫–∞–º. –ß—Ç–æ –¥–µ–ª–∞–µ–º?", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "üìÖ –°–µ–≥–æ–¥–Ω—è")
def handle_today(m):
    uid = m.chat.id
    d = today_str()
    rows = get_tasks_by_date(uid, d)
    if not rows:
        bot.send_message(uid, f"üìÖ –ó–∞–¥–∞—á–∏ –Ω–∞ {d}\n\n–ó–∞–¥–∞—á –Ω–µ—Ç.", reply_markup=main_menu()); return
    # —Å–ø–∏—Å–æ–∫ -> –∫–∞—Ä—Ç–æ—á–∫–∏ (inline)
    items = []
    for r in rows:
        tid = sha_task_id(str(r.get("User ID")), r.get("–î–∞—Ç–∞",""), r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ó–∞–¥–∞—á–∞",""), r.get("–î–µ–¥–ª–∞–π–Ω",""))
        items.append((build_task_line(r), tid))
    page = 1
    total_pages = (len(items)+PAGE_SIZE-1)//PAGE_SIZE
    slice_items = items[(page-1)*PAGE_SIZE:page*PAGE_SIZE]
    kb = page_buttons(slice_items, page, total_pages, prefix_action="open")
    header = f"üìÖ –ó–∞–¥–∞—á–∏ –Ω–∞ {d}\n\n" + format_grouped(rows, header_date=d)
    bot.send_message(uid, header, reply_markup=main_menu())
    bot.send_message(uid, "–û—Ç–∫—Ä–æ–π –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞–¥–∞—á–∏:", reply_markup=kb)

@bot.message_handler(func=lambda msg: msg.text == "üìÜ –ù–µ–¥–µ–ª—è")
def handle_week(m):
    uid = m.chat.id
    tasks = get_tasks_between(uid, now_local().date(), 7)
    if not tasks:
        bot.send_message(uid, "–ù–∞ –Ω–µ–¥–µ–ª—é –∑–∞–¥–∞—á –Ω–µ—Ç.", reply_markup=main_menu()); return
    by_day = {}
    for r in tasks:
        by_day.setdefault(r["–î–∞—Ç–∞"], []).append(r)
    parts = []
    for d in sorted(by_day.keys(), key=lambda s: datetime.strptime(s, "%d.%m.%Y")):
        parts.append(format_grouped(by_day[d], header_date=d))
        parts.append("")
    bot.send_message(uid, "\n".join(parts), reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å")
def handle_add_free(m):
    uid = m.chat.id
    set_state(uid, "adding_text")
    bot.send_message(uid, "–û–ø–∏—à–∏ –∑–∞–¥–∞—á—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –Ø —Ä–∞—Å–ø–∞—Ä—à—É –¥–∞—Ç—É/–≤—Ä–µ–º—è/–∫–∞—Ç–µ–≥–æ—Ä–∏—é.\n–ù–∞–ø—Ä.: ¬´–ó–∞–∫–∞–∑–∞—Ç—å –ö-–≠–∫—Å–ø—Ä–æ –¶–µ–Ω—Ç—Ä –∑–∞–≤—Ç—Ä–∞ –¥–æ 14:00¬ª")

@bot.message_handler(func=lambda msg: msg.text == "üß© –ú–∞—Å—Ç–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
def handle_add_wizard(m):
    uid = m.chat.id
    set_state(uid, "wizard_cat")
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(*CATEGORIES)
    kb.row("‚¨Ö –û—Ç–º–µ–Ω–∞")
    bot.send_message(uid, "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)

@bot.message_handler(func=lambda msg: msg.text == "üîé –ù–∞–π—Ç–∏")
def handle_search(m):
    uid = m.chat.id
    set_state(uid, "search_text")
    bot.send_message(uid, "–ß—Ç–æ –∏—â–µ–º? –í–≤–µ–¥–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è/–∫–∞—Ç–µ–≥–æ—Ä–∏–∏/–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏/–¥–∞—Ç—ã.")

@bot.message_handler(func=lambda msg: msg.text == "‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å")
def handle_done_menu(m):
    uid = m.chat.id
    set_state(uid, "done_text")
    bot.send_message(uid, "–ù–∞–ø–∏—à–∏, —á—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ. –ü—Ä–∏–º–µ—Ä—ã:\n<b>—Å–¥–µ–ª–∞–ª –∑–∞–∫–∞–∑ –∫-—ç–∫—Å–ø—Ä–æ —Ü–µ–Ω—Ç—Ä</b>\n<b>–∑–∞–∫—Ä—ã–ª–∏ –∑–∞–∫–∞–∑ –≤—ã–ª–µ–≥–∂–∞–Ω–∏–Ω–∞</b>")

@bot.message_handler(func=lambda msg: msg.text == "üöö –ó–∞–∫—É–ø–æ—á–Ω—ã–π –¥–µ–Ω—å")
def handle_supply(m):
    bot.send_message(m.chat.id, "–ú–µ–Ω—é –∑–∞–∫—É–ø–æ–∫:", reply_markup=supply_menu())

@bot.message_handler(func=lambda msg: msg.text == "üì¶ –ó–∞–∫–∞–∑—ã —Å–µ–≥–æ–¥–Ω—è")
def handle_today_orders(m):
    uid = m.chat.id
    date_s = today_str()
    rows = get_tasks_by_date(uid, date_s)
    orders = [r for r in rows if is_order_task(r.get("–ó–∞–¥–∞—á–∞",""))]
    if not orders:
        bot.send_message(uid, "–°–µ–≥–æ–¥–Ω—è –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç.", reply_markup=supply_menu()); return
    items = []
    for i,r in enumerate(orders, start=1):
        tid = sha_task_id(str(r.get("User ID")), r.get("–î–∞—Ç–∞",""), r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ó–∞–¥–∞—á–∞",""), r.get("–î–µ–¥–ª–∞–π–Ω",""))
        items.append((build_task_line(r, i), tid))
    kb = types.InlineKeyboardMarkup()
    for text, tid in items:
        kb.add(types.InlineKeyboardButton(text, callback_data=mk_cb("open", id=tid)))
    bot.send_message(uid, "–ó–∞–∫–∞–∑—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:", reply_markup=kb)

@bot.message_handler(func=lambda msg: msg.text == "üì• –ü—Ä–∏—ë–º–∫–∏ —Å–µ–≥–æ–¥–Ω—è")
def handle_today_deliveries(m):
    uid = m.chat.id
    date_s = today_str()
    rows = get_tasks_by_date(uid, date_s)
    deliveries = [r for r in rows if "–ø—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É" in (r.get("–ó–∞–¥–∞—á–∞","") or "").lower()]
    if not deliveries:
        bot.send_message(uid, "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–∏—ë–º–æ–∫ –Ω–µ—Ç.", reply_markup=supply_menu()); return
    items = []
    for i,r in enumerate(deliveries, start=1):
        tid = sha_task_id(str(r.get("User ID")), r.get("–î–∞—Ç–∞",""), r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ó–∞–¥–∞—á–∞",""), r.get("–î–µ–¥–ª–∞–π–Ω",""))
        items.append((build_task_line(r, i), tid))
    kb = types.InlineKeyboardMarkup()
    for text, tid in items:
        kb.add(types.InlineKeyboardButton(text, callback_data=mk_cb("open", id=tid)))
    bot.send_message(uid, "–ü—Ä–∏—ë–º–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:", reply_markup=kb)

@bot.message_handler(func=lambda msg: msg.text == "üÜï –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")
def handle_add_supplier(m):
    uid = m.chat.id
    set_state(uid, "add_supplier")
    bot.send_message(uid, "–§–æ—Ä–º–∞—Ç: <b>–ü–æ—Å—Ç–∞–≤—â–∏–∫; –ü—Ä–∞–≤–∏–ª–æ; –î–µ–¥–ª–∞–π–Ω–ó–∞–∫–∞–∑–∞; Emoji; DeliveryOffsetDays; –•—Ä–∞–Ω–µ–Ω–∏–µ_–¥–Ω–µ–π; –°—Ç–∞—Ä—Ç_—Ü–∏–∫–ª–∞; –ê–≤—Ç–æ(1/0); –ê–∫—Ç–∏–≤–µ–Ω(1/0)</b>\n\n–ù–∞–ø—Ä.: \n–ö-–≠–∫—Å–ø—Ä–æ; –∫–∞–∂–¥—ã–µ 2 –¥–Ω—è; 14:00; üì¶; 1; 0; ; 1; 1")

@bot.message_handler(func=lambda msg: msg.text == "üß† –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç")
def handle_ai(m):
    uid = m.chat.id
    set_state(uid, "assistant_text")
    bot.send_message(uid, "–ß—Ç–æ –Ω—É–∂–Ω–æ? (—Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–µ–Ω—å, –≤—ã–¥–µ–ª–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã, —Å–æ—Å—Ç–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∑–∞–∫—É–ø–æ–∫ –∏ —Ç.–¥.)")

@bot.message_handler(func=lambda msg: msg.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
def handle_settings(m):
    bot.send_message(m.chat.id, f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: <b>{TZ_NAME}</b>\n–£—Ç—Ä–µ–Ω–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç: <b>08:00</b>", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text in ["‚¨Ö –ù–∞–∑–∞–¥","‚¨Ö –û—Ç–º–µ–Ω–∞"])
def handle_back(m):
    clear_state(m.chat.id)
    bot.send_message(m.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

# ===================== –¢–ï–ö–°–¢–û–í–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø =====================
@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "adding_text")
def adding_text(m):
    uid = m.chat.id
    txt = m.text.strip()
    try:
        items = ai_parse_to_tasks(txt, uid)
        created = 0
        for it in items:
            cat  = it["category"] or "–õ–∏—á–Ω–æ–µ"
            ws = get_ws_by_category(cat)
            if not ws:
                bot.send_message(uid, f"–ù–µ –Ω–∞–π–¥–µ–Ω –ª–∏—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{cat}¬ª. –ó–∞–¥–∞—á–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.", reply_markup=main_menu())
                continue
            date_s = it["date"] or today_str()
            sub    = it["subcategory"] or ""
            task   = it["task"]
            tm     = it["time"] or ""
            repeat = it["repeat"] or ""
            source = it["supplier"] or ""
            add_task_smart(cat, date_s, sub, task, tm, uid, repeat=repeat, source=source)
            created += 1
        bot.send_message(uid, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–¥–∞—á: {created}", reply_markup=main_menu())
        log_event(uid, "add_task_nlp", txt)
    except Exception as e:
        log.error(f"adding_text error: {e}")
        bot.send_message(uid, "–ù–µ —Å–º–æ–≥ –¥–æ–±–∞–≤–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –∏–Ω–∞—á–µ.", reply_markup=main_menu())
    finally:
        clear_state(uid)

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "search_text")
def search_text(m):
    uid = m.chat.id
    q = m.text.strip().lower()
    found = []
    for cat, ws in SHEETS.items():
        if not ws: continue
        rows = ws.get_all_records()
        for r in rows:
            if str(r.get("User ID")) != str(uid): 
                continue
            hay = " ".join([str(r.get(k,"")) for k in TASK_HEADERS]).lower()
            if q in hay:
                tid = sha_task_id(str(r.get("User ID")), r.get("–î–∞—Ç–∞",""), r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",cat), r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ó–∞–¥–∞—á–∞",""), r.get("–î–µ–¥–ª–∞–π–Ω",""))
                found.append((build_task_line(r), tid))
    if not found:
        bot.send_message(uid, "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=main_menu()); clear_state(uid); return
    total_pages = (len(found)+PAGE_SIZE-1)//PAGE_SIZE
    page = 1
    slice_items = found[(page-1)*PAGE_SIZE:page*PAGE_SIZE]
    kb = page_buttons(slice_items, page, total_pages, prefix_action="open")
    bot.send_message(uid, "–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:", reply_markup=kb)
    clear_state(uid)

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "done_text")
def done_text(m):
    uid = m.chat.id
    txt = m.text.strip().lower()
    supplier = guess_supplier(txt)
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∑–∞–¥–∞—á–∏
    changed = 0
    last_closed = None
    rows = get_tasks_by_date(uid, today_str())
    for r in rows:
        if (r.get("–°—Ç–∞—Ç—É—Å","") or "").lower() == "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ":
            continue
        t = (r.get("–ó–∞–¥–∞—á–∞","") or "").lower()
        if supplier and supplier.lower() not in t:
            continue
        if not supplier and not any(w in t for w in ["–∫-—ç–∫—Å–ø—Ä–æ","–≤—ã–ª–µ–≥–∂–∞–Ω","–∑–∞–∫–∞–∑","—Å–¥–µ–ª–∞–ª","–æ—Ñ–æ—Ä–º–∏–ª"]):
            continue
        tid = sha_task_id(str(r.get("User ID")), r.get("–î–∞—Ç–∞",""), r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ó–∞–¥–∞—á–∞",""), r.get("–î–µ–¥–ª–∞–π–Ω",""))
        ok, _r = mark_done_by_id(tid, uid)
        if ok:
            changed += 1
            last_closed = _r
    msg = f"‚úÖ –û—Ç–º–µ—á–µ–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º: {changed}."
    if changed and last_closed and supplier:
        created = plan_next_by_supplier_rule(uid, supplier, last_closed.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è","–ö–æ—Ñ–µ–π–Ω—è"), last_closed.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), last_closed.get("–ó–∞–¥–∞—á–∞",""))
        if created:
            msg += "\nüîÆ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: " + ", ".join([f"–ø—Ä–∏—ë–º–∫–∞ {d1.strftime('%d.%m')} ‚Üí –∑–∞–∫–∞–∑ {d2.strftime('%d.%m')}" for d1,d2 in created])
    bot.send_message(uid, msg, reply_markup=main_menu())
    clear_state(uid)

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "assistant_text")
def assistant_text(m):
    uid = m.chat.id
    answer = ai_assist_answer(m.text.strip(), uid)
    bot.send_message(uid, f"üß† {answer}", reply_markup=main_menu())
    clear_state(uid)

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "add_supplier")
def add_supplier_text(m):
    uid = m.chat.id
    txt = m.text.strip()
    if not ws_suppliers:
        bot.send_message(uid, "–õ–∏—Å—Ç '–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏' –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", reply_markup=supply_menu()); clear_state(uid); return
    try:
        # –ü–æ—Å—Ç–∞–≤—â–∏–∫; –ü—Ä–∞–≤–∏–ª–æ; –î–µ–¥–ª–∞–π–Ω–ó–∞–∫–∞–∑–∞; Emoji; DeliveryOffsetDays; –•—Ä–∞–Ω–µ–Ω–∏–µ_–¥–Ω–µ–π; –°—Ç–∞—Ä—Ç_—Ü–∏–∫–ª–∞; –ê–≤—Ç–æ; –ê–∫—Ç–∏–≤–µ–Ω
        parts = [p.strip() for p in txt.split(";")]
        while len(parts) < 9:
            parts.append("")
        ws_suppliers.append_row(parts[:9], value_input_option="USER_ENTERED")
        load_supplier_rules_from_sheet()
        bot.send_message(uid, f"‚úÖ –ü–æ—Å—Ç–∞–≤—â–∏–∫ ¬´{parts[0]}¬ª –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=supply_menu())
    except Exception as e:
        log.error(f"add_supplier error: {e}")
        bot.send_message(uid, "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞.", reply_markup=supply_menu())
    finally:
        clear_state(uid)

# ====== –ú–ê–°–¢–ï–† –î–û–ë–ê–í–õ–ï–ù–ò–Ø (–∫–∞—Ç–µ–≥–æ—Ä–∏—è ‚Üí –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è ‚Üí —Ç–µ–∫—Å—Ç ‚Üí –¥–∞—Ç–∞ ‚Üí –≤—Ä–µ–º—è ‚Üí –ø–æ–≤—Ç–æ—Ä) ======
@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "wizard_cat")
def wizard_cat(m):
    uid = m.chat.id
    cat = (m.text or "").strip()
    if cat not in CATEGORIES:
        bot.send_message(uid, "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–Ω–æ–ø–∫–æ–π.", reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(*[types.KeyboardButton(c) for c in CATEGORIES])); return
    set_state(uid, "wizard_sub", {"cat":cat})
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("–¶–µ–Ω—Ç—Ä","–ü–æ–ª–µ—Ç","‚Äî")
    kb.row("‚¨Ö –û—Ç–º–µ–Ω–∞")
    bot.send_message(uid, "–í—ã–±–µ—Ä–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é (–∏–ª–∏ ¬´‚Äî¬ª):", reply_markup=kb)

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "wizard_sub")
def wizard_sub(m):
    uid = m.chat.id
    data = get_data(uid)
    sub = (m.text or "").strip()
    if sub == "‚Äî": sub = ""
    set_state(uid, "wizard_task", {"cat":data["cat"], "sub":sub})
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("‚¨Ö –û—Ç–º–µ–Ω–∞")
    bot.send_message(uid, "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:", reply_markup=kb)

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "wizard_task")
def wizard_task(m):
    uid = m.chat.id
    data = get_data(uid)
    task = m.text.strip()
    set_state(uid, "wizard_date", {"cat":data["cat"], "sub":data["sub"], "task":task})
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("–°–µ–≥–æ–¥–Ω—è","–ó–∞–≤—Ç—Ä–∞")
    kb.row("üìÖ –î—Ä—É–≥–∞—è –¥–∞—Ç–∞","‚¨Ö –û—Ç–º–µ–Ω–∞")
    bot.send_message(uid, "–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É:", reply_markup=kb)

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "wizard_date")
def wizard_date(m):
    uid = m.chat.id
    data = get_data(uid)
    t = m.text.strip().lower()
    if t == "—Å–µ–≥–æ–¥–Ω—è": ds = today_str()
    elif t == "–∑–∞–≤—Ç—Ä–∞": ds = today_str(now_local()+timedelta(days=1))
    elif t in ["üìÖ –¥—Ä—É–≥–∞—è –¥–∞—Ç–∞","–¥—Ä—É–≥–∞—è –¥–∞—Ç–∞"]:
        set_state(uid, "wizard_date_manual", data)
        bot.send_message(uid, "–í–≤–µ–¥–∏ –¥–∞—Ç—É –î–î.–ú–ú.–ì–ì–ì–ì:")
        return
    else:
        bot.send_message(uid, "–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É –∫–Ω–æ–ø–∫–æ–π –∏–ª–∏ ¬´üìÖ –î—Ä—É–≥–∞—è –¥–∞—Ç–∞¬ª."); return
    set_state(uid, "wizard_time", {**data, "date": ds})
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("09:00","12:00","14:00","16:00","‚Äî")
    kb.row("‚¨Ö –û—Ç–º–µ–Ω–∞")
    bot.send_message(uid, "–í—ã–±–µ—Ä–∏ –¥–µ–¥–ª–∞–π–Ω (–∏–ª–∏ ¬´‚Äî¬ª):", reply_markup=kb)

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "wizard_date_manual")
def wizard_date_manual(m):
    uid = m.chat.id
    data = get_data(uid)
    ds = m.text.strip()
    try:
        datetime.strptime(ds, "%d.%m.%Y")
    except Exception:
        bot.send_message(uid, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–µ–Ω –î–î.–ú–ú.–ì–ì–ì–ì."); return
    set_state(uid, "wizard_time", {**data, "date": ds})
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("09:00","12:00","14:00","16:00","‚Äî")
    kb.row("‚¨Ö –û—Ç–º–µ–Ω–∞")
    bot.send_message(uid, "–í—ã–±–µ—Ä–∏ –¥–µ–¥–ª–∞–π–Ω (–∏–ª–∏ ¬´‚Äî¬ª):", reply_markup=kb)

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "wizard_time")
def wizard_time(m):
    uid = m.chat.id
    data = get_data(uid)
    t = m.text.strip()
    if t == "‚Äî":
        tm = ""
    else:
        if not re.fullmatch(r"\d{1,2}:\d{2}", t):
            bot.send_message(uid, "–§–æ—Ä–º–∞—Ç –ß–ß:–ú–ú –∏–ª–∏ ¬´‚Äî¬ª."); return
        tm = t
    set_state(uid, "wizard_repeat", {**data, "time": tm})
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("‚Äî","–∫–∞–∂–¥—ã–π –¥–µ–Ω—å","–∫–∞–∂–¥—ã–µ 2 –¥–Ω—è","–∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é")
    kb.row("‚¨Ö –û—Ç–º–µ–Ω–∞")
    bot.send_message(uid, "–ü–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å:", reply_markup=kb)

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "wizard_repeat")
def wizard_repeat(m):
    uid = m.chat.id
    data = get_data(uid)
    rep = m.text.strip()
    if rep == "‚Äî": rep = ""
    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º
    try:
        add_task_smart(data["cat"], data["date"], data["sub"], data["task"], data["time"], uid, repeat=rep)
        bot.send_message(uid, "‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.", reply_markup=main_menu())
        log_event(uid, "add_task_wizard", json.dumps(data, ensure_ascii=False))
    except Exception as e:
        log.error(f"wizard add error: {e}")
        bot.send_message(uid, "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É (–ø—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –ª–∏—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç).", reply_markup=main_menu())
    finally:
        clear_state(uid)

# ===================== INLINE CALLBACKS =====================
@bot.callback_query_handler(func=lambda c: True)
def callbacks(c):
    uid = c.message.chat.id
    data = parse_cb(c.data) if c.data and c.data != "noop" else None
    if not data:
        bot.answer_callback_query(c.id); return

    a = data.get("a")

    if a == "page":
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –æ–±–Ω–æ–≤–∏–º —Å–ø–∏—Å–æ–∫ ¬´–°–µ–≥–æ–¥–Ω—è¬ª
        date_s = today_str()
        rows = get_tasks_by_date(uid, date_s)
        items = []
        for r in rows:
            tid = sha_task_id(str(r.get("User ID")), r.get("–î–∞—Ç–∞",""), r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ó–∞–¥–∞—á–∞",""), r.get("–î–µ–¥–ª–∞–π–Ω",""))
            items.append((build_task_line(r), tid))
        total_pages = (len(items)+PAGE_SIZE-1)//PAGE_SIZE
        page = max(1, min(int(data.get("p", 1)), total_pages))
        slice_items = items[(page-1)*PAGE_SIZE:page*PAGE_SIZE]
        kb = page_buttons(slice_items, page, total_pages, prefix_action="open")
        try:
            bot.edit_message_reply_markup(uid, c.message.message_id, reply_markup=kb)
        except Exception:
            pass
        bot.answer_callback_query(c.id); return

    if a == "open":
        task_id = data.get("id")
        text, kb = render_task_card(uid, task_id)
        bot.answer_callback_query(c.id)
        if kb: bot.send_message(uid, text, reply_markup=kb)
        else:  bot.send_message(uid, text)
        return

    if a == "close_card":
        bot.answer_callback_query(c.id, "–ó–∞–∫—Ä—ã—Ç–æ")
        try:
            bot.delete_message(uid, c.message.message_id)
        except Exception:
            pass
        return

    if a == "done":
        task_id = data.get("id")
        ok, r = mark_done_by_id(task_id, uid)
        if not ok:
            bot.answer_callback_query(c.id, "–ù–µ —Å–º–æ–≥ –æ—Ç–º–µ—Ç–∏—Ç—å", show_alert=True); return
        supplier = guess_supplier(r.get("–ó–∞–¥–∞—á–∞",""))
        msg = "‚úÖ –ì–æ—Ç–æ–≤–æ."
        if supplier:
            created = plan_next_by_supplier_rule(uid, supplier, r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è","–ö–æ—Ñ–µ–π–Ω—è"), r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ó–∞–¥–∞—á–∞",""))
            if created: msg += " –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∏—ë–º–∫–∞/—Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑."
        bot.answer_callback_query(c.id, msg, show_alert=True)
        # –ø–µ—Ä–µ—Ä–∏—Å—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
        text, kb = render_task_card(uid, task_id)
        if kb: bot.edit_message_text(text, uid, c.message.message_id, reply_markup=kb)
        else:  bot.edit_message_text(text, uid, c.message.message_id)
        return

    if a == "accept_delivery":
        task_id = data.get("id")
        kb = types.InlineKeyboardMarkup()
        kb.row(
            types.InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data=mk_cb("accept_delivery_date", id=task_id, d="today")),
            types.InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞", callback_data=mk_cb("accept_delivery_date", id=task_id, d="tomorrow")),
        )
        kb.row(types.InlineKeyboardButton("üìÖ –î—Ä—É–≥–∞—è –¥–∞—Ç–∞", callback_data=mk_cb("accept_delivery_pick", id=task_id)))
        bot.answer_callback_query(c.id)
        bot.send_message(uid, "–ö–æ–≥–¥–∞ –ø—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É?", reply_markup=kb)
        return

    if a == "accept_delivery_pick":
        task_id = data.get("id")
        set_state(uid, "pick_delivery_date", {"task_id": task_id})
        bot.answer_callback_query(c.id)
        bot.send_message(uid, "–í–≤–µ–¥–∏ –¥–∞—Ç—É –î–î.–ú–ú.–ì–ì–ì–ì:")
        return

    if a == "accept_delivery_date":
        task_id = data.get("id")
        when = data.get("d")
        # –Ω–∞–π–¥—ë–º –∏—Å—Ö–æ–¥–Ω—É—é –∑–∞–¥–∞—á—É
        base = None; base_ws = None; base_idx = None
        for cat, ws in SHEETS.items():
            if not ws: continue
            rows = ws.get_all_records()
            idx = find_row_index_by_id(ws, task_id, rows)
            if idx:
                base = rows[idx-2]; base_ws = ws; base_idx = idx; break
        if not base:
            bot.answer_callback_query(c.id, "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True); return
        if when == "today": date_s = today_str()
        elif when == "tomorrow": date_s = today_str(now_local()+timedelta(days=1))
        else: date_s = today_str()
        supplier = guess_supplier(base.get("–ó–∞–¥–∞—á–∞","")) or "–ü–æ—Å—Ç–∞–≤–∫–∞"
        cat = base.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è") or "–ö–æ—Ñ–µ–π–Ω—è"
        sub = normalize_tt_from_subcat(base.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""))
        add_task_smart(cat, date_s, sub, f"üöö –ü—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É {supplier} ({sub or '‚Äî'})", "10:00", uid, repeat="", source=f"subtask:{task_id}")
        bot.answer_callback_query(c.id, f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –Ω–∞ {date_s}", show_alert=True)
        return

    if a == "add_sub":
        task_id = data.get("id")
        set_state(uid, "add_subtask_text", {"task_id": task_id})
        bot.answer_callback_query(c.id)
        bot.send_message(uid, "–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –ø–æ–¥–∑–∞–¥–∞—á–∏:")
        return

    if a == "remind_set":
        task_id = data.get("id")
        set_state(uid, "set_reminder", {"task_id": task_id})
        bot.answer_callback_query(c.id)
        bot.send_message(uid, "–ö–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å? –§–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (–ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è).")
        return

# ====== –¢–ï–ö–°–¢ –î–õ–Ø –ü–û–î–ó–ê–î–ê–ß/–î–ê–¢–´/–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô ======
@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "add_subtask_text")
def add_subtask_text(m):
    uid = m.chat.id
    data = get_data(uid)
    task_id = data.get("task_id")
    text = m.text.strip()
    # –Ω–∞–π–¥—ë–º —Ä–æ–¥–∏—Ç–µ–ª—è
    base = None
    for cat, ws in SHEETS.items():
        if not ws: continue
        rows = ws.get_all_records()
        idx = find_row_index_by_id(ws, task_id, rows)
        if idx:
            base = (cat, rows[idx-2]); break
    if not base:
        bot.send_message(uid, "–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_menu()); clear_state(uid); return
    cat, parent = base
    add_task_smart(cat, parent.get("–î–∞—Ç–∞",""), parent.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), f"‚Ä¢ {text}", parent.get("–î–µ–¥–ª–∞–π–Ω",""), uid, repeat="", source=f"subtask:{task_id}")
    bot.send_message(uid, "–ü–æ–¥–∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.", reply_markup=main_menu())
    clear_state(uid)

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "pick_delivery_date")
def pick_delivery_date(m):
    uid = m.chat.id
    data = get_data(uid)
    task_id = data.get("task_id")
    ds = m.text.strip()
    try:
        datetime.strptime(ds, "%d.%m.%Y")
    except Exception:
        bot.send_message(uid, "–î–∞—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞. –ù—É–∂–µ–Ω –î–î.–ú–ú.–ì–ì–ì–ì.", reply_markup=main_menu()); clear_state(uid); return
    base = None
    for cat, ws in SHEETS.items():
        if not ws: continue
        rows = ws.get_all_records()
        idx = find_row_index_by_id(ws, task_id, rows)
        if idx:
            base = (cat, rows[idx-2]); break
    if not base:
        bot.send_message(uid, "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_menu()); clear_state(uid); return
    cat, r = base
    supplier = guess_supplier(r.get("–ó–∞–¥–∞—á–∞","")) or "–ü–æ—Å—Ç–∞–≤–∫–∞"
    sub = normalize_tt_from_subcat(r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""))
    add_task_smart(cat, ds, sub, f"üöö –ü—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É {supplier} ({sub or '‚Äî'})", "10:00", uid, repeat="", source=f"subtask:{task_id}")
    bot.send_message(uid, f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –Ω–∞ {ds}.", reply_markup=main_menu())
    clear_state(uid)

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "set_reminder")
def set_reminder(m):
    uid = m.chat.id
    data = get_data(uid)
    task_id = data.get("task_id")
    t = m.text.strip()
    if not re.fullmatch(r"\d{1,2}:\d{2}", t):
        bot.send_message(uid, "–ù—É–∂–µ–Ω —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú.", reply_markup=main_menu()); clear_state(uid); return
    # –Ω–∞–π–¥—ë–º –∑–∞–ø–∏—Å—å –∏ –¥–æ–ø–∏—à–µ–º –≤ ¬´–ò—Å—Ç–æ—á–Ω–∏–∫¬ª –º–∞—Ä–∫–µ—Ä remind:HH:MM
    for cat, ws in SHEETS.items():
        if not ws: continue
        rows = ws.get_all_records()
        idx = find_row_index_by_id(ws, task_id, rows)
        if not idx: 
            continue
        cur_source = rows[idx-2].get("–ò—Å—Ç–æ—á–Ω–∏–∫","") or ""
        new_source = (cur_source + "; " if cur_source else "") + f"remind:{t}"
        update_cell(ws, idx, "–ò—Å—Ç–æ—á–Ω–∏–∫", new_source)
        bot.send_message(uid, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {t}.", reply_markup=main_menu())
        clear_state(uid)
        return
    bot.send_message(uid, "–ù–µ –Ω–∞—à—ë–ª –∑–∞–¥–∞—á—É.", reply_markup=main_menu()); clear_state(uid)

# ===================== –î–ê–ô–î–ñ–ï–°–¢/–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø =====================
def job_daily_digest():
    try:
        if not ws_users: return
        users = ws_users.get_all_records()
        today = today_str()
        for u in users:
            uid = str(u.get("Telegram ID") or "").strip()
            if not uid:
                continue
            tasks = get_tasks_by_date(uid, today)
            if not tasks:
                continue
            text = f"üìÖ –ü–ª–∞–Ω –Ω–∞ {today}\n\n" + format_grouped(tasks, header_date=today)
            try:
                bot.send_message(uid, text)
            except Exception as e:
                log.error(f"send digest error {e}")
    except Exception as e:
        log.error(f"job_daily_digest error {e}")

def job_reminders():
    try:
        today = today_str()
        rows = get_all_task_rows()
        for r in rows:
            if (r.get("–î–∞—Ç–∞") or "") != today: 
                continue
            src = (r.get("–ò—Å—Ç–æ—á–Ω–∏–∫") or "")
            if "remind:" not in src:
                continue
            matches = re.findall(r"remind:(\d{1,2}:\d{2})", src)
            for tm in matches:
                key = sha_task_id(str(r.get("User ID")), r.get("–î–∞—Ç–∞",""), r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ó–∞–¥–∞—á–∞",""), r.get("–î–µ–¥–ª–∞–π–Ω","")) + "|" + today + "|" + tm
                if key in NOTIFIED:
                    continue
                hh, mm = map(int, tm.split(":"))
                nowt = now_local().time()
                if (nowt.hour, nowt.minute) >= (hh, mm):
                    try:
                        bot.send_message(r.get("User ID"), f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {r.get('–ö–∞—Ç–µ–≥–æ—Ä–∏—è','')}/{r.get('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è','')} ‚Äî {r.get('–ó–∞–¥–∞—á–∞','')} (–¥–æ {r.get('–î–µ–¥–ª–∞–π–Ω') or '‚Äî'})")
                        NOTIFIED.add(key)
                    except Exception:
                        pass
    except Exception as e:
        log.error(f"job_reminders error {e}")

def scheduler_thread():
    schedule.clear()
    schedule.every().day.at("08:00").do(job_daily_digest)
    schedule.every(1).minutes.do(job_reminders)
    while True:
        schedule.run_pending()
        time.sleep(1)

# ===================== WEBHOOK / FLASK =====================
app = Flask(__name__)

@app.route("/" + API_TOKEN, methods=["POST"])
def webhook():
    try:
        update = request.get_data().decode("utf-8")
        upd = types.Update.de_json(update)
        bot.process_new_updates([upd])
    except Exception as e:
        log.error(f"Webhook error: {e}")
    return "OK", 200

@app.route("/")
def home():
    return "Bot is running!"

# ===================== START =====================
if __name__ == "__main__":
    if not API_TOKEN or not WEBHOOK_URL:
        raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω—ã TELEGRAM_TOKEN –∏–ª–∏ WEBHOOK_BASE")

    try:
        bot.remove_webhook()
    except Exception:
        pass
    time.sleep(0.5)
    bot.set_webhook(url=WEBHOOK_URL)

    threading.Thread(target=scheduler_thread, daemon=True).start()
    app.run(host="0.0.0.0", port=int(os.getenv("PORT","5000")))
