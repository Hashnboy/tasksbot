import telebot
import gspread
import schedule
import time
import threading
from datetime import datetime, timedelta
from flask import Flask

# ====== –ù–ê–°–¢–†–û–ô–ö–ò ======
API_TOKEN = "7959600917:AAF7szpbvX8CoFObxjVb6y3aCiSceCi-Rt4"  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
TABLE_URL = "https://docs.google.com/spreadsheets/d/1lIV2kUx8sDHR1ynMB2di8j5n9rpj1ydhsmfjXJpRGeA/edit?usp=sharing"
CREDENTIALS_FILE = "/etc/secrets/credentials.json"

bot = telebot.TeleBot(API_TOKEN)

# ====== –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö GOOGLE SHEETS ======
gc = gspread.service_account(filename=CREDENTIALS_FILE)
sh = gc.open_by_url(TABLE_URL)

tasks_ws = sh.worksheet("–ó–∞–¥–∞—á–∏")
users_ws = sh.worksheet("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
repeat_ws = sh.worksheet("–ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–∞–¥–∞—á–∏")

# ====== –§–£–ù–ö–¶–ò–ò ======
def get_users():
    users = []
    rows = users_ws.get_all_records()
    for row in rows:
        if row.get("Telegram ID"):
            categories = []
            raw = row.get("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–¥–∞—á") or ""
            if raw:
                categories = [c.strip() for c in raw.split(",") if c.strip()]
            users.append({
                "name": row.get("–ò–º—è", ""),
                "id": str(row.get("Telegram ID")),
                "categories": categories
            })
    return users

def get_tasks_for_date(user_id, date_str):
    tasks = []
    rows = tasks_ws.get_all_records()
    users = get_users()
    user_info = next((u for u in users if u["id"] == str(user_id)), None)
    for row in rows:
        if row.get("–î–∞—Ç–∞") == date_str:
            if not user_info or not user_info["categories"] or row.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è") in user_info["categories"]:
                tasks.append(row)
    return tasks

def add_task(date, category, subcategory, task, deadline, status="", repeat=""):
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –≤ –∫–æ–Ω–µ—Ü –ª–∏—Å—Ç–∞
    tasks_ws.append_row([date, category, subcategory, task, deadline, status, repeat])

def process_repeating_tasks():
    today_str = datetime.now().strftime("%d.%m.%Y")
    today_weekday = datetime.now().strftime("%A").lower()
    weekday_map = {
        "monday": "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "tuesday": "–≤—Ç–æ—Ä–Ω–∏–∫",
        "wednesday": "—Å—Ä–µ–¥–∞",
        "thursday": "—á–µ—Ç–≤–µ—Ä–≥",
        "friday": "–ø—è—Ç–Ω–∏—Ü–∞",
        "saturday": "—Å—É–±–±–æ—Ç–∞",
        "sunday": "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }
    today_rus = weekday_map.get(today_weekday, "")

    existing_tasks_today = [t.get("–ó–∞–¥–∞—á–∞") for t in tasks_ws.get_all_records() if t.get("–î–∞—Ç–∞") == today_str]

    for row in repeat_ws.get_all_records():
        if (row.get("–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏") or "").strip().lower() == today_rus:
            if row.get("–ó–∞–¥–∞—á–∞") and row.get("–ó–∞–¥–∞—á–∞") not in existing_tasks_today:
                add_task(today_str,
                         row.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", ""),
                         row.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è", ""),
                         row.get("–ó–∞–¥–∞—á–∞", ""),
                         row.get("–í—Ä–µ–º—è", ""),
                         "", "–ø–æ–≤—Ç–æ—Ä")

def schedule_next_repeat_tasks():
    weekday_to_int = {
        "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": 0,
        "–≤—Ç–æ—Ä–Ω–∏–∫": 1,
        "—Å—Ä–µ–¥–∞": 2,
        "—á–µ—Ç–≤–µ—Ä–≥": 3,
        "–ø—è—Ç–Ω–∏—Ü–∞": 4,
        "—Å—É–±–±–æ—Ç–∞": 5,
        "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": 6
    }
    today = datetime.now()
    for row in repeat_ws.get_all_records():
        dow_raw = (row.get("–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏") or "").strip().lower()
        if dow_raw not in weekday_to_int:
            continue
        target_weekday = weekday_to_int[dow_raw]
        days_ahead = (target_weekday - today.weekday() + 7) % 7
        if days_ahead == 0:
            days_ahead = 7
        task_date = (today + timedelta(days=days_ahead)).strftime("%d.%m.%Y")
        existing_tasks = [t.get("–ó–∞–¥–∞—á–∞") for t in tasks_ws.get_all_records() if t.get("–î–∞—Ç–∞") == task_date]
        if row.get("–ó–∞–¥–∞—á–∞") and row.get("–ó–∞–¥–∞—á–∞") not in existing_tasks:
            add_task(task_date,
                     row.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", ""),
                     row.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è", ""),
                     row.get("–ó–∞–¥–∞—á–∞", ""),
                     row.get("–í—Ä–µ–º—è", ""),
                     "", "–ø–æ–≤—Ç–æ—Ä")

def send_daily_plan():
    # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –ø–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–µ
    process_repeating_tasks()
    schedule_next_repeat_tasks()

    users = get_users()
    today = datetime.now().strftime("%d.%m.%Y")
    for user in users:
        tasks = get_tasks_for_date(user["id"], today)
        if tasks:
            text = f"üìÖ –ü–ª–∞–Ω –Ω–∞ {today}:\n\n"
            for i, t in enumerate(tasks, 1):
                status = (t.get("–°—Ç–∞—Ç—É—Å") or "").lower()
                status_icon = "‚úÖ" if status == "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ" else "‚¨ú"
                cat = t.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "")
                sub = t.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è", "")
                desc = t.get("–ó–∞–¥–∞—á–∞", "")
                deadline = t.get("–î–µ–¥–ª–∞–π–Ω", "")
                text += f"{status_icon} {i}. [{cat} - {sub}] {desc} (–¥–æ {deadline})\n"
            try:
                bot.send_message(user["id"], text)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–ª–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['id']}: {e}")

def send_reminders():
    now = datetime.now()
    users = get_users()
    for user in users:
        tasks = get_tasks_for_date(user["id"], datetime.now().strftime("%d.%m.%Y"))
        for t in tasks:
            status = (t.get("–°—Ç–∞—Ç—É—Å") or "").lower()
            if status != "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ":
                try:
                    dl = t.get("–î–µ–¥–ª–∞–π–Ω") or ""
                    if not dl:
                        continue
                    deadline = datetime.strptime(dl, "%H:%M")
                    deadline_today = now.replace(hour=deadline.hour, minute=deadline.minute, second=0, microsecond=0)
                    if 0 <= (deadline_today - now).total_seconds() <= 1800:
                        bot.send_message(user["id"], f"‚ö†Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {t.get('–ó–∞–¥–∞—á–∞','')} (–¥–æ {dl})")
                except Exception:
                    # –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    continue

def send_evening_report():
    users = get_users()
    today = datetime.now().strftime("%d.%m.%Y")
    for user in users:
        tasks = get_tasks_for_date(user["id"], today)
        if tasks:
            done = [t for t in tasks if (t.get("–°—Ç–∞—Ç—É—Å") or "").lower() == "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ"]
            undone = [t for t in tasks if not (t.get("–°—Ç–∞—Ç—É—Å") or "").lower() == "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ"]
            text = f"üåô –ò—Ç–æ–≥ –∑–∞ {today}:\n\n"
            for t in done:
                text += f"‚úÖ {t.get('–ó–∞–¥–∞—á–∞','')}\n"
            for t in undone:
                text += f"üîÑ –ü–µ—Ä–µ–Ω–æ—Å: {t.get('–ó–∞–¥–∞—á–∞','')}\n"
                # –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å)
                add_task((datetime.now() + timedelta(days=1)).strftime("%d.%m.%Y"),
                         t.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", ""),
                         t.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è", ""),
                         t.get("–ó–∞–¥–∞—á–∞", ""),
                         t.get("–î–µ–¥–ª–∞–π–Ω", ""),
                         "", t.get("–ü–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å", ""))
            try:
                bot.send_message(user["id"], text)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–µ—á–µ—Ä–Ω–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['id']}: {e}")

# ====== –ö–û–ú–ê–ù–î–´ ======
@bot.message_handler(commands=['done'])
def mark_done(message):
    try:
        parts = message.text.split()
        if len(parts) < 2:
            bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /done 1")
            return
        task_num = int(parts[1]) - 1
        user_id = str(message.chat.id)
        tasks = get_tasks_for_date(user_id, datetime.now().strftime("%d.%m.%Y"))
        if 0 <= task_num < len(tasks):
            # –Ω–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é —è—á–µ–π–∫—É —Å —Ç–∞–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ ‚Äî –±–µ—Ä—ë–º –ø–µ—Ä–≤—É—é)
            task_desc = tasks[task_num].get("–ó–∞–¥–∞—á–∞")
            cell = tasks_ws.find(task_desc)
            if cell:
                # –∫–æ–ª–æ–Ω–∫–∞ –°—Ç–∞—Ç—É—Å ‚Äî 6 (—Å—á–∏—Ç–∞–µ–º: –î–∞—Ç–∞(1),–ö–∞—Ç–µ–≥–æ—Ä–∏—è(2),–ü–æ–¥–∫–∞—Ç(3),–ó–∞–¥–∞—á–∞(4),–î–µ–¥–ª–∞–π–Ω(5),–°—Ç–∞—Ç—É—Å(6))
                tasks_ws.update_cell(cell.row, 6, "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
                bot.send_message(user_id, f"‚úÖ –ó–∞–¥–∞—á–∞ '{task_desc}' –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!")
            else:
                bot.send_message(user_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–¥–∞—á—É –≤ —Ç–∞–±–ª–∏—Ü–µ.")
        else:
            bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏")
    except Exception:
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /done 1")

# ====== –§–£–ù–ö–¶–ò–ò –ó–ê–ü–£–°–ö–ê ======
def run_scheduler():
    schedule.every().day.at("09:00").do(send_daily_plan)
    schedule.every(10).minutes.do(send_reminders)
    schedule.every().day.at("19:00").do(send_evening_report)
    while True:
        schedule.run_pending()
        time.sleep(1)

def run_bot():
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ polling: {e}")
        time.sleep(5)
        # –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –≤ —Å–ª—É—á–∞–µ –ø–∞–¥–µ–Ω–∏—è
        run_bot()

# Flask –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
app = Flask(__name__)

@app.route("/")
def home():
    return "Bot is running!"

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
    scheduler_thread.start()

    # –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread = threading.Thread(target=run_bot, daemon=True)
    bot_thread.start()

    # Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
    app.run(host="0.0.0.0", port=5000)
