# tasks_bot.py
import os
import sys
import logging
import telebot
import gspread
import schedule
import time
import threading
import re
from datetime import datetime, timedelta
from flask import Flask, request
from telebot import types

# ================== –ù–ê–°–¢–†–û–ô–ö–ò (–≤—Å—Ç–∞–≤–ª–µ–Ω—ã —Ç–≤–æ–∏ –∑–Ω–∞—á–µ–Ω–∏—è) ==================
API_TOKEN = "7959600917:AAF7szpbvX8CoFObxjVb6y3aCiSceCi-Rt4"
TABLE_URL = "https://docs.google.com/spreadsheets/d/1lIV2kUx8sDHR1ynMB2di8j5n9rpj1ydhsmfjXJpRGeA/edit?usp=sharing"
CREDENTIALS_FILE = "/etc/secrets/credentials.json"   # secret file –≤ Render
WEBHOOK_HOST = "https://tasksbot-hy3t.onrender.com"   # —Ç–≤–æ–π Render URL
WEBHOOK_PATH = f"/{API_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_HOST.rstrip('/')}{WEBHOOK_PATH}"

# ================== –õ–û–ì–ò ==================
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
log = logging.getLogger(__name__)

# ================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê ==================
bot = telebot.TeleBot(API_TOKEN)

# –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
try:
    me = bot.get_me()
    log.info(f"Bot OK. @{me.username} id={me.id}")
except Exception as e:
    log.fatal(f"Telegram token invalid or network error: {e}")
    sys.exit(1)

# ================== –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö GOOGLE SHEETS ==================
try:
    gc = gspread.service_account(filename=CREDENTIALS_FILE)
    sh = gc.open_by_url(TABLE_URL)
    log.info("Connected to Google Sheets.")
except Exception as e:
    log.fatal(f"Cannot connect to Google Sheets: {e}")
    sys.exit(1)

# –õ–∏—Å—Ç—ã (–µ—Å–ª–∏ –ª–∏—Å—Ç–∞ "–õ–æ–≥–∏" –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞–¥–∏–º)
try:
    tasks_ws = sh.worksheet("–ó–∞–¥–∞—á–∏")
except Exception:
    log.fatal("Worksheet '–ó–∞–¥–∞—á–∏' not found. Create sheet with name '–ó–∞–¥–∞—á–∏' and headers.")
    sys.exit(1)

try:
    users_ws = sh.worksheet("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
except Exception:
    log.warning("Worksheet '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' not found ‚Äî commands that read users may fail.")
    users_ws = None

# –õ–∏—Å—Ç –¥–ª—è –ª–æ–≥–æ–≤ ‚Äî –µ—Å–ª–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–¥–∏–º
try:
    logs_ws = sh.worksheet("–õ–æ–≥–∏")
except Exception:
    try:
        logs_ws = sh.add_worksheet(title="–õ–æ–≥–∏", rows="1000", cols="5")
        logs_ws.append_row(["–í—Ä–µ–º—è", "–£—Ä–æ–≤–µ–Ω—å", "–°–æ–æ–±—â–µ–Ω–∏–µ"])
        log.info("Created '–õ–æ–≥–∏' worksheet.")
    except Exception as e:
        log.warning(f"Cannot create '–õ–æ–≥–∏' worksheet: {e}")
        logs_ws = None

def log_to_sheets(level, message):
    try:
        if logs_ws:
            logs_ws.append_row([datetime.now().strftime("%d.%m.%Y %H:%M:%S"), level, message])
    except Exception as e:
        log.error(f"Failed to write log to sheet: {e}")

# ================== –£–¢–ò–õ–ò–¢–´ ==================
def safe_str(x):
    return "" if x is None else str(x)

# ================== –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –¢–ê–ë–õ–ò–¶–ï–ô ==================
def get_users():
    if not users_ws:
        return []
    try:
        rows = users_ws.get_all_records()
    except Exception as e:
        log.error(f"Error reading users sheet: {e}")
        log_to_sheets("ERROR", f"Error reading users sheet: {e}")
        return []
    users = []
    for row in rows:
        tid = row.get("Telegram ID") or row.get("TelegramID") or row.get("User ID")
        if tid:
            raw = row.get("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–¥–∞—á") or ""
            cats = [c.strip() for c in raw.split(",") if c.strip()] if raw else []
            users.append({"name": row.get("–ò–º—è", ""), "id": str(tid), "categories": cats})
    return users

def get_tasks_all_rows():
    try:
        return tasks_ws.get_all_records()
    except Exception as e:
        log.error(f"Error reading tasks sheet: {e}")
        log_to_sheets("ERROR", f"Error reading tasks sheet: {e}")
        return []

def get_tasks_for_date(user_id, date_str):
    uid = str(user_id)
    rows = get_tasks_all_rows()
    return [r for r in rows if safe_str(r.get("–î–∞—Ç–∞")) == date_str and safe_str(r.get("User ID")) == uid]

def get_tasks_for_week(user_id):
    today = datetime.now()
    week_dates = [(today + timedelta(days=i)).strftime("%d.%m.%Y") for i in range(7)]
    uid = str(user_id)
    rows = get_tasks_all_rows()
    return [r for r in rows if safe_str(r.get("–î–∞—Ç–∞")) in week_dates and safe_str(r.get("User ID")) == uid]

def append_row_safe(values):
    """
    append_row –≤ –ø–æ—Ä—è–¥–∫–µ, –æ–∂–∏–¥–∞–µ–º–æ–º (–µ—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –µ—Å—Ç—å ‚Äî best-effort).
    –ï—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è ‚Äî append –ø–æ –æ–±—ã—á–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É.
    –û–∂–∏–¥–∞–µ–º—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫: –î–∞—Ç–∞,–ö–∞—Ç–µ–≥–æ—Ä–∏—è,–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è,–ó–∞–¥–∞—á–∞,–î–µ–¥–ª–∞–π–Ω,–°—Ç–∞—Ç—É—Å,–ü–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å,User ID
    """
    try:
        # –ø–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω–µ—Ü —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
        standard = [
            values.get("–î–∞—Ç–∞", ""),
            values.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", ""),
            values.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è", ""),
            values.get("–ó–∞–¥–∞—á–∞", ""),
            values.get("–î–µ–¥–ª–∞–π–Ω", ""),
            values.get("–°—Ç–∞—Ç—É—Å", ""),
            values.get("–ü–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å", ""),
            values.get("User ID", "")
        ]
        tasks_ws.append_row(standard, value_input_option="USER_ENTERED")
        return True
    except Exception as e:
        log.error(f"append_row failed: {e}")
        log_to_sheets("ERROR", f"append_row failed: {e}")
        return False

def add_task(date, category, subcategory, task, deadline, user_id, status="", repeat=""):
    values = {
        "–î–∞—Ç–∞": date,
        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": category,
        "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è": subcategory,
        "–ó–∞–¥–∞—á–∞": task,
        "–î–µ–¥–ª–∞–π–Ω": deadline,
        "–°—Ç–∞—Ç—É—Å": status,
        "–ü–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å": repeat,
        "User ID": str(user_id)
    }
    ok = append_row_safe(values)
    if ok:
        log.info(f"Added task for {user_id}: {task} @ {date} {deadline}")
        log_to_sheets("INFO", f"Added task for {user_id}: {task} @ {date} {deadline}")
    else:
        log.error("Failed to add task (see logs)")

# ================== –ö–ù–û–ü–ö–ò / –ú–ï–ù–Æ ==================
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üìÖ –°–µ–≥–æ–¥–Ω—è", "üìÜ –ù–µ–¥–µ–ª—è", "üóì –í—Å—è –Ω–µ–¥–µ–ª—è", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
    return markup

def week_days_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    today = datetime.now()
    days_map = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫","–í—Ç–æ—Ä–Ω–∏–∫","–°—Ä–µ–¥–∞","–ß–µ—Ç–≤–µ—Ä–≥","–ü—è—Ç–Ω–∏—Ü–∞","–°—É–±–±–æ—Ç–∞","–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    for i in range(7):
        d = today + timedelta(days=i)
        btn = f"{days_map[d.weekday()]} ({d.strftime('%d.%m.%Y')})"
        markup.add(btn)
    markup.add("‚¨Ö –ù–∞–∑–∞–¥")
    return markup

# ================== –î–û–ë–ê–í–õ–ï–ù–ò–ï –ó–ê–î–ê–ß (–ü–æ—à–∞–≥–æ–≤–æ) ==================
user_steps = {}     # chat_id -> state
temp_task_data = {} # chat_id -> dict
cleanup_timers = {} # chat_id -> threading.Timer
CLEANUP_TIMEOUT = 5 * 60  # 5 minutes

date_re = re.compile(r"^\d{2}\.\d{2}\.\d{4}$")
time_re = re.compile(r"^\d{2}:\d{2}$")

def schedule_cleanup(chat_id):
    # cancel old
    t_prev = cleanup_timers.get(chat_id)
    if t_prev:
        try:
            t_prev.cancel()
        except:
            pass
    t = threading.Timer(CLEANUP_TIMEOUT, force_cleanup, args=(chat_id,))
    t.daemon = True
    cleanup_timers[chat_id] = t
    t.start()

def force_cleanup(chat_id):
    user_steps.pop(chat_id, None)
    temp_task_data.pop(chat_id, None)
    cleanup_timers.pop(chat_id, None)
    try:
        bot.send_message(chat_id, "‚è≥ –í–≤–æ–¥ –ø—Ä–µ—Ä–≤–∞–Ω (—Ç–∞–π–º–∞—É—Ç 5 –º–∏–Ω—É—Ç). –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.", reply_markup=main_menu())
    except Exception:
        pass
    log.info(f"Cleaned temp state for {chat_id} due to timeout")
    log_to_sheets("INFO", f"Cleaned temp state for {chat_id} due to timeout")

@bot.message_handler(func=lambda m: (m.text or "") == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
def add_task_start(message):
    chat_id = message.chat.id
    user_steps[chat_id] = "date"
    temp_task_data[chat_id] = {}
    schedule_cleanup(chat_id)
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.MM.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä 13.08.2025):")

@bot.message_handler(func=lambda m: user_steps.get(getattr(m, "chat", {}).id) == "date" if getattr(m, "chat", None) else False)
def add_date(message):
    chat_id = message.chat.id
    txt = (message.text or "").strip()
    if not date_re.match(txt):
        bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –í–≤–µ–¥–∏—Ç–µ –î–î.MM.–ì–ì–ì–ì:")
        schedule_cleanup(chat_id)
        return
    try:
        datetime.strptime(txt, "%d.%m.%Y")
    except ValueError:
        bot.send_message(chat_id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        schedule_cleanup(chat_id)
        return
    temp_task_data[chat_id]["date"] = txt
    user_steps[chat_id] = "category"
    schedule_cleanup(chat_id)
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –¢–∞–±–∞—á–∫–∞ / –ö–æ—Ñ–µ–π–Ω—è / –õ–∏—á–Ω–æ–µ):")

@bot.message_handler(func=lambda m: user_steps.get(getattr(m, "chat", {}).id) == "category" if getattr(m, "chat", None) else False)
def add_category(message):
    chat_id = message.chat.id
    temp_task_data[chat_id]["category"] = (message.text or "").strip()
    user_steps[chat_id] = "subcategory"
    schedule_cleanup(chat_id)
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –¶–µ–Ω—Ç—Ä / –ü–æ–ª–µ—Ç / –ó–∞–∫–∞–∑—ã):")

@bot.message_handler(func=lambda m: user_steps.get(getattr(m, "chat", {}).id) == "subcategory" if getattr(m, "chat", None) else False)
def add_subcategory(message):
    chat_id = message.chat.id
    temp_task_data[chat_id]["subcategory"] = (message.text or "").strip()
    user_steps[chat_id] = "task"
    schedule_cleanup(chat_id)
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")

@bot.message_handler(func=lambda m: user_steps.get(getattr(m, "chat", {}).id) == "task" if getattr(m, "chat", None) else False)
def add_task_desc(message):
    chat_id = message.chat.id
    temp_task_data[chat_id]["task"] = (message.text or "").strip()
    user_steps[chat_id] = "deadline"
    schedule_cleanup(chat_id)
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú –∏–ª–∏ '-' –µ—Å–ª–∏ –¥–µ–¥–ª–∞–π–Ω–∞ –Ω–µ—Ç:")

@bot.message_handler(func=lambda m: user_steps.get(getattr(m, "chat", {}).id) == "deadline" if getattr(m, "chat", None) else False)
def add_task_deadline(message):
    chat_id = message.chat.id
    txt = (message.text or "").strip()
    if txt != "-" and not time_re.match(txt):
        bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –í–≤–µ–¥–∏—Ç–µ –ß–ß:–ú–ú –∏–ª–∏ '-' –µ—Å–ª–∏ –¥–µ–¥–ª–∞–π–Ω–∞ –Ω–µ—Ç:")
        schedule_cleanup(chat_id)
        return
    if txt != "-":
        try:
            datetime.strptime(txt, "%H:%M")
            deadline = txt
        except ValueError:
            bot.send_message(chat_id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
            schedule_cleanup(chat_id)
            return
    else:
        deadline = ""

    data = temp_task_data.get(chat_id, {})
    add_task(
        date=data.get("date", datetime.now().strftime("%d.%m.%Y")),
        category=data.get("category", ""),
        subcategory=data.get("subcategory", ""),
        task=data.get("task", ""),
        deadline=deadline,
        user_id=chat_id,
        status="",
        repeat=""
    )

    # cleanup
    user_steps.pop(chat_id, None)
    temp_task_data.pop(chat_id, None)
    timer = cleanup_timers.pop(chat_id, None)
    if timer:
        try:
            timer.cancel()
        except:
            pass

    bot.send_message(chat_id, "‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=main_menu())

# /cancel
@bot.message_handler(commands=["cancel"])
def cancel_cmd(message):
    chat_id = message.chat.id
    user_steps.pop(chat_id, None)
    temp_task_data.pop(chat_id, None)
    timer = cleanup_timers.pop(chat_id, None)
    if timer:
        try:
            timer.cancel()
        except:
            pass
    bot.send_message(chat_id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu())

# ================== –ö–û–ú–ê–ù–î–´ –î–õ–Ø –í–´–í–û–î–ê –ó–ê–î–ê–ß ==================
@bot.message_handler(commands=["start"])
def start_cmd(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–í–∞—à Telegram ID: `{chat_id}`", parse_mode="Markdown", reply_markup=main_menu())

@bot.message_handler(func=lambda m: (m.text or "") == "üìÖ –°–µ–≥–æ–¥–Ω—è")
def today_cmd(message):
    chat_id = message.chat.id
    today = datetime.now().strftime("%d.%m.%Y")
    try:
        tasks = get_tasks_for_date(chat_id, today)
    except Exception as e:
        log.error(f"Error getting tasks: {e}")
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∑–∞–¥–∞—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    if tasks:
        text = f"üìÖ –ó–∞–¥–∞—á–∏ –Ω–∞ {today}:\n\n"
        for i, t in enumerate(tasks, 1):
            text += f"{i}. {safe_str(t.get('–ó–∞–¥–∞—á–∞'))} (–¥–æ {safe_str(t.get('–î–µ–¥–ª–∞–π–Ω'))})\n"
        bot.send_message(chat_id, text)
    else:
        bot.send_message(chat_id, "–°–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞—á –Ω–µ—Ç.", reply_markup=main_menu())

@bot.message_handler(func=lambda m: (m.text or "") == "üìÜ –ù–µ–¥–µ–ª—è")
def week_menu_cmd(message):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=week_days_menu())

@bot.message_handler(func=lambda m: (m.text or "") == "üóì –í—Å—è –Ω–µ–¥–µ–ª—è")
def all_week_cmd(message):
    chat_id = message.chat.id
    try:
        tasks = get_tasks_for_week(chat_id)
    except Exception as e:
        log.error(f"Error getting week tasks: {e}")
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∑–∞–¥–∞—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    if tasks:
        text = "üóì –ó–∞–¥–∞—á–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é:\n\n"
        for t in tasks:
            text += f"{safe_str(t.get('–î–∞—Ç–∞'))}: {safe_str(t.get('–ó–∞–¥–∞—á–∞'))} (–¥–æ {safe_str(t.get('–î–µ–¥–ª–∞–π–Ω'))})\n"
        bot.send_message(chat_id, text)
    else:
        bot.send_message(chat_id, "–ù–∞ –Ω–µ–¥–µ–ª—é –∑–∞–¥–∞—á –Ω–µ—Ç.", reply_markup=main_menu())

@bot.message_handler(func=lambda m: "(" in (m.text or "") and ")" in (m.text or ""))
def day_button_cmd(message):
    chat_id = message.chat.id
    try:
        date_str = message.text.split("(")[1].split(")")[0].strip()
    except Exception:
        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–∫–∏.", reply_markup=main_menu())
        return
    tasks = get_tasks_for_date(chat_id, date_str)
    if tasks:
        text = f"üìÖ –ó–∞–¥–∞—á–∏ –Ω–∞ {date_str}:\n\n"
        for i, t in enumerate(tasks, 1):
            text += f"{i}. {safe_str(t.get('–ó–∞–¥–∞—á–∞'))} (–¥–æ {safe_str(t.get('–î–µ–¥–ª–∞–π–Ω'))})\n"
        bot.send_message(chat_id, text)
    else:
        bot.send_message(chat_id, "–í —ç—Ç–æ—Ç –¥–µ–Ω—å –∑–∞–¥–∞—á –Ω–µ—Ç.", reply_markup=main_menu())

@bot.message_handler(func=lambda m: (m.text or "") == "‚¨Ö –ù–∞–∑–∞–¥")
def back_cmd(message):
    bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

# ================== –ü–õ–ê–ù–ò–†–û–í–©–ò–ö ==================
def send_daily_plan():
    today = datetime.now().strftime("%d.%m.%Y")
    users = get_users()
    for u in users:
        try:
            tasks = get_tasks_for_date(u["id"], today)
            if tasks:
                text = f"üìÖ –ü–ª–∞–Ω –Ω–∞ {today}:\n\n"
                for i, t in enumerate(tasks, 1):
                    text += f"{i}. {safe_str(t.get('–ó–∞–¥–∞—á–∞'))} (–¥–æ {safe_str(t.get('–î–µ–¥–ª–∞–π–Ω'))})\n"
                bot.send_message(int(u["id"]), text)
        except Exception as e:
            log.warning(f"Failed to send daily plan to {u.get('id')}: {e}")
            log_to_sheets("WARN", f"Failed to send daily plan to {u.get('id')}: {e}")

def run_scheduler():
    schedule.every().day.at("09:00").do(send_daily_plan)
    while True:
        schedule.run_pending()
        time.sleep(1)

# ================== FLASK / WEBHOOK ==================
app = Flask(__name__)

@app.route(WEBHOOK_PATH, methods=["POST"])
def webhook_receiver():
    try:
        json_str = request.get_data().decode("utf-8")
        update = telebot.types.Update.de_json(json_str)
        bot.process_new_updates([update])
    except Exception as e:
        log.error(f"Error processing webhook update: {e}")
        log_to_sheets("ERROR", f"Error processing webhook update: {e}")
        return "ERROR", 400
    return "OK", 200

@app.route("/", methods=["GET"])
def home():
    return "Bot is running (webhook).", 200

# ================== –°–¢–ê–†–¢ ==================
if __name__ == "__main__":
    try:
        bot.remove_webhook()
        log.info("Old webhook removed (if any).")
    except Exception as e:
        log.warning(f"remove_webhook() warning: {e}")

    try:
        bot.set_webhook(url=WEBHOOK_URL)
        log.info(f"Webhook set to {WEBHOOK_URL}")
    except Exception as e:
        log.fatal(f"Failed to set webhook: {e}")
        log_to_sheets("FATAL", f"Failed to set webhook: {e}")
        # –Ω–µ –≤—ã—Ö–æ–¥–∏–º, –Ω–æ webhook –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –ø–æ—Å–º–æ—Ç—Ä–∏ –ª–æ–≥–∏

    # —Å—Ç–∞—Ä—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    t = threading.Thread(target=run_scheduler, daemon=True)
    t.start()

    # –∑–∞–ø—É—Å–∫ Flask (Render uses $PORT or default 5000)
    port = int(os.getenv("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
