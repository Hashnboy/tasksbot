import os
import re
import json
import time
import pytz
import queue
import gspread
import logging
import schedule
import threading
from datetime import datetime, timedelta
from flask import Flask, request
from telebot import TeleBot, types

# ========= –ù–ê–°–¢–†–û–ô–ö–ò –ò –û–ö–†–£–ñ–ï–ù–ò–ï =========
# –í—Å–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–µ—Ä–µ–º –∏–∑ ENV
API_TOKEN       = os.getenv("TELEGRAM_TOKEN")              # —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TABLE_URL       = os.getenv("GOOGLE_SHEETS_URL")           # URL —Ç–∞–±–ª–∏—Ü—ã
CREDENTIALS_FILE= os.getenv("GOOGLE_CREDENTIALS_JSON", "/etc/secrets/credentials.json")
WEBHOOK_BASE    = os.getenv("WEBHOOK_BASE")                 # –Ω–∞–ø—Ä–∏–º–µ—Ä: https://tasksbot-hy3t.onrender.com
OPENAI_API_KEY  = os.getenv("OPENAI_API_KEY")               # –∫–ª—é—á OpenAI

# –ü—Ä–æ–≤–µ—Ä–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–º—è–≥–∫–∏–µ: –ª–æ–≥–∏—Ä—É–µ–º, –Ω–æ –Ω–µ –ø–∞–¥–∞–µ–º)
missing_env = []
for var in ["TELEGRAM_TOKEN", "GOOGLE_SHEETS_URL", "WEBHOOK_BASE"]:
    if not os.getenv(var):
        missing_env.append(var)
if missing_env:
    print(f"[WARN] –ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_env)}")

WEBHOOK_URL = f"{WEBHOOK_BASE}/{API_TOKEN}" if API_TOKEN and WEBHOOK_BASE else None

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–ø–æ–¥—Å—Ç—Ä–æ–∏ –ø–æ–¥ —Å–µ–±—è)
LOCAL_TZ = pytz.timezone(os.getenv("TZ", "Europe/Moscow"))

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–≤ stdout –¥–ª—è Render)
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
log = logging.getLogger("tasksbot")

# ========= –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê / SHEETS =========
bot = TeleBot(API_TOKEN, parse_mode="HTML")

gc = gspread.service_account(filename=CREDENTIALS_FILE)
sh = gc.open_by_url(TABLE_URL)

# –û–∂–∏–¥–∞–µ–º, —á—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å –ª–∏—Å—Ç—ã:
# "–í—Å–µ –∑–∞–¥–∞—á–∏", "–ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–∞–¥–∞—á–∏", "–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏", "–°–ª–æ–≤–∞—Ä—å –¢–¢", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "–õ–æ–≥–∏"
ws_tasks       = sh.worksheet("–í—Å–µ –∑–∞–¥–∞—á–∏")
ws_repeating   = sh.worksheet("–ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–∞–¥–∞—á–∏")
ws_suppliers   = sh.worksheet("–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏")
ws_tt_dict     = sh.worksheet("–°–ª–æ–≤–∞—Ä—å –¢–¢")
ws_users       = sh.worksheet("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
ws_logs        = sh.worksheet("–õ–æ–≥–∏")

# –ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è "–í—Å–µ –∑–∞–¥–∞—á–∏"
# –î–∞—Ç–∞ | –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ | –ö–∞—Ç–µ–≥–æ—Ä–∏—è | –¢–¢ | –ó–∞–¥–∞—á–∞ | –î–µ–¥–ª–∞–π–Ω | –°—Ç–∞—Ç—É—Å | –¢–∏–ø | –ü–æ–≤—Ç–æ—Ä ID | User ID | –ú–µ—Ç–∫–∏
TASKS_HEADERS = ["–î–∞—Ç–∞","–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ","–ö–∞—Ç–µ–≥–æ—Ä–∏—è","–¢–¢","–ó–∞–¥–∞—á–∞","–î–µ–¥–ª–∞–π–Ω","–°—Ç–∞—Ç—É—Å","–¢–∏–ø","–ü–æ–≤—Ç–æ—Ä ID","User ID","–ú–µ—Ç–∫–∏"]

# –ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è "–ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–∞–¥–∞—á–∏"
# –ü—Ä–∞–≤–∏–ª–æ | –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ | –ö–∞—Ç–µ–≥–æ—Ä–∏—è | –¢–¢ | –ó–∞–¥–∞—á–∞ | –í—Ä–µ–º—è | –ü–æ—Å—Ç–∞–≤—â–∏–∫ | User ID | –ê–∫—Ç–∏–≤–Ω–∞
REPEAT_HEADERS = ["–ü—Ä–∞–≤–∏–ª–æ","–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ","–ö–∞—Ç–µ–≥–æ—Ä–∏—è","–¢–¢","–ó–∞–¥–∞—á–∞","–í—Ä–µ–º—è","–ü–æ—Å—Ç–∞–≤—â–∏–∫","User ID","–ê–∫—Ç–∏–≤–Ω–∞"]

# ========= –£–¢–ò–õ–ò–¢–´ =========
def now_local():
    return datetime.now(LOCAL_TZ)

def today_str():
    return now_local().strftime("%d.%m.%Y")

def weekday_ru(dt: datetime) -> str:
    mapping = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫","–í—Ç–æ—Ä–Ω–∏–∫","–°—Ä–µ–¥–∞","–ß–µ—Ç–≤–µ—Ä–≥","–ü—è—Ç–Ω–∏—Ü–∞","–°—É–±–±–æ—Ç–∞","–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    return mapping[dt.weekday()]

def log_event(user_id, action, payload=""):
    try:
        ws_logs.append_row([datetime.utcnow().isoformat(), str(user_id), action, payload], value_input_option="USER_ENTERED")
    except Exception as e:
        log.error(f"–õ–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")

def read_all(ws):
    rows = ws.get_all_records()
    return rows

def ensure_headers(ws, expected_headers):
    try:
        headers = ws.row_values(1)
        if headers != expected_headers:
            log.warning(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏ –ª–∏—Å—Ç–∞ {ws.title} –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º–∏.\n–û–∂–∏–¥–∞–ª–∏—Å—å: {expected_headers}\n–§–∞–∫—Ç–∏—á–µ—Å–∫–∏: {headers}")
    except Exception as e:
        log.error(f"–ù–µ —Å–º–æ–≥–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ {ws.title}: {e}")

ensure_headers(ws_tasks, TASKS_HEADERS)
ensure_headers(ws_repeating, REPEAT_HEADERS)

# –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è/–¢–¢ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
def load_tt():
    tt_rows = read_all(ws_tt_dict)
    # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç—Ä–æ–∫ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ | –¢–¢
    tt_map = {}
    for r in tt_rows:
        direction = (r.get("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ") or "").strip()
        tt = (r.get("–¢–¢") or "").strip()
        if direction and tt:
            tt_map.setdefault(direction.lower(), set()).add(tt)
    return tt_map

TT_MAP = load_tt()

def direction_for_supplier(supplier_name: str) -> str:
    """–ò—â–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ –ª–∏—Å—Ç–µ –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏."""
    name = (supplier_name or "").strip().lower()
    for r in read_all(ws_suppliers):
        if (r.get("–ü–æ—Å—Ç–∞–≤—â–∏–∫") or "").strip().lower() == name:
            return (r.get("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ") or "").strip()
    return ""

# ========= –ü–†–ê–í–ò–õ–ê –ü–û–°–¢–ê–í–©–ò–ö–û–í =========
# –ö-–≠–∫—Å–ø—Ä–æ: –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è "–∫–∞—á–µ–ª—å": —Å–µ–≥–æ–¥–Ω—è –∑–∞–∫–∞–∑ ‚Üí –∑–∞–≤—Ç—Ä–∞ –ø–æ—Å—Ç–∞–≤–∫–∞ ‚Üí –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ —Å–Ω–æ–≤–∞ –∑–∞–∫–∞–∑ (–∫–∞–∂–¥—ã–µ 2 –¥–Ω—è)
# –ò–ü –í—ã–ª–µ–≥–∂–∞–Ω–∏–Ω–∞ (–ö—É—Ö–Ω—è): –∑–∞–∫–∞–∑ —Å–µ–≥–æ–¥–Ω—è ‚Üí –ø–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–≤—Ç—Ä–∞ ‚Üí —Å—Ä–æ–∫ 72—á ‚Üí –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ 2 –¥–Ω—è –ø–æ—Å–ª–µ –ø–æ—Å—Ç–∞–≤–∫–∏
SUPPLIER_RULES = {
    "–∫-—ç–∫—Å–ø—Ä–æ": {
        "kind": "cycle_every_n_days",
        "order_every_days": 2,      # –∫–∞–∂–¥—ã–µ 2 –¥–Ω—è —Å—Ç–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑
        "delivery_offset_days": 1,  # –ø–æ—Å—Ç–∞–≤–∫–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –ø–æ—Å–ª–µ –∑–∞–∫–∞–∑–∞
        "order_deadline": "14:00",  # –¥–µ–¥–ª–∞–π–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        "emoji": "üì¶"
    },
    "–∏–ø –≤—ã–ª–µ–≥–∂–∞–Ω–∏–Ω–∞": {
        "kind": "delivery_shelf_then_order",
        "delivery_offset_days": 1,   # –ø–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–≤—Ç—Ä–∞
        "shelf_hours": 72,           # —Ö—Ä–∞–Ω–µ–Ω–∏–µ 72—á
        "order_deadline": "14:00",
        "emoji": "ü•ò"
    }
}

def normalize_supplier(name: str) -> str:
    s = (name or "").strip().lower()
    # —á–∞—Å—Ç—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    s = s.replace("–∫-—ç–∫—Å–ø—Ä–æ","–∫-—ç–∫—Å–ø—Ä–æ").replace("k-exp", "–∫-—ç–∫—Å–ø—Ä–æ")
    s = s.replace("–∏–ø –≤—ã–ª–µ–≥–∂–∞–Ω–∏–Ω–∞","–∏–ø –≤—ã–ª–µ–≥–∂–∞–Ω–∏–Ω–∞")
    return s

# ========= –î–û–ë–ê–í–õ–ï–ù–ò–ï –ó–ê–î–ê–ß =========
def add_task_row(date_str, direction, category, tt, text, deadline, status, ttype, repeat_id, user_id, tags=""):
    row = [date_str, direction, category, tt, text, deadline, status, ttype, repeat_id, str(user_id), tags]
    ws_tasks.append_row(row, value_input_option="USER_ENTERED")

def mark_done_by_index(user_id, date_str, index_1based):
    rows = ws_tasks.get_all_records()
    same_day = [r for r in rows if (r.get("User ID") and str(r.get("User ID")) == str(user_id)) and (r.get("–î–∞—Ç–∞") == date_str)]
    if 1 <= index_1based <= len(same_day):
        target = same_day[index_1based-1]
        # –ù–∞–π–¥–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –Ω–∞–±–æ—Ä—É: –¥–∞—Ç–∞+—Ç–µ–∫—Å—Ç+user (–Ω–∞–¥–µ–∂–Ω–µ–π ‚Äî find, –Ω–æ –æ–∫)
        cell = ws_tasks.find(target["–ó–∞–¥–∞—á–∞"])
        if cell:
            ws_tasks.update_cell(cell.row, TASKS_HEADERS.index("–°—Ç–∞—Ç—É—Å")+1, "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
            return target
    return None

def mark_done_by_text(user_id, supplier=None, tt=None, match_all=False):
    """–ü–æ–º–µ—á–∞–µ—Ç –∑–∞–¥–∞—á–∏ —Å–µ–≥–æ–¥–Ω—è –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –≤–≤–æ–¥—É, –Ω–∞–ø—Ä–∏–º–µ—Ä:
       '—è —Å–¥–µ–ª–∞–ª –∑–∞–∫–∞–∑—ã –∫-—ç–∫—Å–ø—Ä–æ —Ü–µ–Ω—Ç—Ä', '—è —Å–¥–µ–ª–∞–ª –≤—Å–µ –∑–∞–∫–∞–∑—ã –∫-—ç–∫—Å–ø—Ä–æ'
    """
    supplier_key = normalize_supplier(supplier or "")
    today = today_str()
    rows = ws_tasks.get_all_records()
    changed = []

    for r in rows:
        if str(r.get("User ID")) != str(user_id):
            continue
        if r.get("–î–∞—Ç–∞") != today:
            continue
        text = (r.get("–ó–∞–¥–∞—á–∞") or "").lower()
        tt_row = (r.get("–¢–¢") or "").strip().lower()
        if supplier_key and supplier_key not in text:
            continue
        if tt and (tt_row != tt.strip().lower()):
            continue
        if r.get("–°—Ç–∞—Ç—É—Å","").lower() == "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ":
            continue
        # –∞–ø–¥–µ–π—Ç–∏–º —Å—Ç–∞—Ç—É—Å
        cell = ws_tasks.find(r["–ó–∞–¥–∞—á–∞"])
        if cell:
            ws_tasks.update_cell(cell.row, TASKS_HEADERS.index("–°—Ç–∞—Ç—É—Å")+1, "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
            changed.append(r)
            if not match_all:
                break

    return changed

# ========= –ì–ï–ù–ï–†–ê–¶–ò–Ø –ü–û –ü–†–ê–í–ò–õ–ê–ú –ü–û–°–¢–ê–í–©–ò–ö–û–í =========
def plan_next_by_supplier_rule(user_id, supplier_name, direction, tt_list):
    key = normalize_supplier(supplier_name)
    rule = SUPPLIER_RULES.get(key)
    if not rule:
        return []

    created = []
    today = now_local().date()
    today_s = today.strftime("%d.%m.%Y")

    if rule["kind"] == "cycle_every_n_days":
        # –°–µ–≥–æ–¥–Ω—è –∑–∞–∫–∞–∑ (—É–∂–µ –æ—Ç–º–µ—á–µ–Ω done) ‚Üí —Å—Ç–∞–≤–∏–º –ø—Ä–∏–µ–º–∫—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞, –∏ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ 2 –¥–Ω—è
        delivery_day = today + timedelta(days=rule["delivery_offset_days"])
        new_order_day = today + timedelta(days=rule["order_every_days"])
        for tt in tt_list:
            # –ø—Ä–∏–µ–º–∫–∞
            add_task_row(delivery_day.strftime("%d.%m.%Y"), direction, "–ü–æ—Å—Ç–∞–≤–∫–∞", tt,
                         f"{rule['emoji']} –ü—Ä–∏–µ–º–∫–∞ {supplier_name} ({tt})", "10:00", "", "—Ä–∞–∑–æ–≤–∞—è", "", user_id, "–ø—Ä–∏–µ–º–∫–∞")
            # –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
            add_task_row(new_order_day.strftime("%d.%m.%Y"), direction, "–ó–∞–∫—É–ø–∫–∞", tt,
                         f"{rule['emoji']} –ó–∞–∫–∞–∑ {supplier_name} ({tt})", rule["order_deadline"], "", "—Ä–∞–∑–æ–≤–∞—è", "", user_id, "–∞–≤—Ç–æ")
            created.append((tt, delivery_day, new_order_day))

    elif rule["kind"] == "delivery_shelf_then_order":
        # –°–µ–≥–æ–¥–Ω—è –∑–∞–∫–∞–∑ (done) ‚Üí –∑–∞–≤—Ç—Ä–∞ –ø—Ä–∏–µ–º–∫–∞ ‚Üí —á–µ—Ä–µ–∑ 2 –¥–Ω—è –ø–æ—Å–ª–µ –ø—Ä–∏–µ–º–∫–∏ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
        delivery_day = today + timedelta(days=rule["delivery_offset_days"])
        next_order_day = delivery_day + timedelta(days=2)  # 48—á –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∞–≤–∫–∏ (–∏–∑ 72—á –ª–æ–≥–∏–∫–∞: –∑–∞–∫–∞–∑ –∑–∞ –¥–µ–Ω—å –¥–æ –∫–æ–Ω—Ü–∞)
        for tt in tt_list:
            add_task_row(delivery_day.strftime("%d.%m.%Y"), direction, "–ü–æ—Å—Ç–∞–≤–∫–∞", tt,
                         f"{rule['emoji']} –ü—Ä–∏–µ–º–∫–∞ {supplier_name} ({tt})", "11:00", "", "—Ä–∞–∑–æ–≤–∞—è", "", user_id, "–ø—Ä–∏–µ–º–∫–∞")
            add_task_row(next_order_day.strftime("%d.%m.%Y"), direction, "–ó–∞–∫—É–ø–∫–∞", tt,
                         f"{rule['emoji']} –ó–∞–∫–∞–∑ {supplier_name} ({tt})", rule["order_deadline"], "", "—Ä–∞–∑–æ–≤–∞—è", "", user_id, "–∞–≤—Ç–æ")
            created.append((tt, delivery_day, next_order_day))
    return created

# ========= GPT –ü–ê–†–°–ò–ù–ì –í–í–û–î–ê =========
def ai_parse_free_text(text, fallback_user_id):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á (–æ–±—ã—á–Ω—ã—Ö –∏/–∏–ª–∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è) –≤ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ:
    {
      "kind": "single" | "repeat",
      "date": "–î–î.–ú–ú.–ì–ì–ì–ì" (–¥–ª—è single) –∏–ª–∏ null,
      "time": "–ß–ß:–ú–ú" | "",
      "direction": "–ö–æ—Ñ–µ–π–Ω—è" | "–¢–∞–±–∞—á–∫–∞" | "WB" | "–õ–∏—á–Ω–æ–µ",
      "category": "–ó–∞–∫—É–ø–∫–∞" | "–ü–æ—Å—Ç–∞–≤–∫–∞" | "...",
      "tt": "–¶–µ–Ω—Ç—Ä" | "–ü–æ–ª–µ—Ç" | "–ö–ª–∏–º–æ–≤–æ" | "" (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ ',' –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¢–¢),
      "text": "–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏",
      "repeat_rule": "–∫–∞–∂–¥—ã–µ 2 –¥–Ω—è / –∫–∞–∂–¥—ã–π –≤—Ç–æ—Ä–Ω–∏–∫ 12:00 / –ø–æ –ø–Ω,—Å—Ä" (–¥–ª—è repeat),
      "supplier": "–ö-–≠–∫—Å–ø—Ä–æ" | "–ò–ü –í—ã–ª–µ–≥–∂–∞–Ω–∏–Ω–∞" | "",
      "user_id": fallback_user_id
    }
    """
    items = []

    # 1) –ü–æ–ø—Ä–æ–±—É–µ–º OpenAI (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    used_ai = False
    if OPENAI_API_KEY:
        try:
            from openai import OpenAI
            client = OpenAI(api_key=OPENAI_API_KEY)
            sys = (
                "–¢—ã –ø–∞—Ä—Å–µ—Ä –∑–∞–¥–∞—á. –í–µ—Ä–Ω–∏ JSON-–º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ (–±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –≤–Ω–µ JSON). "
                "–ö–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç —Å–æ —Å—Ö–µ–º–æ–π: "
                "{kind, date, time, direction, category, tt, text, repeat_rule, supplier}. "
                "kind: 'single' –∏–ª–∏ 'repeat'. date = '–î–î.–ú–ú.–ì–ì–ì–ì' –¥–ª—è single, –∏–Ω–∞—á–µ ''. "
                "time = '–ß–ß:–ú–ú' –∏–ª–∏ ''. direction –∏–∑ {–ö–æ—Ñ–µ–π–Ω—è, –¢–∞–±–∞—á–∫–∞, WB, –õ–∏—á–Ω–æ–µ}. "
                "tt –∏–∑ {–¶–µ–Ω—Ç—Ä, –ü–æ–ª–µ—Ç, –ö–ª–∏–º–æ–≤–æ, ''}. supplier —É–∫–∞–∂–∏ –µ—Å–ª–∏ —É–∑–Ω–∞–µ—à—å. "
                "repeat_rule –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä '–∫–∞–∂–¥—ã–µ 2 –¥–Ω—è 14:00' –∏–ª–∏ '–∫–∞–∂–¥—ã–π –≤—Ç–æ—Ä–Ω–∏–∫ 12:00'). "
                "–ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –æ–±–µ —Ç–æ—á–∫–∏, —Å–¥–µ–ª–∞–π 2 –æ–±—ä–µ–∫—Ç–∞: –¥–ª—è –¶–µ–Ω—Ç—Ä –∏ –¥–ª—è –ü–æ–ª–µ—Ç. "
                "–ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—Ä–æ –ö-–≠–∫—Å–ø—Ä–æ –∏–ª–∏ –ò–ü –í—ã–ª–µ–≥–∂–∞–Ω–∏–Ω–∞, –ø—Ä–æ—Å—Ç–∞–≤—å supplier –∏ category='–ó–∞–∫—É–ø–∫–∞'. "
                "–ï—Å–ª–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—è—Å–Ω–æ –¥–∞—Ç–∞/–≤—Ä–µ–º—è ‚Äî —Å—Ç–∞–≤—å –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏."
            )
            prompt = f"–¢–µ–∫—Å—Ç: {text}"
            resp = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role":"system", "content": sys},
                    {"role":"user", "content": prompt}
                ],
                temperature=0.2
            )
            raw = resp.choices[0].message.content.strip()
            # –û–∂–∏–¥–∞–µ–º —á–∏—Å—Ç—ã–π JSON –º–∞—Å—Å–∏–≤
            parsed = json.loads(raw)
            if isinstance(parsed, dict):
                parsed = [parsed]
            if isinstance(parsed, list):
                for it in parsed:
                    it["user_id"] = fallback_user_id
                items = parsed
                used_ai = True
        except Exception as e:
            log.error(f"AI parse failed: {e}")

    # 2) –§–æ–ª–ª–±–µ–∫-–ø—Ä–æ—Å—Ç–æ–π —Ä–∞–∑–±–æ—Ä, –µ—Å–ª–∏ AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω/–æ—à–∏–±—Å—è
    if not used_ai:
        # –ü—Ä–æ—Å—Ç—ã–µ —ç–≤—Ä–∏—Å—Ç–∏–∫–∏:
        text_l = text.lower()
        direction = "–ö–æ—Ñ–µ–π–Ω—è" if any(w in text_l for w in ["–∫–æ—Ñ–µ–π", "–∫-—ç–∫—Å–ø—Ä–æ", "–≤—ã–ª–µ–≥–∂–∞–Ω–∏–Ω"]) else ("–¢–∞–±–∞—á–∫–∞" if "—Ç–∞–±–∞—á" in text_l else "–õ–∏—á–Ω–æ–µ")
        supplier = ""
        if "–∫-—ç–∫—Å–ø—Ä–æ" in text_l or "k-exp" in text_l:
            supplier = "–ö-–≠–∫—Å–ø—Ä–æ"
        if "–≤—ã–ª–µ–≥–∂–∞–Ω" in text_l:
            supplier = "–ò–ü –í—ã–ª–µ–≥–∂–∞–Ω–∏–Ω–∞"

        # –¢–¢
        tts = []
        if "—Ü–µ–Ω—Ç—Ä" in text_l: tts.append("–¶–µ–Ω—Ç—Ä")
        if "–ø–æ–ª–µ—Ç" in text_l or "–ø–æ–ª—ë—Ç" in text_l: tts.append("–ü–æ–ª–µ—Ç")
        if "–∫–ª–∏–º–æ–≤" in text_l: tts.append("–ö–ª–∏–º–æ–≤–æ")
        if not tts and direction in ("–ö–æ—Ñ–µ–π–Ω—è","–¢–∞–±–∞—á–∫–∞"):
            tts = ["–¶–µ–Ω—Ç—Ä"]

        # –≤—Ä–µ–º—è
        m = re.search(r"(\d{1,2}:\d{2})", text)
        time_s = m.group(1) if m else ""

        # –ø–æ–≤—Ç–æ—Ä
        repeat_rule = ""
        if "–∫–∞–∂–¥—ã–µ 2 –¥–Ω—è" in text_l or "–∫–∞–∂–¥—ã–π –≤—Ç–æ—Ä–æ–π –¥–µ–Ω—å" in text_l:
            repeat_rule = f"–∫–∞–∂–¥—ã–µ 2 –¥–Ω—è {time_s}".strip()

        # –¥–∞—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞/–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è)
        date_s = ""
        if "—Å–µ–≥–æ–¥–Ω—è" in text_l:
            date_s = now_local().strftime("%d.%m.%Y")
        elif "–∑–∞–≤—Ç—Ä–∞" in text_l:
            date_s = (now_local()+timedelta(days=1)).strftime("%d.%m.%Y")
        else:
            m = re.search(r"(\d{2}\.\d{2}\.\d{4})", text)
            if m: date_s = m.group(1)

        base = {
            "kind": "repeat" if repeat_rule else "single",
            "date": date_s,
            "time": time_s,
            "direction": direction,
            "category": "–ó–∞–∫—É–ø–∫–∞" if supplier else "–û–±—â–µ–µ",
            "tt": ",".join(tts),
            "text": text.strip(),
            "repeat_rule": repeat_rule,
            "supplier": supplier,
            "user_id": fallback_user_id
        }

        # –µ—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ —É–ø–æ–º—è–Ω—É—Ç—ã –æ–±–µ —Ç–æ—á–∫–∏ ‚Äî —Ä–∞–∑–ª–æ–∂–∏–º
        if len(tts) > 1:
            for t in tts:
                x = dict(base)
                x["tt"] = t
                items.append(x)
        else:
            items.append(base)

    return items

# ========= –û–ë–†–ê–ë–û–¢–ö–ê –ü–û–í–¢–û–†–Ø–Æ–©–ò–•–°–Ø –ó–ê–î–ê–ß –ö–ê–ñ–î–´–ô –î–ï–ù–¨ =========
def expand_repeats_for_date(date_dt: datetime):
    """–ù–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á–∏ –∏–∑ –ª–∏—Å—Ç–∞ '–ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–∞–¥–∞—á–∏' –ø–æ –∏—Ö –ø—Ä–∞–≤–∏–ª–∞–º."""
    date_s = date_dt.strftime("%d.%m.%Y")
    weekday_map = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫","–≤—Ç–æ—Ä–Ω–∏–∫","—Å—Ä–µ–¥–∞","—á–µ—Ç–≤–µ—Ä–≥","–ø—è—Ç–Ω–∏—Ü–∞","—Å—É–±–±–æ—Ç–∞","–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    weekday_s = weekday_map[date_dt.weekday()]
    rep_rows = read_all(ws_repeating)

    # –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –¥–∞—Ç—É –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –¥—É–±–ª–µ–π
    existing = {(r.get("User ID"), r.get("–î–∞—Ç–∞"), r.get("–ó–∞–¥–∞—á–∞")) for r in ws_tasks.get_all_records()}

    for r in rep_rows:
        if (r.get("–ê–∫—Ç–∏–≤–Ω–∞") or "").strip().lower() not in ("1","–¥–∞","true","y","on"):
            continue
        rule = (r.get("–ü—Ä–∞–≤–∏–ª–æ") or "").strip().lower()
        direction = (r.get("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ") or "").strip()
        category = (r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è") or "").strip()
        tt = (r.get("–¢–¢") or "").strip()
        text = (r.get("–ó–∞–¥–∞—á–∞") or "").strip()
        time_s = (r.get("–í—Ä–µ–º—è") or "").strip()
        supplier = (r.get("–ü–æ—Å—Ç–∞–≤—â–∏–∫") or "").strip()
        user_id = str(r.get("User ID") or "").strip()

        should_create = False

        # –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª: "–∫–∞–∂–¥—ã–µ 2 –¥–Ω—è 14:00", "–∫–∞–∂–¥—ã–π –≤—Ç–æ—Ä–Ω–∏–∫ 12:00", "–ø–æ –ø–Ω,—Å—Ä"
        if rule.startswith("–∫–∞–∂–¥—ã–µ "):
            # –∫–∞–∂–¥—ã–µ N –¥–Ω–µ–π
            m = re.search(r"–∫–∞–∂–¥—ã–µ\s+(\d+)\s+–¥–Ω", rule)
            if m:
                n = int(m.group(1))
                # –±–∞–∑–æ–≤—ã–π —Å—Ç–∞—Ä—Ç ‚Äî –∏–∑ "—Å –º–æ–º–µ–Ω—Ç–∞ –∑–∞–Ω–µ—Å–µ–Ω–∏—è". –ë—É–¥–µ–º –¥–µ–ª–∏—Ç—å –æ—Ç –∏–∑–≤–µ—Å—Ç–Ω–æ–π —ç–ø–æ—Ö–∏:
                epoch = datetime(2025,1,1, tzinfo=LOCAL_TZ).date()
                delta = (date_dt.date() - epoch).days
                if delta % n == 0:
                    should_create = True
        elif rule.startswith("–∫–∞–∂–¥—ã–π "):
            # –∫–∞–∂–¥—ã–π –≤—Ç–æ—Ä–Ω–∏–∫, –∫–∞–∂–¥—ã–π —á–µ—Ç–≤–µ—Ä–≥ 14:00
            for i,wd in enumerate(weekday_map):
                if wd in rule and wd == weekday_s:
                    should_create = True
                    break
        elif rule.startswith("–ø–æ "):
            # –ø–æ –ø–Ω,—Å—Ä
            days = [d.strip() for d in rule.replace("–ø–æ","").split(",")]
            # —Å–æ–ø–æ—Å—Ç–∞–≤–∏–º —Ä—É—Å—Å–∫–∏–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
            short = {"–ø–Ω":"–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫","–≤—Ç":"–≤—Ç–æ—Ä–Ω–∏–∫","—Å—Ä":"—Å—Ä–µ–¥–∞","—á—Ç":"—á–µ—Ç–≤–µ—Ä–≥","–ø—Ç":"–ø—è—Ç–Ω–∏—Ü–∞","—Å–±":"—Å—É–±–±–æ—Ç–∞","–≤—Å":"–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"}
            expanded = [short.get(d, d) for d in days]
            if weekday_s in expanded:
                should_create = True

        if should_create:
            key = (user_id, date_s, text)
            if key not in existing:
                add_task_row(date_s, direction, category, tt, text, time_s, "", "–ø–æ–≤—Ç–æ—Ä", "", user_id, "–ø–æ–≤—Ç–æ—Ä")
                existing.add(key)

# ========= –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ù–´–ô –í–´–í–û–î =========
def format_tasks_grouped(tasks, header_date=None):
    """–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ‚Üí –ö–∞—Ç–µ–≥–æ—Ä–∏—è ‚Üí –¢–¢ ‚Üí –ø—É–Ω–∫—Ç—ã"""
    if not tasks:
        return "–ó–∞–¥–∞—á –Ω–µ—Ç."

    # —Å–æ—Ä—Ç–∏—Ä—É–µ–º: –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –¢–¢, –¥–µ–¥–ª–∞–π–Ω
    def k(r):
        dl = r.get("–î–µ–¥–ª–∞–π–Ω") or ""
        try:
            dl_k = datetime.strptime(dl, "%H:%M").time()
        except:
            dl_k = datetime.min.time()
        return (r.get("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",""), r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–¢–¢",""), dl_k, r.get("–ó–∞–¥–∞—á–∞",""))

    tasks = sorted(tasks, key=k)

    out = []
    if header_date:
        # –í –∑–∞–≥–æ–ª–æ–≤–∫–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ —Å–ª–µ–≤–∞ –æ—Ç –¥–∞—Ç—ã
        dt = datetime.strptime(header_date, "%d.%m.%Y")
        out.append(f"‚Ä¢ {weekday_ru(dt)} ‚Äî {header_date}\n")

    # –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞
    cur_dir = cur_cat = cur_tt = None
    for r in tasks:
        d = r.get("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ","")
        c = r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è","")
        t = r.get("–¢–¢","")
        txt = r.get("–ó–∞–¥–∞—á–∞","")
        dl = r.get("–î–µ–¥–ª–∞–π–Ω","") or ""
        st = (r.get("–°—Ç–∞—Ç—É—Å","") or "").lower()
        rep = (r.get("–¢–∏–ø","") or "").lower() == "–ø–æ–≤—Ç–æ—Ä"
        icon = "‚úÖ" if st == "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ" else ("üîÅ" if rep else "‚¨ú")

        if d != cur_dir:
            out.append(f"üìÇ <b>{d}</b>")
            cur_dir = d; cur_cat = cur_tt = None
        if c != cur_cat:
            out.append(f"  ‚îî <b>{c}</b>")
            cur_cat = c; cur_tt = None
        if t != cur_tt:
            out.append(f"    ‚îî <i>{t or '‚Äî'}</i>")
            cur_tt = t
        line = f"      {icon} {txt}"
        if dl: line += f"  <i>(–¥–æ {dl})</i>"
        out.append(line)
    return "\n".join(out)

def get_tasks_for_date(user_id, date_str):
    rows = ws_tasks.get_all_records()
    return [r for r in rows if str(r.get("User ID")) == str(user_id) and r.get("–î–∞—Ç–∞") == date_str]

def get_tasks_for_week(user_id, start_dt=None):
    if not start_dt:
        start_dt = now_local().date()
    days = [(start_dt + timedelta(days=i)).strftime("%d.%m.%Y") for i in range(7)]
    rows = ws_tasks.get_all_records()
    return [r for r in rows if str(r.get("User ID")) == str(user_id) and r.get("–î–∞—Ç–∞") in days]

# ========= –ö–õ–ê–í–ò–ê–¢–£–†–´ =========
def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üìÖ –°–µ–≥–æ–¥–Ω—è", "üìÜ –ù–µ–¥–µ–ª—è", "üóì –í—Å—è –Ω–µ–¥–µ–ª—è")
    kb.row("‚ûï –î–æ–±–∞–≤–∏—Ç—å", "‚úÖ –Ø —Å–¥–µ–ª–∞–ª‚Ä¶", "üß† –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç")
    return kb

def week_days_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    base = now_local().date()
    for i in range(7):
        d = base + timedelta(days=i)
        kb.add(f"{weekday_ru(datetime(d.year,d.month,d.day))} ({d.strftime('%d.%m.%Y')})")
    kb.add("‚¨Ö –ù–∞–∑–∞–¥")
    return kb

# ========= –°–û–°–¢–û–Ø–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô (–ø—Ä–æ—Å—Ç–æ–π FSM) =========
USER_STATE = {}         # user_id -> state
USER_BUFFER = {}        # user_id -> temp payload

def set_state(uid, state, data=None):
    USER_STATE[uid] = state
    if data is not None:
        USER_BUFFER[uid] = data

def clear_state(uid):
    USER_STATE.pop(uid, None)
    USER_BUFFER.pop(uid, None)

# ========= –•–ï–ù–î–õ–ï–†–´ =========
@bot.message_handler(commands=["start"])
def cmd_start(m):
    bot.send_message(m.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∑–∞–¥–∞—á–∞–º. –ß–µ–º –∑–∞–π–º—ë–º—Å—è?", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "üìÖ –°–µ–≥–æ–¥–Ω—è")
def handle_today(m):
    uid = m.chat.id
    # –Ω–∞ –≤—Å—è–∫–∏–π: –∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–≤—Ç–æ—Ä—è—â–∏–µ—Å—è –∑–∞–¥–∞—á–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    expand_repeats_for_date(now_local())
    date_s = today_str()
    tasks = get_tasks_for_date(uid, date_s)
    text = f"üìÖ –ó–∞–¥–∞—á–∏ –Ω–∞ {date_s}\n\n" + format_tasks_grouped(tasks, header_date=date_s)
    bot.send_message(uid, text, reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "üìÜ –ù–µ–¥–µ–ª—è")
def handle_week_menu(m):
    bot.send_message(m.chat.id, "–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å:", reply_markup=week_days_menu())

@bot.message_handler(func=lambda msg: msg.text == "üóì –í—Å—è –Ω–µ–¥–µ–ª—è")
def handle_all_week(m):
    uid = m.chat.id
    # —Ä–∞—Å—à–∏—Ä–∏–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–∞–¥–∞—á–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é –≤–ø–µ—Ä—ë–¥ (–ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏)
    for i in range(7):
        expand_repeats_for_date(now_local() + timedelta(days=i))
    tasks = get_tasks_for_week(uid)
    # —Å–≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º, —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏
    if not tasks:
        bot.send_message(uid, "–ù–∞ –Ω–µ–¥–µ–ª—é –∑–∞–¥–∞—á –Ω–µ—Ç.", reply_markup=main_menu())
        return

    by_day = {}
    for r in tasks:
        by_day.setdefault(r["–î–∞—Ç–∞"], []).append(r)

    parts = []
    for d in sorted(by_day.keys(), key=lambda s: datetime.strptime(s, "%d.%m.%Y")):
        parts.append(format_tasks_grouped(by_day[d], header_date=d))
        parts.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –¥–Ω—è–º–∏
    bot.send_message(uid, "\n".join(parts), reply_markup=main_menu())

@bot.message_handler(func=lambda msg: "(" in msg.text and ")" in msg.text)
def handle_specific_day(m):
    uid = m.chat.id
    try:
        date_s = m.text.split("(")[1].strip(")")
    except:
        bot.send_message(uid, "–ù–µ –ø–æ–Ω—è–ª –¥–∞—Ç—É, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.", reply_markup=main_menu())
        return
    # —Ä–∞—Å—à–∏—Ä–∏–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å –Ω–∞ –≤—Å—è–∫–∏–π
    dt = datetime.strptime(date_s, "%d.%m.%Y")
    expand_repeats_for_date(LOCAL_TZ.localize(dt))
    tasks = get_tasks_for_date(uid, date_s)
    text = f"üìÖ –ó–∞–¥–∞—á–∏ –Ω–∞ {date_s}\n\n" + format_tasks_grouped(tasks, header_date=date_s)
    bot.send_message(uid, text, reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "‚¨Ö –ù–∞–∑–∞–¥")
def handle_back(m):
    clear_state(m.chat.id)
    bot.send_message(m.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á (—É–º–Ω—ã–π –≤–≤–æ–¥) ---
@bot.message_handler(func=lambda msg: msg.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å")
def handle_add(m):
    set_state(m.chat.id, "adding_wait_text", {})
    bot.send_message(m.chat.id, "–û–ø–∏—à–∏ –∑–∞–¥–∞—á—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n<b>–ó–∞–∫–∞–∑–∞—Ç—å –ö-–≠–∫—Å–ø—Ä–æ –¶–µ–Ω—Ç—Ä –∏ –ü–æ–ª–µ—Ç –∫–∞–∂–¥—ã–µ 2 –¥–Ω—è –≤ 14:00</b>")

@bot.message_handler(func=lambda msg: msg.text == "‚úÖ –Ø —Å–¥–µ–ª–∞–ª‚Ä¶")
def handle_done_free(m):
    set_state(m.chat.id, "done_wait_text", {})
    bot.send_message(m.chat.id, "–ù–∞–ø–∏—à–∏ —á—Ç–æ —Å–¥–µ–ª–∞–ª. –ü—Ä–∏–º–µ—Ä—ã:\n<b>—è —Å–¥–µ–ª–∞–ª –∑–∞–∫–∞–∑—ã –∫-—ç–∫—Å–ø—Ä–æ —Ü–µ–Ω—Ç—Ä</b>\n<b>—è —Å–¥–µ–ª–∞–ª –≤—Å–µ –∑–∞–∫–∞–∑—ã –∫-—ç–∫—Å–ø—Ä–æ</b>")

@bot.message_handler(func=lambda msg: msg.text == "üß† –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç")
def handle_ai_assistant(m):
    set_state(m.chat.id, "assistant_wait_text", {})
    bot.send_message(m.chat.id, "–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π, —á—Ç–æ –Ω—É–∂–Ω–æ: —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏, –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö –∏ —Ç.–ø.")

@bot.message_handler(func=lambda msg: USER_STATE.get(msg.chat.id) == "adding_wait_text")
def adding_free_text(m):
    uid = m.chat.id
    txt = m.text.strip()
    try:
        items = ai_parse_free_text(txt, uid)
        if not items:
            bot.send_message(uid, "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –∏–Ω–∞—á–µ.", reply_markup=main_menu())
            clear_state(uid); return

        created = []
        repeats_added = 0
        for it in items:
            direction = it.get("direction") or "–õ–∏—á–Ω–æ–µ"
            category  = it.get("category") or "–û–±—â–µ–µ"
            text_val  = it.get("text") or "–ó–∞–¥–∞—á–∞"
            tt       = it.get("tt") or ""
            time_s   = it.get("time") or ""
            supplier = it.get("supplier") or ""
            kind     = it.get("kind") or "single"
            user_id  = it.get("user_id") or uid

            # –µ—Å–ª–∏ tt ‚Äî —Å–ø–∏—Å–æ–∫, –¥–æ–±–∞–≤–∏–º –Ω–∞ –∫–∞–∂–¥—É—é –¢–¢
            tt_list = [t.strip() for t in (tt.split(",") if isinstance(tt,str) else [tt]) if t.strip()] or [""]

            if kind == "repeat":
                rule = it.get("repeat_rule") or ""
                for t in tt_list:
                    ws_repeating.append_row([
                        rule, direction, category, t, text_val, time_s, supplier, str(user_id), "1"
                    ], value_input_option="USER_ENTERED")
                    repeats_added += 1
            else:
                d_str = it.get("date") or today_str()
                for t in tt_list:
                    add_task_row(d_str, direction, category, t, text_val, time_s, "", "—Ä–∞–∑–æ–≤–∞—è", "", user_id, supplier)
                    created.append((d_str, direction, category, t, text_val, time_s))

        msg_parts = []
        if created:
            msg_parts.append("‚úÖ –î–æ–±–∞–≤–∏–ª –∑–∞–¥–∞—á–∏:\n" + "\n".join([f"‚Ä¢ {c[0]} [{c[1]}‚Üí{c[2]}‚Üí{c[3]}] {c[4]} (–¥–æ {c[5] or '‚Äî'})" for c in created]))
        if repeats_added:
            msg_parts.append(f"üîÅ –î–æ–±–∞–≤–∏–ª –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –ø—Ä–∞–≤–∏–ª: {repeats_added}")
        bot.send_message(uid, "\n\n".join(msg_parts) or "–ì–æ—Ç–æ–≤–æ", reply_markup=main_menu())
        log_event(uid, "add_free_text", txt)
    except Exception as e:
        log.error(f"Add parse error: {e}")
        bot.send_message(uid, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ.", reply_markup=main_menu())
    finally:
        clear_state(uid)

@bot.message_handler(func=lambda msg: USER_STATE.get(msg.chat.id) == "done_wait_text")
def done_free_text(m):
    uid = m.chat.id
    txt = m.text.strip().lower()

    # –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥
    sup = None
    if "–∫-—ç–∫—Å–ø—Ä–æ" in txt or "k-exp" in txt:
        sup = "–ö-–≠–∫—Å–ø—Ä–æ"
    elif "–≤—ã–ª–µ–≥–∂–∞–Ω" in txt:
        sup = "–ò–ü –í—ã–ª–µ–≥–∂–∞–Ω–∏–Ω–∞"

    tt = None
    if "—Ü–µ–Ω—Ç—Ä" in txt: tt = "—Ü–µ–Ω—Ç—Ä"
    if "–ø–æ–ª–µ—Ç" in txt or "–ø–æ–ª—ë—Ç" in txt: tt = "–ø–æ–ª–µ—Ç"
    if "–∫–ª–∏–º–æ–≤" in txt: tt = "–∫–ª–∏–º–æ–≤–æ"

    match_all = "–≤—Å–µ" in txt or "–≤—Å—ë" in txt

    try:
        changed = mark_done_by_text(uid, supplier=sup, tt=tt, match_all=match_all)
        if not changed:
            bot.send_message(uid, "–ù–µ –Ω–∞—à—ë–ª –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –£—Ç–æ—á–Ω–∏ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É.", reply_markup=main_menu())
            clear_state(uid); return

        # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ ‚Äî —Å–æ–∑–¥–∞–¥–∏–º –ø—Ä–∏–µ–º–∫—É/—Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑
        if sup:
            direction = direction_for_supplier(sup) or "–ö–æ—Ñ–µ–π–Ω—è"
            # –æ–ø—Ä–µ–¥–µ–ª–∏–º –¢–¢-–ª–∏—Å—Ç –∏–∑ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
            tt_list = list({ r.get("–¢–¢") for r in changed if r.get("–¢–¢") })
            created = plan_next_by_supplier_rule(uid, sup, direction, tt_list)
            extra = ""
            if created:
                extra = "\n\nüîÆ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º:\n" + "\n".join([f"‚Ä¢ {tt}: –ø—Ä–∏–µ–º–∫–∞ {d1.strftime('%d.%m')} ‚Üí –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ {d2.strftime('%d.%m')}" for tt,d1,d2 in created])
            bot.send_message(uid, f"‚úÖ –û—Ç–º–µ—Ç–∏–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º: {len(changed)}.\n{extra}".strip(), reply_markup=main_menu())
        else:
            bot.send_message(uid, f"‚úÖ –û—Ç–º–µ—Ç–∏–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º: {len(changed)}.", reply_markup=main_menu())

        log_event(uid, "done_free_text", txt)
    except Exception as e:
        log.error(f"Done free error: {e}")
        bot.send_message(uid, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.", reply_markup=main_menu())
    finally:
        clear_state(uid)

@bot.message_handler(func=lambda msg: USER_STATE.get(msg.chat.id) == "assistant_wait_text")
def ai_answer(m):
    uid = m.chat.id
    query = m.text.strip()
    try:
        # —Å–æ–±–µ—Ä—ë–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á –Ω–∞ 7 –¥–Ω–µ–π –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        tasks = get_tasks_for_week(uid)
        brief = []
        for r in sorted(tasks, key=lambda x: (datetime.strptime(x["–î–∞—Ç–∞"], "%d.%m.%Y"), x.get("–î–µ–¥–ª–∞–π–Ω",""), x.get("–ó–∞–¥–∞—á–∞",""))):
            brief.append(f"{r['–î–∞—Ç–∞']} ‚Ä¢ {r['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ']} / {r['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']} / {r['–¢–¢'] or '‚Äî'} ‚Äî {r['–ó–∞–¥–∞—á–∞']} (–¥–æ {r['–î–µ–¥–ª–∞–π–Ω'] or '‚Äî'}) [{r.get('–°—Ç–∞—Ç—É—Å','')}]")
        context = "\n".join(brief)[:4000]

        if not OPENAI_API_KEY:
            # –§–æ–ª–ª–±–µ–∫: –ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞
            bot.send_message(uid, "üß† (–ë–µ–∑ GPT) –°–æ–≤–µ—Ç: –Ω–∞—á–Ω–∏ —Å –∑–∞–¥–∞—á —Å –±–ª–∏–∂–∞–π—à–∏–º –¥–µ–¥–ª–∞–π–Ω–æ–º –∏ –≤—ã—Å–æ–∫–æ–π –≤–∞–∂–Ω–æ—Å—Ç—å—é.", reply_markup=main_menu())
            clear_state(uid); return

        from openai import OpenAI
        client = OpenAI(api_key=OPENAI_API_KEY)
        sys = (
            "–¢—ã –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∑–∞–¥–∞—á–∞–º. –ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–º–æ–≥–∏ —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å, –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å, "
            "–Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –≤–∞–∂–Ω—ã—Ö –¥–µ–¥–ª–∞–π–Ω–∞—Ö. –ü–∏—à–∏ –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É, –Ω–∞ —Ä—É—Å—Å–∫–æ–º, —Å –±—É–ª–ª–µ—Ç–∞–º–∏."
        )
        prompt = f"–ó–∞–ø—Ä–æ—Å: {query}\n\n–ú–æ–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é:\n{context}"
        resp = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role":"system","content":sys},{"role":"user","content":prompt}],
            temperature=0.3
        )
        answer = resp.choices[0].message.content.strip()
        bot.send_message(uid, f"üß† {answer}", reply_markup=main_menu())
        log_event(uid, "assistant_query", query)
    except Exception as e:
        log.error(f"AI error: {e}", exc_info=True)
        bot.send_message(uid, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.", reply_markup=main_menu())
    finally:
        clear_state(uid)

# ========= –ü–õ–ê–ù–ò–†–û–í–©–ò–ö (–ï–ñ–ï–î–ù–ï–í–ù–ê–Ø –†–ê–°–°–´–õ–ö–ê) =========
def job_daily_digest():
    try:
        # –ù–∞ –≤—Å—è–∫–∏–π ‚Äî —Ä–∞—Å—à–∏—Ä–∏–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        expand_repeats_for_date(now_local())
        users = read_all(ws_users)
        today = today_str()
        for u in users:
            uid = str(u.get("Telegram ID") or "").strip()
            if not uid:
                continue
            tasks = get_tasks_for_date(uid, today)
            if not tasks:
                continue
            text = f"üìÖ –ü–ª–∞–Ω –Ω–∞ {today}\n\n" + format_tasks_grouped(tasks, header_date=today)
            try:
                bot.send_message(uid, text)
            except Exception as e:
                log.error(f"–ù–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç {uid}: {e}")
    except Exception as e:
        log.error(f"job_daily_digest error: {e}")

def scheduler_thread():
    # 09:00 –ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–º—É TZ
    schedule.clear()
    schedule.every().day.at("09:00").do(job_daily_digest)
    while True:
        schedule.run_pending()
        time.sleep(1)

# ========= WEBHOOK =========
app = Flask(__name__)

@app.route("/" + API_TOKEN, methods=["POST"])
def webhook():
    try:
        update = request.get_data().decode("utf-8")
        upd = types.Update.de_json(update)
        bot.process_new_updates([upd])
    except Exception as e:
        log.error(f"Webhook error: {e}")
    return "OK", 200

@app.route("/")
def home():
    return "Bot is running!"

# ========= START =========
if __name__ == "__main__":
    if not API_TOKEN or not WEBHOOK_URL:
        raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω—ã TELEGRAM_TOKEN –∏–ª–∏ WEBHOOK_BASE")

    # —Ç–æ–ª—å–∫–æ webhook, –ù–ò–ö–ê–ö–û–ì–û polling ‚Äî –∏–Ω–∞—á–µ 409
    try:
        bot.remove_webhook()
    except Exception:
        pass
    time.sleep(0.5)
    bot.set_webhook(url=WEBHOOK_URL)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ —Ñ–æ–Ω–µ
    threading.Thread(target=scheduler_thread, daemon=True).start()

    # Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Telegram Webhook –∏ –∑–¥–æ—Ä–æ–≤—å—è
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", "5000")))
