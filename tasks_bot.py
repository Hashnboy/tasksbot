# -*- coding: utf-8 -*-
"""
TasksBot ‚Äî Telegram-–±–æ—Ç —Å PostgreSQL, webhook, GPT-–ø–æ–º–æ—â–Ω–∏–∫–æ–º –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–µ–π –∑–∞–∫—É–ø–æ–∫/–ø–æ—Å—Ç–∞–≤–æ–∫.

–ö–ª—é—á–µ–≤—ã–µ —Ñ–∏—á–∏:
- PostgreSQL (SQLAlchemy ORM)
- –í–µ–±—Ö—É–∫ (Flask) ‚Äî –ù–ò–ö–ê–ö–û–ì–û polling -> –Ω–µ—Ç 409
- –ó–∞–¥–∞—á–∏/–ø–æ–¥–∑–∞–¥–∞—á–∏/–ø–æ—Å—Ç–∞–≤—â–∏–∫–∏/–ø–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å
- –ö–Ω–æ–ø–∫–∏: –º–µ–Ω—é –ø–æ —Ç–µ–º–∞–º, –ø–∞–≥–∏–Ω–∞—Ü–∏—è, –∫–∞—Ä—Ç–æ—á–∫–∞ –∑–∞–¥–∞—á–∏ (done/–ø—Ä–∏—ë–º–∫–∞/–ø–æ–¥–∑–∞–¥–∞—á–∞/–¥–µ–¥–ª–∞–π–Ω/–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ)
- –ê–≤—Ç–æ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–æ–∫ (–ö-–≠–∫—Å–ø—Ä–æ, –ò–ü –í—ã–ª–µ–≥–∂–∞–Ω–∏–Ω–∞ –∏ –ª—é–±—ã–µ –∏–∑ –ª–∏—Å—Ç–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤)
- –£–º–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ GPT (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω OPENAI_API_KEY) + —Ñ–æ–ª–ª–±–µ–∫-—ç–≤—Ä–∏—Å—Ç–∏–∫–∏
- –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –≤ 08:00 (–ø–æ TZ) + –º–∏–Ω—É—Ç–∞-–≤-–º–∏–Ω—É—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

ENV:
  TELEGRAM_TOKEN     ‚Äî —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
  WEBHOOK_BASE       ‚Äî –±–∞–∑–æ–≤—ã–π URL —Ç–≤–æ–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞, –Ω–∞–ø—Ä. https://your-app.vkcloud.ru
  DATABASE_URL       ‚Äî —Å—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL, –Ω–∞–ø—Ä. postgresql+psycopg2://user:pass@host:5432/db
  OPENAI_API_KEY     ‚Äî –∫–ª—é—á OpenAI (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è NLP/–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞)
  TZ                 ‚Äî —Ç–∞–π–º–∑–æ–Ω–∞, –Ω–∞–ø—Ä. Europe/Moscow (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
  PORT               ‚Äî –ø–æ—Ä—Ç Flask (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10000)
"""

import os
import re
import hmac
import json
import pytz
import time
import math
import uuid
import hashlib
import logging
import schedule
import threading
from datetime import datetime, timedelta

from flask import Flask, request
from telebot import TeleBot, types

# ---- SQLAlchemy ----
from sqlalchemy import (
    create_engine, Column, Integer, String, Text, Date, Time, DateTime, Boolean, func, Index
)
from sqlalchemy.orm import declarative_base, sessionmaker, scoped_session

# ---- OpenAI (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ----
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
if OPENAI_API_KEY:
    try:
        from openai import OpenAI
        openai_client = OpenAI(api_key=OPENAI_API_KEY)
    except Exception:
        openai_client = None
else:
    openai_client = None

# ========= –ù–ê–°–¢–†–û–ô–ö–ò –û–ö–†–£–ñ–ï–ù–ò–Ø =========
API_TOKEN   = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_BASE= os.getenv("WEBHOOK_BASE")
DB_URL      = os.getenv("DATABASE_URL")
TZ_NAME     = os.getenv("TZ", "Europe/Moscow")
PORT        = int(os.getenv("PORT", "10000"))

if not API_TOKEN or not WEBHOOK_BASE or not DB_URL:
    raise RuntimeError("–ù—É–∂–Ω—ã ENV: TELEGRAM_TOKEN, WEBHOOK_BASE, DATABASE_URL")

WEBHOOK_URL = f"{WEBHOOK_BASE}/{API_TOKEN}"
LOCAL_TZ    = pytz.timezone(TZ_NAME)

# ========= –õ–û–ì–ò =========
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
log = logging.getLogger("tasksbot")

# ========= –ë–û–¢ =========
bot = TeleBot(API_TOKEN, parse_mode="HTML")

# ========= –ë–ê–ó–ê –î–ê–ù–ù–´–• =========
Base = declarative_base()
engine = create_engine(DB_URL, pool_pre_ping=True, future=True)
SessionLocal = scoped_session(sessionmaker(bind=engine, autoflush=False, autocommit=False))

# ========= –ú–û–î–ï–õ–ò =========
class User(Base):
    __tablename__ = "users"
    id          = Column(Integer, primary_key=True)            # tg chat id
    name        = Column(String(255), default="")
    created_at  = Column(DateTime, server_default=func.now())

class Task(Base):
    __tablename__ = "tasks"
    id           = Column(Integer, primary_key=True)
    user_id      = Column(Integer, index=True, nullable=False)
    date         = Column(Date, index=True, nullable=False)
    category     = Column(String(120), default="–õ–∏—á–Ω–æ–µ", index=True)
    subcategory  = Column(String(120), default="", index=True)  # –¢–¢ –∏ —Ç.–ø.
    text         = Column(Text, nullable=False)
    deadline     = Column(Time, nullable=True)
    status       = Column(String(40), default="")               # "", "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
    repeat_rule  = Column(String(255), default="")              # —Å–≤–æ–±–æ–¥–Ω—ã–π –≤–∏–¥ (–∫–∞–∂–¥—ã–µ 2 –¥–Ω—è, –≤—Ç–æ—Ä–Ω–∏–∫ 12:00 –∏ —Ç.–ø.)
    source       = Column(String(255), default="")              # supplier/auto/remind/subtask:...
    is_repeating = Column(Boolean, default=False)               # –ø–æ–º–µ—Ç–∫–∞ —á—Ç–æ –ø–æ—Ä–æ–∂–¥–µ–Ω–æ –ø–æ —à–∞–±–ª–æ–Ω—É
    created_at   = Column(DateTime, server_default=func.now())

    __table_args__ = (
        Index("ix_tasks_uid_date", "user_id", "date"),
    )

class SubTask(Base):
    __tablename__ = "subtasks"
    id          = Column(Integer, primary_key=True)
    task_id     = Column(Integer, index=True, nullable=False)
    text        = Column(Text, nullable=False)
    status      = Column(String(40), default="")
    created_at  = Column(DateTime, server_default=func.now())

class Supplier(Base):
    __tablename__ = "suppliers"
    id          = Column(Integer, primary_key=True)
    name        = Column(String(255), unique=True, nullable=False)  # "–∫-—ç–∫—Å–ø—Ä–æ"
    rule        = Column(String(255), default="")                   # "–∫–∞–∂–¥—ã–µ 2 –¥–Ω—è", "shelf 72h"
    order_deadline = Column(String(10), default="14:00")
    emoji       = Column(String(8), default="üì¶")
    delivery_offset_days = Column(Integer, default=1)
    shelf_days  = Column(Integer, default=0)                        # –Ω–∞–ø—Ä–∏–º–µ—Ä 3 –¥–ª—è 72—á
    start_cycle = Column(Date, nullable=True)                       # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
    auto        = Column(Boolean, default=True)
    active      = Column(Boolean, default=True)
    created_at  = Column(DateTime, server_default=func.now())

class Reminder(Base):
    __tablename__ = "reminders"
    id          = Column(Integer, primary_key=True)
    user_id     = Column(Integer, index=True)
    task_id     = Column(Integer, index=True)
    date        = Column(Date, nullable=False)
    time        = Column(Time, nullable=False)
    fired       = Column(Boolean, default=False)
    created_at  = Column(DateTime, server_default=func.now())

def init_db():
    Base.metadata.create_all(bind=engine)

# ========= –£–¢–ò–õ–ò–¢–´ =========
PAGE_SIZE = 8

def now_local():
    return datetime.now(LOCAL_TZ)

def dstr(dt):
    return dt.strftime("%d.%m.%Y")

def parse_date_str(s: str):
    return datetime.strptime(s, "%d.%m.%Y").date()

def parse_time_str(s: str):
    return datetime.strptime(s, "%H:%M").time()

def weekday_ru(dt):
    names = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫","–í—Ç–æ—Ä–Ω–∏–∫","–°—Ä–µ–¥–∞","–ß–µ—Ç–≤–µ—Ä–≥","–ü—è—Ç–Ω–∏—Ü–∞","–°—É–±–±–æ—Ç–∞","–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    return names[dt.weekday()]

def sha_task_id(task: Task):
    key = f"{task.user_id}|{task.date.isoformat()}|{task.category}|{task.subcategory}|{task.text}|{task.deadline or ''}"
    return hashlib.sha1(key.encode("utf-8")).hexdigest()[:16]

def mk_cb(action, **kwargs):
    payload = {"a": action, **kwargs}
    s = json.dumps(payload, ensure_ascii=False)
    sig = hmac.new(b"cb-key", s.encode("utf-8"), hashlib.sha1).hexdigest()[:6]
    return f"{sig}|{s}"

def parse_cb(data):
    try:
        sig, s = data.split("|", 1)
        check = hmac.new(b"cb-key", s.encode("utf-8"), hashlib.sha1).hexdigest()[:6]
        if sig != check: return None
        return json.loads(s)
    except Exception:
        return None

def ensure_user(sess, uid, name=""):
    u = sess.query(User).filter_by(id=uid).first()
    if not u:
        u = User(id=uid, name=name or "")
        sess.add(u)
        sess.commit()
    return u

# ========= GPT —Ä–∞–∑–±–æ—Ä —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ =========
def ai_parse_to_items(text, fallback_uid):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤:
    {
      "date": "–î–î.–ú–ú.–ì–ì–ì–ì"|"",
      "time": "–ß–ß:–ú–ú"|"",
      "category": "...",
      "subcategory": "...",
      "task": "...",
      "repeat": "",  # —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ
      "supplier": "",  # —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫
      "user_id": fallback_uid
    }
    """
    # –ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ OpenAI
    if openai_client:
        try:
            sys = (
                "–¢—ã –ø–∞—Ä—Å–µ—Ä –∑–∞–¥–∞—á. –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON-–º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞. "
                "–°—Ö–µ–º–∞: {date:'–î–î.–ú–ú.–ì–ì–ì–ì'|'' , time:'–ß–ß:–ú–ú'|'' , category:'–ö–æ—Ñ–µ–π–Ω—è|–¢–∞–±–∞—á–∫–∞|–õ–∏—á–Ω–æ–µ|WB', "
                "subcategory:'–¶–µ–Ω—Ç—Ä|–ü–æ–ª–µ—Ç|–ö–ª–∏–º–æ–≤–æ|..' , task:'...', repeat:'', supplier:''}."
            )
            resp = openai_client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role":"system","content":sys}, {"role":"user","content":text}],
                temperature=0.2
            )
            raw = resp.choices[0].message.content.strip()
            data = json.loads(raw)
            if isinstance(data, dict): data = [data]
            out = []
            for it in data:
                out.append({
                    "date": it.get("date") or "",
                    "time": it.get("time") or "",
                    "category": it.get("category") or "–õ–∏—á–Ω–æ–µ",
                    "subcategory": it.get("subcategory") or "",
                    "task": it.get("task") or "",
                    "repeat": it.get("repeat") or "",
                    "supplier": it.get("supplier") or "",
                    "user_id": fallback_uid
                })
            return out
        except Exception as e:
            log.error("AI parse failed: %s", e)

    # –§–æ–ª–ª–±–µ–∫-—ç–≤—Ä–∏—Å—Ç–∏–∫–∞
    txt = text.strip()
    tl  = txt.lower()
    cat = "–ö–æ—Ñ–µ–π–Ω—è" if any(x in tl for x in ["–∫–æ—Ñ–µ–π–Ω","–∫-—ç–∫—Å–ø—Ä–æ","–≤—ã–ª–µ–≥–∂–∞–Ω"]) else ("–¢–∞–±–∞—á–∫–∞" if "—Ç–∞–±–∞—á" in tl else ("WB" if "wb" in tl else "–õ–∏—á–Ω–æ–µ"))
    sub = "–¶–µ–Ω—Ç—Ä" if "—Ü–µ–Ω—Ç—Ä" in tl else ("–ü–æ–ª–µ—Ç" if ("–ø–æ–ª–µ—Ç" in tl or "–ø–æ–ª—ë—Ç" in tl) else ("–ö–ª–∏–º–æ–≤–æ" if "–∫–ª–∏–º–æ–≤" in tl else ""))
    mtime = re.search(r"(\d{1,2}:\d{2})", txt)
    time_s = mtime.group(1) if mtime else ""
    if   "—Å–µ–≥–æ–¥–Ω—è" in tl: date_s = dstr(now_local().date())
    elif "–∑–∞–≤—Ç—Ä–∞"  in tl: date_s = dstr(now_local().date()+timedelta(days=1))
    else:
        mdate = re.search(r"(\d{2}\.\d{2}\.\d{4})", txt)
        date_s = mdate.group(1) if mdate else ""

    supplier = ""
    if "–∫-—ç–∫—Å–ø—Ä–æ" in tl or "k-exp" in tl or "–∫ —ç–∫—Å–ø—Ä–æ" in tl: supplier = "–ö-–≠–∫—Å–ø—Ä–æ"
    if "–≤—ã–ª–µ–≥–∂–∞–Ω" in tl: supplier = "–ò–ü –í—ã–ª–µ–≥–∂–∞–Ω–∏–Ω–∞"

    return [{
        "date": date_s, "time": time_s, "category": cat, "subcategory": sub,
        "task": txt, "repeat":"", "supplier": supplier, "user_id": fallback_uid
    }]

# ========= –ü–†–ê–í–ò–õ–ê –ü–û–°–¢–ê–í–©–ò–ö–û–í =========
# –ë–∞–∑–æ–≤—ã–µ (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã suppliers)
BASE_SUP_RULES = {
    "–∫-—ç–∫—Å–ø—Ä–æ": {
        "kind": "cycle_every_n_days",
        "n_days": 2,
        "delivery_offset": 1,
        "deadline": "14:00",
        "emoji": "üì¶"
    },
    "–∏–ø –≤—ã–ª–µ–≥–∂–∞–Ω–∏–Ω–∞": {
        "kind": "delivery_shelf_then_order",
        "delivery_offset": 1,
        "shelf_days": 3,
        "deadline": "14:00",
        "emoji": "ü•ò"
    }
}

def normalize_supplier_name(name: str) -> str:
    return (name or "").strip().lower()

def load_supplier_rule(sess, supplier_name: str):
    # 1) –∏–∑ –ë–î
    s = sess.query(Supplier).filter(func.lower(Supplier.name)==normalize_supplier_name(supplier_name)).first()
    if s and s.active:
        # –ø–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å rule
        rule_l = (s.rule or "").strip().lower()
        if "–∫–∞–∂–¥—ã–µ" in rule_l:
            num = 2
            m = re.findall(r"\d+", rule_l)
            if m: num = int(m[0])
            return {
                "kind": "cycle_every_n_days",
                "n_days": num,
                "delivery_offset": s.delivery_offset_days or 1,
                "deadline": s.order_deadline or "14:00",
                "emoji": s.emoji or "üì¶"
            }
        if "shelf" in rule_l or "72" in rule_l or "—Ö—Ä–∞–Ω–µ–Ω" in rule_l:
            shelf = s.shelf_days or 3
            return {
                "kind": "delivery_shelf_then_order",
                "delivery_offset": s.delivery_offset_days or 1,
                "shelf_days": shelf,
                "deadline": s.order_deadline or "14:00",
                "emoji": s.emoji or "ü•ò"
            }
    # 2) –±–∞–∑–æ–≤–∞—è
    base = BASE_SUP_RULES.get(normalize_supplier_name(supplier_name))
    if base:
        return base
    return None

def plan_next_for_supplier(sess, user_id: int, supplier_name: str, category: str, subcategory: str):
    rule = load_supplier_rule(sess, supplier_name)
    if not rule:
        return []
    today = now_local().date()
    created = []
    if rule["kind"] == "cycle_every_n_days":
        delivery_day = today + timedelta(days=rule["delivery_offset"])
        next_order   = today + timedelta(days=rule["n_days"])
        # –ü—Ä–∏–µ–º–∫–∞
        sess.add(Task(
            user_id=user_id,
            date=delivery_day,
            category=category,
            subcategory=subcategory,
            text=f"{rule['emoji']} –ü—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É {supplier_name} ({subcategory or '‚Äî'})",
            deadline=parse_time_str("10:00"),
            status="",
            repeat_rule="",
            source=f"auto:delivery:{supplier_name}",
            is_repeating=False
        ))
        # –°–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑
        sess.add(Task(
            user_id=user_id,
            date=next_order,
            category=category,
            subcategory=subcategory,
            text=f"{rule['emoji']} –ó–∞–∫–∞–∑–∞—Ç—å {supplier_name} ({subcategory or '‚Äî'})",
            deadline=parse_time_str(rule["deadline"]),
            status="",
            repeat_rule="",
            source=f"auto:order:{supplier_name}",
            is_repeating=False
        ))
        sess.commit()
        created = [("delivery", delivery_day), ("order", next_order)]
    elif rule["kind"] == "delivery_shelf_then_order":
        delivery_day = today + timedelta(days=rule["delivery_offset"])
        next_order   = delivery_day + timedelta(days=max(1, rule.get("shelf_days", 3)-1))
        sess.add(Task(
            user_id=user_id,
            date=delivery_day,
            category=category,
            subcategory=subcategory,
            text=f"{rule['emoji']} –ü—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É {supplier_name} ({subcategory or '‚Äî'})",
            deadline=parse_time_str("11:00"),
            status="",
            repeat_rule="",
            source=f"auto:delivery:{supplier_name}",
            is_repeating=False
        ))
        sess.add(Task(
            user_id=user_id,
            date=next_order,
            category=category,
            subcategory=subcategory,
            text=f"{rule['emoji']} –ó–∞–∫–∞–∑–∞—Ç—å {supplier_name} ({subcategory or '‚Äî'})",
            deadline=parse_time_str(rule["deadline"]),
            status="",
            repeat_rule="",
            source=f"auto:order:{supplier_name}",
            is_repeating=False
        ))
        sess.commit()
        created = [("delivery", delivery_day), ("order", next_order)]
    return created

# ========= –î–û–°–¢–£–ü –ö –î–ê–ù–ù–´–ú =========
def add_task(sess, *, user_id:int, date:datetime.date, category:str, subcategory:str, text:str, deadline=None, repeat_rule:str="", source:str="", is_repeating:bool=False):
    t = Task(
        user_id=user_id,
        date=date,
        category=category or "–õ–∏—á–Ω–æ–µ",
        subcategory=subcategory or "",
        text=text.strip(),
        deadline=deadline,
        status="",
        repeat_rule=repeat_rule.strip(),
        source=source.strip(),
        is_repeating=is_repeating
    )
    sess.add(t)
    sess.commit()
    return t

def get_tasks_for_date(sess, user_id:int, date:datetime.date):
    return (sess.query(Task)
            .filter(Task.user_id==user_id, Task.date==date)
            .order_by(Task.category.asc(), Task.subcategory.asc(), Task.deadline.asc().nulls_last())
            ).all()

def get_tasks_for_week(sess, user_id:int, base_date:datetime.date):
    days = [base_date + timedelta(days=i) for i in range(7)]
    rows = (sess.query(Task)
            .filter(Task.user_id==user_id, Task.date.in_(days))
            .order_by(Task.date.asc(), Task.category.asc(), Task.subcategory.asc(), Task.deadline.asc().nulls_last())
            ).all()
    return rows

def complete_task(sess, task_id:int, user_id:int):
    t = sess.query(Task).filter(Task.id==task_id, Task.user_id==user_id).first()
    if not t: return None
    t.status = "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
    sess.commit()
    return t

def delete_task(sess, task_id:int, user_id:int):
    t = sess.query(Task).filter(Task.id==task_id, Task.user_id==user_id).first()
    if not t: return False
    sess.delete(t)
    sess.commit()
    return True

def create_reminder(sess, task_id:int, user_id:int, date_s:str, time_s:str):
    date = parse_date_str(date_s)
    tm   = parse_time_str(time_s)
    r = Reminder(user_id=user_id, task_id=task_id, date=date, time=tm, fired=False)
    sess.add(r)
    sess.commit()
    return r

# ========= –ü–û–í–¢–û–†–Ø–Æ–©–ò–ï–°–Ø –ó–ê–î–ê–ß–ò (–ø–æ simple –ø—Ä–∞–≤–∏–ª–∞–º) =========
def expand_repeats_for_date(sess, user_id:int, date:datetime.date):
    """
    –ü—Ä–∏–º–µ—Ä supported –ø—Ä–∞–≤–∏–ª –≤ Task.repeat_rule:
      - "–∫–∞–∂–¥—ã–µ 2 –¥–Ω—è"
      - "–∫–∞–∂–¥—ã–π –≤—Ç–æ—Ä–Ω–∏–∫ 12:00"
      - "–ø–æ –ø–Ω,—Å—Ä"
    –ü—Ä–∞–≤–∏–ª–æ —Ö—Ä–∞–Ω–∏—Ç—Å—è –Ω–∞ —Å–∞–º–æ–π –∑–∞–¥–∞—á–µ-—à–∞–±–ª–æ–Ω–µ (is_repeating=True), –∏ –º—ã –Ω–∞ –∏—Ö –æ—Å–Ω–æ–≤–µ —Å–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç–∞–Ω—Å—ã –Ω–∞ –¥–∞—Ç—É.
    """
    # –Ω–∞–π–¥—ë–º —à–∞–±–ª–æ–Ω—ã (is_repeating=True) –¥–ª—è —ç—Ç–æ–≥–æ —é–∑–µ—Ä–∞
    templates = (sess.query(Task)
                 .filter(Task.user_id==user_id, Task.is_repeating==True)
                 .all())

    existing = {(t.text, t.category, t.subcategory) for t in get_tasks_for_date(sess, user_id, date)}

    weekday_map = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫","–≤—Ç–æ—Ä–Ω–∏–∫","—Å—Ä–µ–¥–∞","—á–µ—Ç–≤–µ—Ä–≥","–ø—è—Ç–Ω–∏—Ü–∞","—Å—É–±–±–æ—Ç–∞","–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    weekday_s = weekday_map[date.weekday()]

    for tp in templates:
        rule = (tp.repeat_rule or "").strip().lower()
        if not rule: continue
        should = False
        when_time = tp.deadline

        if rule.startswith("–∫–∞–∂–¥—ã–µ "):
            m = re.search(r"–∫–∞–∂–¥—ã–µ\s+(\d+)\s+–¥–Ω", rule)
            if m:
                n = int(m.group(1))
                # —Å—á–∏—Ç–∞–µ–º –æ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Ç–æ—á–∫–∏ (–ª–∏–±–æ created_at, –ª–∏–±–æ 2025-01-01)
                epoch = tp.created_at.date() if tp.created_at else datetime(2025,1,1).date()
                if ((date - epoch).days % n) == 0:
                    should = True

        elif rule.startswith("–∫–∞–∂–¥—ã–π "):
            # "–∫–∞–∂–¥—ã–π –≤—Ç–æ—Ä–Ω–∏–∫ 12:00"
            for i,wd in enumerate(weekday_map):
                if wd in rule and wd == weekday_s:
                    should = True
                    m = re.search(r"(\d{1,2}:\d{2})", rule)
                    if m: when_time = parse_time_str(m.group(1))
                    break

        elif rule.startswith("–ø–æ "):
            # "–ø–æ –ø–Ω,—Å—Ä"
            short = {"–ø–Ω":"–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫","–≤—Ç":"–≤—Ç–æ—Ä–Ω–∏–∫","—Å—Ä":"—Å—Ä–µ–¥–∞",
                     "—á—Ç":"—á–µ—Ç–≤–µ—Ä–≥","–ø—Ç":"–ø—è—Ç–Ω–∏—Ü–∞","—Å–±":"—Å—É–±–±–æ—Ç–∞","–≤—Å":"–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"}
            parts = [p.strip() for p in rule.replace("–ø–æ","").split(",") if p.strip()]
            expanded = [short.get(p, p) for p in parts]
            if weekday_s in expanded:
                should = True

        if should:
            key = (tp.text, tp.category, tp.subcategory)
            if key not in existing:
                add_task(sess,
                         user_id=user_id, date=date,
                         category=tp.category, subcategory=tp.subcategory,
                         text=tp.text, deadline=when_time,
                         repeat_rule="", source="repeat-instance", is_repeating=False)
                existing.add(key)

# ========= –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï =========
def format_grouped(tasks, header_date=None):
    if not tasks: return "–ó–∞–¥–∞—á –Ω–µ—Ç."
    out = []
    if header_date:
        dt = parse_date_str(header_date)
        out.append(f"‚Ä¢ {weekday_ru(dt)} ‚Äî {header_date}\n")
    cur_cat = cur_sub = None
    for t in sorted(tasks, key=lambda x: (x.category or "", x.subcategory or "", x.deadline or parse_time_str("00:00"), x.text)):
        icon = "‚úÖ" if t.status=="–≤—ã–ø–æ–ª–Ω–µ–Ω–æ" else ("üîÅ" if t.is_repeating else "‚¨ú")
        if t.category != cur_cat:
            out.append(f"üìÇ <b>{t.category or '‚Äî'}</b>"); cur_cat = t.category; cur_sub = None
        if t.subcategory != cur_sub:
            out.append(f"  ‚îî <b>{t.subcategory or '‚Äî'}</b>"); cur_sub = t.subcategory
        line = f"    ‚îî {icon} {t.text}"
        if t.deadline: line += f"  <i>(–¥–æ {t.deadline.strftime('%H:%M')})</i>"
        out.append(line)
    return "\n".join(out)

def short_task_line(t: Task, i=None):
    dl = t.deadline.strftime("%H:%M") if t.deadline else "‚Äî"
    p  = f"{i}. " if i is not None else ""
    return f"{p}{t.category}/{t.subcategory}: {t.text[:40]}‚Ä¶ (–¥–æ {dl})"

def paginate_buttons(items, page, total_pages, action_prefix):
    kb = types.InlineKeyboardMarkup()
    for label, task_id in items:
        kb.add(types.InlineKeyboardButton(label, callback_data=mk_cb(action_prefix, id=task_id)))
    nav = []
    if page>1: nav.append(types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=mk_cb("page", p=page-1, pa=action_prefix)))
    nav.append(types.InlineKeyboardButton(f"{page}/{total_pages}", callback_data="noop"))
    if page<total_pages: nav.append(types.InlineKeyboardButton("‚û°Ô∏è", callback_data=mk_cb("page", p=page+1, pa=action_prefix)))
    if nav: kb.row(*nav)
    return kb

# ========= –ö–õ–ê–í–ò–ê–¢–£–†–´ =========
def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üìÖ –°–µ–≥–æ–¥–Ω—è","üìÜ –ù–µ–¥–µ–ª—è","üóì –í—Å—è –Ω–µ–¥–µ–ª—è")
    kb.row("‚ûï –î–æ–±–∞–≤–∏—Ç—å","üîé –ù–∞–π—Ç–∏","‚úÖ –Ø —Å–¥–µ–ª–∞–ª‚Ä¶")
    kb.row("üöö –ü–æ—Å—Ç–∞–≤–∫–∏","üß† –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç","‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    return kb

def supplies_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üì¶ –ó–∞–∫–∞–∑—ã —Å–µ–≥–æ–¥–Ω—è","üÜï –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")
    kb.row("‚¨Ö –ù–∞–∑–∞–¥")
    return kb

# ========= –°–û–°–¢–û–Ø–ù–ò–Ø =========
STATE = {}
BUF   = {}
def set_state(uid, s, data=None):
    STATE[uid] = s
    if data is not None: BUF[uid] = data
def get_state(uid): return STATE.get(uid)
def get_buf(uid): return BUF.get(uid, {})
def clear_state(uid):
    STATE.pop(uid, None)
    BUF.pop(uid, None)

# ========= –•–ï–ù–î–õ–ï–†–´ =========
@bot.message_handler(commands=["start"])
def cmd_start(m):
    sess = SessionLocal()
    try:
        ensure_user(sess, m.chat.id, name=m.from_user.full_name if m.from_user else "")
    finally:
        sess.close()
    bot.send_message(m.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∑–∞–¥–∞—á–∞–º. –ß—Ç–æ –¥–µ–ª–∞–µ–º?", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "üìÖ –°–µ–≥–æ–¥–Ω—è")
def handle_today(m):
    sess = SessionLocal()
    try:
        uid = m.chat.id
        ensure_user(sess, uid)
        # –î–û –∫–∞–∂–¥–æ–≥–æ –ø–æ–∫–∞–∑–∞ —Ä–∞—Å—à–∏—Ä—è–µ–º –ø–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        expand_repeats_for_date(sess, uid, now_local().date())
        rows = get_tasks_for_date(sess, uid, now_local().date())
        if not rows:
            bot.send_message(uid, f"üìÖ –ó–∞–¥–∞—á–∏ –Ω–∞ {dstr(now_local().date())}\n\n–ó–∞–¥–∞—á –Ω–µ—Ç.", reply_markup=main_menu()); return
        # –°–ø–∏—Å–æ–∫ + –ø–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
        items = [(short_task_line(t), t.id) for t in rows]
        page = 1
        total = (len(items)+PAGE_SIZE-1)//PAGE_SIZE
        slice_items = items[(page-1)*PAGE_SIZE:page*PAGE_SIZE]
        kb = paginate_buttons(slice_items, page, total, "open")
        header = f"üìÖ –ó–∞–¥–∞—á–∏ –Ω–∞ {dstr(now_local().date())}\n\n{format_grouped(rows, header_date=dstr(now_local().date()))}\n\n–û—Ç–∫—Ä–æ–π –∫–∞—Ä—Ç–æ—á–∫—É:"
        bot.send_message(uid, header, reply_markup=main_menu(), reply_markup_inline=kb)
    finally:
        sess.close()

@bot.message_handler(func=lambda msg: msg.text == "üìÜ –ù–µ–¥–µ–ª—è")
def handle_week(m):
    sess = SessionLocal()
    try:
        uid = m.chat.id
        ensure_user(sess, uid)
        # —Ä–∞—Å—à–∏—Ä–∏–º —à–∞–±–ª–æ–Ω—ã –Ω–∞ 7 –¥–Ω–µ–π –≤–ø–µ—Ä—ë–¥
        for i in range(7):
            expand_repeats_for_date(sess, uid, now_local().date()+timedelta(days=i))
        rows = get_tasks_for_week(sess, uid, now_local().date())
        if not rows:
            bot.send_message(uid, "–ù–∞ –Ω–µ–¥–µ–ª—é –∑–∞–¥–∞—á –Ω–µ—Ç.", reply_markup=main_menu()); return
        # –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º
        by_day = {}
        for t in rows:
            by_day.setdefault(dstr(t.date), []).append(t)
        parts = []
        for d in sorted(by_day.keys(), key=lambda s: parse_date_str(s)):
            parts.append(format_grouped(by_day[d], header_date=d)); parts.append("")
        bot.send_message(uid, "\n".join(parts), reply_markup=main_menu())
    finally:
        sess.close()

@bot.message_handler(func=lambda msg: msg.text == "üóì –í—Å—è –Ω–µ–¥–µ–ª—è")
def handle_all_week(m):
    # –¥—É–±–ª—å –∫–æ–º–∞–Ω–¥—ã –≤—ã—à–µ ‚Äî –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –µ—Å—Ç—å –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏
    handle_week(m)

@bot.message_handler(func=lambda msg: msg.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å")
def handle_add(m):
    set_state(m.chat.id, "adding_text")
    bot.send_message(m.chat.id, "–û–ø–∏—à–∏ –∑–∞–¥–∞—á—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (—è —Ä–∞—Å–ø–∞—Ä—à—É –¥–∞—Ç—É/–≤—Ä–µ–º—è/–∫–∞—Ç–µ–≥–æ—Ä–∏—é/–¢–¢).")

@bot.message_handler(func=lambda msg: msg.text == "üîé –ù–∞–π—Ç–∏")
def handle_search(m):
    set_state(m.chat.id, "search_text")
    bot.send_message(m.chat.id, "–ß—Ç–æ –∏—â–µ–º? –í–≤–µ–¥–∏ —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞/–∫–∞—Ç–µ–≥–æ—Ä–∏–∏/–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏/–¥–∞—Ç—ã (–î–î.–ú–ú.–ì–ì–ì–ì).")

@bot.message_handler(func=lambda msg: msg.text == "‚úÖ –Ø —Å–¥–µ–ª–∞–ª‚Ä¶")
def handle_done_free(m):
    set_state(m.chat.id, "done_text")
    bot.send_message(m.chat.id, "–ù–∞–ø–∏—à–∏ —á—Ç–æ —Å–¥–µ–ª–∞–ª. –ü—Ä–∏–º–µ—Ä—ã:\n<b>—Å–¥–µ–ª–∞–ª –∑–∞–∫–∞–∑—ã –∫-—ç–∫—Å–ø—Ä–æ —Ü–µ–Ω—Ç—Ä</b>\n<b>—Å–¥–µ–ª–∞–ª –≤—Å–µ –∑–∞–∫–∞–∑—ã –≤—ã–ª–µ–≥–∂–∞–Ω–∏–Ω–∞</b>")

@bot.message_handler(func=lambda msg: msg.text == "üöö –ü–æ—Å—Ç–∞–≤–∫–∏")
def handle_supplies(m):
    bot.send_message(m.chat.id, "–ú–µ–Ω—é –ø–æ—Å—Ç–∞–≤–æ–∫:", reply_markup=supplies_menu())

@bot.message_handler(func=lambda msg: msg.text == "üì¶ –ó–∞–∫–∞–∑—ã —Å–µ–≥–æ–¥–Ω—è")
def handle_today_orders(m):
    sess = SessionLocal()
    try:
        uid = m.chat.id
        rows = get_tasks_for_date(sess, uid, now_local().date())
        orders = [t for t in rows if "–∑–∞–∫–∞–∑" in t.text.lower() or "–∑–∞–∫–∞–∑–∞—Ç—å" in t.text.lower()]
        if not orders:
            bot.send_message(uid, "–°–µ–≥–æ–¥–Ω—è –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç.", reply_markup=supplies_menu()); return
        kb = types.InlineKeyboardMarkup()
        for i,t in enumerate(orders, start=1):
            kb.add(types.InlineKeyboardButton(short_task_line(t, i), callback_data=mk_cb("open", id=t.id)))
        bot.send_message(uid, "–ó–∞–∫–∞–∑—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:", reply_markup=kb)
    finally:
        sess.close()

@bot.message_handler(func=lambda msg: msg.text == "üÜï –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")
def handle_add_supplier(m):
    set_state(m.chat.id, "add_supplier")
    bot.send_message(m.chat.id, "–§–æ—Ä–º–∞—Ç:\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ; –ø—Ä–∞–≤–∏–ª–æ; –¥–µ–¥–ª–∞–π–Ω(–æ–ø—Ü); emoji(–æ–ø—Ü); delivery_offset(–æ–ø—Ü); shelf_days(–æ–ø—Ü); auto(1/0); active(1/0)</b>\n"
                                "–ü—Ä–∏–º–µ—Ä—ã:\n–ö-–≠–∫—Å–ø—Ä–æ; –∫–∞–∂–¥—ã–µ 2 –¥–Ω—è; 14:00; üì¶; 1; 0; 1; 1\n"
                                "–ò–ü –í—ã–ª–µ–≥–∂–∞–Ω–∏–Ω–∞; shelf 72h; 14:00; ü•ò; 1; 3; 1; 1")

@bot.message_handler(func=lambda msg: msg.text == "üß† –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç")
def handle_ai(m):
    set_state(m.chat.id, "assistant_text")
    bot.send_message(m.chat.id, "–ß—Ç–æ –Ω—É–∂–Ω–æ? (—Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–µ–Ω—å, –≤—ã–¥–µ–ª–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã, —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ —Ç.–¥.)")

@bot.message_handler(func=lambda msg: msg.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
def handle_settings(m):
    bot.send_message(m.chat.id, f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: <b>{TZ_NAME}</b>\n–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç: <b>08:00</b>", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "‚¨Ö –ù–∞–∑–∞–¥")
def handle_back(m):
    clear_state(m.chat.id)
    bot.send_message(m.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

# ========= –¢–ï–ö–°–¢–û–í–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø =========
@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "adding_text")
def adding_text(m):
    sess = SessionLocal()
    try:
        uid = m.chat.id
        ensure_user(sess, uid)
        items = ai_parse_to_items(m.text.strip(), uid)
        created = 0
        for it in items:
            date = parse_date_str(it["date"]) if it["date"] else now_local().date()
            tm   = parse_time_str(it["time"]) if it["time"] else None
            t = add_task(sess,
                         user_id=uid, date=date,
                         category=it["category"], subcategory=it["subcategory"],
                         text=it["task"], deadline=tm,
                         repeat_rule=it["repeat"], source=it["supplier"], is_repeating=bool(it["repeat"]))
            created += 1
        bot.send_message(uid, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–¥–∞—á: {created}", reply_markup=main_menu())
    except Exception as e:
        log.error("adding_text error: %s", e)
        bot.send_message(m.chat.id, "–ù–µ —Å–º–æ–≥ –¥–æ–±–∞–≤–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –∏–Ω–∞—á–µ.", reply_markup=main_menu())
    finally:
        clear_state(m.chat.id); sess.close()

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "search_text")
def search_text(m):
    sess = SessionLocal()
    try:
        uid = m.chat.id
        q = m.text.strip().lower()
        rows = (sess.query(Task)
                .filter(Task.user_id==uid)
                .order_by(Task.date.desc())
                ).all()
        found = []
        for t in rows:
            hay = " ".join([
                dstr(t.date), t.category or "", t.subcategory or "",
                t.text or "", t.status or "", t.repeat_rule or "", t.source or ""
            ]).lower()
            if q in hay:
                found.append((short_task_line(t), t.id))
        if not found:
            bot.send_message(uid, "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=main_menu()); clear_state(uid); return
        page = 1
        total = (len(found)+PAGE_SIZE-1)//PAGE_SIZE
        slice_items = found[(page-1)*PAGE_SIZE:page*PAGE_SIZE]
        kb = paginate_buttons(slice_items, page, total, "open")
        bot.send_message(uid, "–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:", reply_markup=kb)
    finally:
        clear_state(m.chat.id); sess.close()

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "done_text")
def done_text(m):
    sess = SessionLocal()
    try:
        uid = m.chat.id
        txt = m.text.strip().lower()
        supplier = ""
        if "–∫-—ç–∫—Å–ø—Ä–æ" in txt or "k-exp" in txt or "–∫ —ç–∫—Å–ø—Ä–æ" in txt: supplier = "–ö-–≠–∫—Å–ø—Ä–æ"
        if "–≤—ã–ª–µ–≥–∂–∞–Ω" in txt: supplier = "–ò–ü –í—ã–ª–µ–≥–∂–∞–Ω–∏–Ω–∞"

        date = now_local().date()
        rows = get_tasks_for_date(sess, uid, date)
        changed = 0
        last = None
        for t in rows:
            if t.status == "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ": continue
            low = (t.text or "").lower()
            if supplier and normalize_supplier_name(supplier) not in normalize_supplier_name(low):
                continue
            if not supplier and not any(w in low for w in ["–∑–∞–∫–∞–∑","—Å–¥–µ–ª–∞–ª","–∑–∞–∫—É–ø"]):
                continue
            t.status = "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
            last = t
            changed += 1
        sess.commit()
        msg = f"‚úÖ –û—Ç–º–µ—á–µ–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º: {changed}."
        if changed and supplier and last:
            created = plan_next_for_supplier(sess, uid, supplier, last.category, last.subcategory)
            if created:
                more = ", ".join([f"{'–ø—Ä–∏–µ–º–∫–∞' if k=='delivery' else '–∑–∞–∫–∞–∑'} {dstr(v)}" for k,v in created])
                msg += f"\nüîÆ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {more}"
        bot.send_message(uid, msg, reply_markup=main_menu())
    except Exception as e:
        log.error("done_text error: %s", e)
        bot.send_message(m.chat.id, "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –∏–Ω–∞—á–µ.", reply_markup=main_menu())
    finally:
        clear_state(m.chat.id); sess.close()

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "assistant_text")
def assistant_text(m):
    sess = SessionLocal()
    try:
        uid = m.chat.id
        if not openai_client:
            bot.send_message(uid, "üß† –°–æ–≤–µ—Ç: –Ω–∞—á–Ω–∏ —Å –∑–∞–¥–∞—á —Å –±–ª–∏–∂–∞–π—à–∏–º –¥–µ–¥–ª–∞–π–Ω–æ–º, –ø–æ—Ç–æ–º –∫—Ä—É–ø–Ω—ã–µ —Ä–∞–∑–±–µ–π –Ω–∞ 2‚Äì3 –ø–æ–¥–∑–∞–¥–∞—á–∏.", reply_markup=main_menu())
            clear_state(uid); return
        rows = get_tasks_for_week(sess, uid, now_local().date())
        brief = []
        for t in rows:
            dl = t.deadline.strftime("%H:%M") if t.deadline else "‚Äî"
            brief.append(f"{dstr(t.date)} ‚Ä¢ {t.category}/{t.subcategory or '‚Äî'} ‚Äî {t.text} (–¥–æ {dl}) [{t.status or ''}]")
        prompt = f"–ó–∞–ø—Ä–æ—Å: {m.text.strip()}\n\n–ú–æ–∏ –∑–∞–¥–∞—á–∏ (7 –¥–Ω–µ–π):\n" + "\n".join(brief[:200])
        sys = "–¢—ã –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∑–∞–¥–∞—á–∞–º. –ù–∞ —Ä—É—Å—Å–∫–æ–º, –∫—Ä–∞—Ç–∫–æ, –ø–æ –¥–µ–ª—É, –±—É–ª–ª–µ—Ç–∞–º–∏."
        resp = openai_client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role":"system","content":sys},{"role":"user","content":prompt}],
            temperature=0.3
        )
        answer = resp.choices[0].message.content.strip()
        bot.send_message(uid, f"üß† {answer}", reply_markup=main_menu())
    except Exception as e:
        log.error("assistant error: %s", e)
        bot.send_message(m.chat.id, "–ù–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.", reply_markup=main_menu())
    finally:
        clear_state(m.chat.id); sess.close()

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "add_supplier")
def add_supplier_text(m):
    sess = SessionLocal()
    try:
        uid = m.chat.id
        parts = [p.strip() for p in m.text.split(";")]
        name = parts[0]
        rule = parts[1] if len(parts)>1 else ""
        deadline = parts[2] if len(parts)>2 else "14:00"
        emoji = parts[3] if len(parts)>3 else "üì¶"
        doff  = int(parts[4]) if len(parts)>4 and parts[4].isdigit() else 1
        shelf = int(parts[5]) if len(parts)>5 and parts[5].isdigit() else 0
        auto  = (parts[6] == "1") if len(parts)>6 else True
        act   = (parts[7] == "1") if len(parts)>7 else True

        s = sess.query(Supplier).filter(func.lower(Supplier.name)==normalize_supplier_name(name)).first()
        if not s:
            s = Supplier(name=name, rule=rule, order_deadline=deadline, emoji=emoji,
                         delivery_offset_days=doff, shelf_days=shelf, auto=auto, active=act)
            sess.add(s)
        else:
            s.rule=rule; s.order_deadline=deadline; s.emoji=emoji
            s.delivery_offset_days=doff; s.shelf_days=shelf; s.auto=auto; s.active=act
        sess.commit()
        bot.send_message(uid, f"‚úÖ –ü–æ—Å—Ç–∞–≤—â–∏–∫ ¬´{name}¬ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω.", reply_markup=supplies_menu())
    except Exception as e:
        log.error("add_supplier error: %s", e)
        bot.send_message(m.chat.id, "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞.", reply_markup=supplies_menu())
    finally:
        clear_state(m.chat.id); sess.close()

# ========= INLINE: –∫–∞—Ä—Ç–æ—á–∫–∞ –∑–∞–¥–∞—á–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è =========
def render_task_card(sess, task_id:int, uid:int):
    t = sess.query(Task).filter(Task.id==task_id, Task.user_id==uid).first()
    if not t:
        return "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", None
    dl = t.deadline.strftime("%H:%M") if t.deadline else "‚Äî"
    text = (
        f"<b>{t.text}</b>\n"
        f"üìÖ {weekday_ru(t.date)} ‚Äî {dstr(t.date)}\n"
        f"üìÅ {t.category} / {t.subcategory or '‚Äî'}\n"
        f"‚è∞ –î–µ–¥–ª–∞–π–Ω: {dl}\n"
        f"üìù –°—Ç–∞—Ç—É—Å: {t.status or '‚Äî'}"
    )
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å", callback_data=mk_cb("done", id=task_id)))
    if ("–∑–∞–∫–∞–∑" in (t.text or "").lower()) or ("–∑–∞–∫—É–ø" in (t.text or "").lower()):
        kb.add(types.InlineKeyboardButton("üöö –ü—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É", callback_data=mk_cb("accept_delivery", id=task_id)))
    kb.add(types.InlineKeyboardButton("‚ûï –ü–æ–¥–∑–∞–¥–∞—á–∞", callback_data=mk_cb("add_sub", id=task_id)))
    kb.add(types.InlineKeyboardButton("‚úèÔ∏è –î–µ–¥–ª–∞–π–Ω", callback_data=mk_cb("set_deadline", id=task_id)))
    kb.add(types.InlineKeyboardButton("‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data=mk_cb("remind", id=task_id)))
    kb.add(types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=mk_cb("delete", id=task_id)))
    return text, kb

@bot.callback_query_handler(func=lambda c: True)
def cb_handler(c):
    data = parse_cb(c.data) if c.data and c.data!="noop" else None
    uid  = c.message.chat.id
    if not data:
        bot.answer_callback_query(c.id); return
    a = data.get("a")

    sess = SessionLocal()
    try:
        if a == "page":
            page = int(data.get("p", 1))
            pa   = data.get("pa")
            rows = get_tasks_for_date(sess, uid, now_local().date())
            items= [(short_task_line(t), t.id) for t in rows]
            total= (len(items)+PAGE_SIZE-1)//PAGE_SIZE
            page = max(1, min(page, total))
            slice_items = items[(page-1)*PAGE_SIZE:page*PAGE_SIZE]
            kb = paginate_buttons(slice_items, page, total, "open")
            try:
                bot.edit_message_reply_markup(uid, c.message.message_id, reply_markup=kb)
            except Exception:
                pass
            bot.answer_callback_query(c.id); return

        if a == "open":
            tid = int(data.get("id"))
            text, kb = render_task_card(sess, tid, uid)
            bot.answer_callback_query(c.id)
            bot.send_message(uid, text, reply_markup=kb)
            return

        if a == "done":
            tid = int(data.get("id"))
            t = complete_task(sess, tid, uid)
            if not t:
                bot.answer_callback_query(c.id, "–ù–µ —É–¥–∞–ª–æ—Å—å", show_alert=True); return
            # –∞–≤—Ç–æ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ supplier
            sup = ""
            tl = (t.text or "").lower()
            if "–∫-—ç–∫—Å–ø—Ä–æ" in tl or "k-exp" in tl or "–∫ —ç–∫—Å–ø—Ä–æ" in tl: sup="–ö-–≠–∫—Å–ø—Ä–æ"
            if "–≤—ã–ª–µ–≥–∂–∞–Ω" in tl: sup="–ò–ü –í—ã–ª–µ–≥–∂–∞–Ω–∏–Ω–∞"
            msg = "‚úÖ –ì–æ—Ç–æ–≤–æ."
            if sup:
                created = plan_next_for_supplier(sess, uid, sup, t.category, t.subcategory)
                if created:
                    msg += " –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∏–µ–º–∫–∞/—Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑."
            bot.answer_callback_query(c.id, msg, show_alert=True)
            text, kb = render_task_card(sess, tid, uid)
            if kb: bot.edit_message_text(text, uid, c.message.message_id, reply_markup=kb)
            else:  bot.edit_message_text(text, uid, c.message.message_id)
            return

        if a == "accept_delivery":
            tid = int(data.get("id"))
            kb = types.InlineKeyboardMarkup()
            kb.row(
                types.InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data=mk_cb("accept_delivery_date", id=tid, d="today")),
                types.InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞", callback_data=mk_cb("accept_delivery_date", id=tid, d="tomorrow")),
            )
            kb.row(types.InlineKeyboardButton("üìÖ –î—Ä—É–≥–∞—è –¥–∞—Ç–∞", callback_data=mk_cb("accept_delivery_pick", id=tid)))
            bot.answer_callback_query(c.id)
            bot.send_message(uid, "–ö–æ–≥–¥–∞ –ø—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É?", reply_markup=kb)
            return

        if a == "accept_delivery_pick":
            tid = int(data.get("id"))
            set_state(uid, "pick_delivery_date", {"task_id": tid})
            bot.answer_callback_query(c.id)
            bot.send_message(uid, "–í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
            return

        if a == "accept_delivery_date":
            tid = int(data.get("id"))
            when= data.get("d")
            t = sess.query(Task).filter(Task.id==tid, Task.user_id==uid).first()
            if not t: bot.answer_callback_query(c.id, "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True); return
            if when=="today": d = now_local().date()
            else:             d = now_local().date()+timedelta(days=1)
            sup = "–ü–æ—Å—Ç–∞–≤–∫–∞"
            if "–∫-—ç–∫—Å–ø—Ä–æ" in (t.text or "").lower(): sup = "–ö-–≠–∫—Å–ø—Ä–æ"
            if "–≤—ã–ª–µ–≥–∂–∞–Ω" in (t.text or "").lower(): sup = "–ò–ü –í—ã–ª–µ–≥–∂–∞–Ω–∏–Ω–∞"
            add_task(sess, user_id=uid, date=d, category=t.category, subcategory=t.subcategory,
                     text=f"üöö –ü—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É {sup} ({t.subcategory or '‚Äî'})",
                     deadline=parse_time_str("10:00"))
            bot.answer_callback_query(c.id, f"–°–æ–∑–¥–∞–Ω–æ –Ω–∞ {dstr(d)}", show_alert=True)
            return

        if a == "add_sub":
            tid = int(data.get("id"))
            set_state(uid, "add_sub_text", {"task_id": tid})
            bot.answer_callback_query(c.id)
            bot.send_message(uid, "–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –ø–æ–¥–∑–∞–¥–∞—á–∏:")
            return

        if a == "set_deadline":
            tid = int(data.get("id"))
            set_state(uid, "set_deadline", {"task_id": tid})
            bot.answer_callback_query(c.id)
            bot.send_message(uid, "–ù–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω (–ß–ß:–ú–ú):")
            return

        if a == "remind":
            tid = int(data.get("id"))
            set_state(uid, "set_reminder", {"task_id": tid})
            bot.answer_callback_query(c.id)
            bot.send_message(uid, "–ö–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å? –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú")
            return

        if a == "delete":
            tid = int(data.get("id"))
            ok = delete_task(sess, tid, uid)
            bot.answer_callback_query(c.id, "–£–¥–∞–ª–µ–Ω–æ" if ok else "–ù–µ —É–¥–∞–ª–æ—Å—å", show_alert=True)
            try:
                bot.delete_message(uid, c.message.message_id)
            except Exception:
                pass
            return

    finally:
        sess.close()

# ========= –¢–ï–ö–°–¢: –ø–æ–¥–∑–∞–¥–∞—á–∞ / –¥–µ–¥–ª–∞–π–Ω / –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ / —Ä—É—á–Ω–∞—è –¥–∞—Ç–∞ –ø—Ä–∏—ë–º–∫–∏ =========
@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "add_sub_text")
def add_sub_text(m):
    sess = SessionLocal()
    try:
        uid = m.chat.id
        data= get_buf(uid)
        tid = int(data.get("task_id"))
        txt = m.text.strip()
        parent = sess.query(Task).filter(Task.id==tid, Task.user_id==uid).first()
        if not parent:
            bot.send_message(uid, "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_menu()); clear_state(uid); return
        s = SubTask(task_id=tid, text=txt, status="")
        sess.add(s); sess.commit()
        bot.send_message(uid, "–ü–æ–¥–∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.", reply_markup=main_menu())
    finally:
        clear_state(m.chat.id); sess.close()

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "set_deadline")
def set_deadline_text(m):
    sess = SessionLocal()
    try:
        uid = m.chat.id
        data= get_buf(uid)
        tid = int(data.get("task_id"))
        tm  = m.text.strip()
        try:
            t = parse_time_str(tm)
        except Exception:
            bot.send_message(uid, "–ù—É–∂–µ–Ω —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú.", reply_markup=main_menu()); clear_state(uid); return
        task = sess.query(Task).filter(Task.id==tid, Task.user_id==uid).first()
        if not task:
            bot.send_message(uid, "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_menu()); clear_state(uid); return
        task.deadline = t; sess.commit()
        bot.send_message(uid, "–î–µ–¥–ª–∞–π–Ω –æ–±–Ω–æ–≤–ª—ë–Ω.", reply_markup=main_menu())
    finally:
        clear_state(m.chat.id); sess.close()

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "set_reminder")
def set_reminder_text(m):
    sess = SessionLocal()
    try:
        uid = m.chat.id
        data= get_buf(uid)
        tid = int(data.get("task_id"))
        raw = m.text.strip()
        # –æ–∂–∏–¥–∞–µ–º "–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú"
        parts = raw.split()
        if len(parts) != 2:
            bot.send_message(uid, "–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú", reply_markup=main_menu()); clear_state(uid); return
        ds, ts = parts
        try:
            r = create_reminder(sess, tid, uid, ds, ts)
            bot.send_message(uid, f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ {ds} {ts} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=main_menu())
        except Exception:
            bot.send_message(uid, "–ù–µ —Å–º–æ–≥ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç.", reply_markup=main_menu())
    finally:
        clear_state(m.chat.id); sess.close()

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "pick_delivery_date")
def pick_delivery_date(m):
    sess = SessionLocal()
    try:
        uid = m.chat.id
        data= get_buf(uid)
        tid = int(data.get("task_id"))
        ds  = m.text.strip()
        try:
            d = parse_date_str(ds)
        except Exception:
            bot.send_message(uid, "–î–∞—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞. –ù—É–∂–µ–Ω —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì.", reply_markup=main_menu()); clear_state(uid); return
        t = sess.query(Task).filter(Task.id==tid, Task.user_id==uid).first()
        if not t:
            bot.send_message(uid, "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_menu()); clear_state(uid); return
        sup = "–ü–æ—Å—Ç–∞–≤–∫–∞"
        if "–∫-—ç–∫—Å–ø—Ä–æ" in (t.text or "").lower(): sup = "–ö-–≠–∫—Å–ø—Ä–æ"
        if "–≤—ã–ª–µ–≥–∂–∞–Ω" in (t.text or "").lower(): sup = "–ò–ü –í—ã–ª–µ–≥–∂–∞–Ω–∏–Ω–∞"
        add_task(sess, user_id=uid, date=d, category=t.category, subcategory=t.subcategory,
                 text=f"üöö –ü—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É {sup} ({t.subcategory or '‚Äî'})", deadline=parse_time_str("10:00"))
        bot.send_message(uid, f"–°–æ–∑–¥–∞–Ω–æ –Ω–∞ {ds}.", reply_markup=main_menu())
    finally:
        clear_state(m.chat.id); sess.close()

# ========= –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ò =========
def job_daily_digest():
    sess = SessionLocal()
    try:
        today = now_local().date()
        users = sess.query(User).all()
        for u in users:
            # —Ä–∞—Å—à–∏—Ä—è–µ–º –ø–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å –≤ –º–æ–º–µ–Ω—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
            expand_repeats_for_date(sess, u.id, today)
            tasks = get_tasks_for_date(sess, u.id, today)
            if not tasks: continue
            text = f"üìÖ –ü–ª–∞–Ω –Ω–∞ {dstr(today)}\n\n" + format_grouped(tasks, header_date=dstr(today))
            try:
                bot.send_message(u.id, text)
            except Exception as e:
                log.error("digest send error: %s", e)
    finally:
        sess.close()

def job_reminders():
    sess = SessionLocal()
    try:
        now = now_local()
        due = (sess.query(Reminder)
               .filter(Reminder.fired==False, Reminder.date<=now.date())
               .all())
        for r in due:
            # –µ—Å–ª–∏ —É–∂–µ –ø–æ—Ä–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            if r.date < now.date() or (r.date == now.date() and r.time <= now.time().replace(second=0, microsecond=0)):
                t = sess.query(Task).filter(Task.id==r.task_id, Task.user_id==r.user_id).first()
                if t:
                    dl = t.deadline.strftime("%H:%M") if t.deadline else "‚Äî"
                    try:
                        bot.send_message(r.user_id, f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {t.category}/{t.subcategory or '‚Äî'} ‚Äî {t.text} (–¥–æ {dl})")
                    except Exception as e:
                        log.error("reminder send error: %s", e)
                r.fired = True
        sess.commit()
    finally:
        sess.close()

def scheduler_loop():
    schedule.clear()
    schedule.every().day.at("08:00").do(job_daily_digest)   # —É—Ç—Ä–µ–Ω–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç
    schedule.every(1).minutes.do(job_reminders)             # reminders
    while True:
        schedule.run_pending()
        time.sleep(1)

# ========= FLASK/WEBHOOK =========
app = Flask(__name__)

@app.route("/" + os.getenv("WEBHOOK_SECRET"), methods=["POST"])
def webhook():
    data = request.get_data().decode("utf-8")
    upd = types.Update.de_json(data)
    bot.process_new_updates([upd])
    return "OK", 200

@app.route("/")
def home():
    return "TasksBot is running"

# ========= START =========
if __name__ == "__main__":
    init_db()
    # webhook only
    try:
        bot.remove_webhook()
    except Exception:
        pass
    time.sleep(0.5)
    bot.set_webhook(url=WEBHOOK_URL)

    threading.Thread(target=scheduler_loop, daemon=True).start()
    app.run(host="0.0.0.0", port=PORT)
