# tasks_bot.py
# -*- coding: utf-8 -*-
import os
import re
import json
import time
import pytz
import hmac
import hashlib
import logging
import schedule
import threading
from datetime import datetime, timedelta

import gspread
from flask import Flask, request
from telebot import TeleBot, types

# ===================== –ù–ê–°–¢–†–û–ô–ö–ò –û–ö–†–£–ñ–ï–ù–ò–Ø =====================
API_TOKEN        = os.getenv("TELEGRAM_TOKEN")
TABLE_URL        = os.getenv("GOOGLE_SHEETS_URL")
CREDENTIALS_FILE = os.getenv("GOOGLE_CREDENTIALS_JSON", "/etc/secrets/credentials.json")
WEBHOOK_BASE     = os.getenv("WEBHOOK_BASE")  # e.g. https://your-app.onrender.com
OPENAI_API_KEY   = os.getenv("OPENAI_API_KEY")
TZ_NAME          = os.getenv("TZ", "Europe/Moscow")
WEBHOOK_URL      = f"{WEBHOOK_BASE}/{API_TOKEN}" if API_TOKEN and WEBHOOK_BASE else None

LOCAL_TZ = pytz.timezone(TZ_NAME)

logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
log = logging.getLogger("tasksbot")

REQUIRED_ENVS = ["TELEGRAM_TOKEN", "GOOGLE_SHEETS_URL", "WEBHOOK_BASE"]
missing = [v for v in REQUIRED_ENVS if not os.getenv(v)]
if missing:
    log.warning("–ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: %s", ", ".join(missing))

# ===================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê / SHEETS =====================
bot = TeleBot(API_TOKEN, parse_mode="HTML")

try:
    gc = gspread.service_account(filename=CREDENTIALS_FILE)
    sh = gc.open_by_url(TABLE_URL)
    ws_tasks = sh.worksheet("–í—Å–µ –∑–∞–¥–∞—á–∏")
    ws_suppliers = sh.worksheet("–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏")
    ws_users = sh.worksheet("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
    ws_logs = sh.worksheet("–õ–æ–≥–∏")
    log.info("Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω—ã.")
except Exception as e:
    log.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets", exc_info=True)
    raise

TASKS_HEADERS = ["–î–∞—Ç–∞","–ö–∞—Ç–µ–≥–æ—Ä–∏—è","–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è","–ó–∞–¥–∞—á–∞","–î–µ–¥–ª–∞–π–Ω","User ID","–°—Ç–∞—Ç—É—Å","–ü–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å","–ò—Å—Ç–æ—á–Ω–∏–∫"]

# ===================== –£–¢–ò–õ–ò–¢–´ =====================
PAGE_SIZE = 7  # –ø–∞–≥–∏–Ω–∞—Ü–∏—è: –∑–∞–¥–∞—á –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É

def now_local():
    return datetime.now(LOCAL_TZ)

def today_str(dt=None):
    if dt is None:
        dt = now_local()
    return dt.strftime("%d.%m.%Y")

def weekday_ru(dt: datetime) -> str:
    names = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫","–í—Ç–æ—Ä–Ω–∏–∫","–°—Ä–µ–¥–∞","–ß–µ—Ç–≤–µ—Ä–≥","–ü—è—Ç–Ω–∏—Ü–∞","–°—É–±–±–æ—Ç–∞","–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    return names[dt.weekday()]

def log_event(user_id, action, payload=""):
    try:
        ws_logs.append_row([datetime.utcnow().isoformat(), str(user_id), action, payload], value_input_option="USER_ENTERED")
    except Exception:
        pass

def row_to_dict_list(ws):
    return ws.get_all_records()

def sha_task_id(user_id, date_s, cat, subcat, text, deadline):
    key = f"{user_id}|{date_s}|{cat}|{subcat}|{text}|{deadline}"
    return hashlib.sha1(key.encode("utf-8")).hexdigest()[:16]

def find_row_index_by_id(task_id, rows):
    # –ø–æ–∏—Å–∫ –ø–æ –≤—ã—á–∏—Å–ª—è–µ–º–æ–º—É id
    for i, r in enumerate(rows, start=2):  # –¥–∞–Ω–Ω—ã–µ —Å 2-–π —Å—Ç—Ä–æ–∫–∏
        rid = sha_task_id(str(r.get("User ID")), r.get("–î–∞—Ç–∞",""), r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ó–∞–¥–∞—á–∞",""), r.get("–î–µ–¥–ª–∞–π–Ω",""))
        if rid == task_id:
            return i
    return None

def add_task(date_s, category, subcategory, text, deadline, user_id, status="", repeat="", source=""):
    row = [date_s, category, subcategory, text, deadline, str(user_id), status, repeat, source]
    ws_tasks.append_row(row, value_input_option="USER_ENTERED")

def mark_done_by_id(task_id, user_id):
    rows = row_to_dict_list(ws_tasks)
    idx = find_row_index_by_id(task_id, rows)
    if not idx:
        return False, None
    r = rows[idx-2]
    if str(r.get("User ID")) != str(user_id):
        return False, None
    ws_tasks.update_cell(idx, TASKS_HEADERS.index("–°—Ç–∞—Ç—É—Å")+1, "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
    return True, r

def is_order_task(text: str) -> bool:
    t = (text or "").lower()
    return "–∑–∞–∫–∞–∑" in t or "–∑–∞–∫–∞–∑–∞—Ç—å" in t

def guess_supplier(text: str) -> str:
    t = (text or "").lower()
    if "–∫-—ç–∫—Å–ø—Ä–æ" in t or "k-exp" in t or "–∫ —ç–∫—Å–ø—Ä–æ" in t:
        return "–ö-–≠–∫—Å–ø—Ä–æ"
    if "–≤—ã–ª–µ–≥–∂–∞–Ω" in t:
        return "–ò–ü –í—ã–ª–µ–≥–∂–∞–Ω–∏–Ω–∞"
    return ""

def normalize_tt_from_subcat(subcat: str) -> str:
    s = (subcat or "").strip().lower()
    if "—Ü–µ–Ω—Ç—Ä" in s: return "–¶–µ–Ω—Ç—Ä"
    if "–ø–æ–ª–µ—Ç" in s or "–ø–æ–ª—ë—Ç" in s: return "–ü–æ–ª–µ—Ç"
    if "–∫–ª–∏–º–æ–≤" in s: return "–ö–ª–∏–º–æ–≤–æ"
    return subcat or ""

# ===================== –ü–†–ê–í–ò–õ–ê –ü–û–°–¢–ê–í–©–ò–ö–û–í (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ + –∏–∑ –ª–∏—Å—Ç–∞) =====================
SUPPLIER_RULES = {
    # ¬´–∑–∞–∫–∞–∑ —Å–µ–≥–æ–¥–Ω—è ‚Üí –ø–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–≤—Ç—Ä–∞ ‚Üí –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ 2 –¥–Ω—è¬ª
    "–∫-—ç–∫—Å–ø—Ä–æ": {
        "kind": "cycle_every_n_days",
        "order_every_days": 2,
        "delivery_offset_days": 1,
        "order_deadline": "14:00",
        "emoji": "üì¶"
    },
    # ¬´–∑–∞–∫–∞–∑ —Å–µ–≥–æ–¥–Ω—è ‚Üí –ø–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–≤—Ç—Ä–∞ ‚Üí —Ö—Ä–∞–Ω–µ–Ω–∏–µ 72—á ‚Üí –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ 2 –¥–Ω—è –ø–æ—Å–ª–µ –ø–æ—Å—Ç–∞–≤–∫–∏¬ª
    "–∏–ø –≤—ã–ª–µ–≥–∂–∞–Ω–∏–Ω–∞": {
        "kind": "delivery_shelf_then_order",
        "delivery_offset_days": 1,
        "shelf_hours": 72,
        "order_deadline": "14:00",
        "emoji": "ü•ò"
    }
}

def load_supplier_rules_from_sheet():
    try:
        rows = row_to_dict_list(ws_suppliers)
        for r in rows:
            name = (r.get("–ü–æ—Å—Ç–∞–≤—â–∏–∫") or r.get("–ù–∞–∑–≤–∞–Ω–∏–µ") or "").strip().lower()
            if not name:
                continue
            kind = (r.get("–ü—Ä–∞–≤–∏–ª–æ") or r.get("Rule") or "").strip().lower()
            if not kind:
                continue
            d_off = int(str(r.get("DeliveryOffsetDays") or r.get("–°–º–µ—â–µ–Ω–∏–µ–ü–æ—Å—Ç–∞–≤–∫–∏–î–Ω–µ–π") or 1))
            order_deadline = (r.get("–î–µ–¥–ª–∞–π–Ω–ó–∞–∫–∞–∑–∞") or "14:00").strip()
            emoji = (r.get("Emoji") or "üì¶").strip()
            if "–∫–∞–∂–¥—ã–µ" in kind:
                n = int(re.findall(r"\d+", kind)[0]) if re.findall(r"\d+", kind) else 2
                SUPPLIER_RULES[name] = {
                    "kind": "cycle_every_n_days",
                    "order_every_days": n,
                    "delivery_offset_days": d_off,
                    "order_deadline": order_deadline,
                    "emoji": emoji
                }
            elif "72" in kind or "shelf" in kind or "storage" in kind:
                shelf = int(re.findall(r"\d+", kind)[0]) if re.findall(r"\d+", kind) else 72
                SUPPLIER_RULES[name] = {
                    "kind": "delivery_shelf_then_order",
                    "delivery_offset_days": d_off,
                    "shelf_hours": shelf,
                    "order_deadline": order_deadline,
                    "emoji": emoji
                }
    except Exception as e:
        log.warning("–ù–µ —Å–º–æ–≥ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏–∑ –ª–∏—Å—Ç–∞: %s", e)

load_supplier_rules_from_sheet()

def plan_next_by_supplier_rule(user_id, supplier_name, category, subcategory, base_task_text):
    key = (supplier_name or "").strip().lower()
    rule = SUPPLIER_RULES.get(key)
    if not rule:
        return []
    created = []
    today = now_local().date()

    if rule["kind"] == "cycle_every_n_days":
        delivery_day = today + timedelta(days=rule["delivery_offset_days"])
        next_order_day = today + timedelta(days=rule["order_every_days"])
        # –ø—Ä–∏–µ–º–∫–∞
        add_task(delivery_day.strftime("%d.%m.%Y"), category, subcategory,
                 f"{rule['emoji']} –ü—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É {supplier_name} ({normalize_tt_from_subcat(subcategory) or '‚Äî'})",
                 "10:00", user_id, status="", repeat="", source=f"auto:delivery:{supplier_name}")
        # –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
        add_task(next_order_day.strftime("%d.%m.%Y"), category, subcategory,
                 f"{rule['emoji']} –ó–∞–∫–∞–∑–∞—Ç—å {supplier_name} ({normalize_tt_from_subcat(subcategory) or '‚Äî'})",
                 rule["order_deadline"], user_id, status="", repeat="", source=f"auto:order:{supplier_name}")
        created.append((delivery_day, next_order_day))

    elif rule["kind"] == "delivery_shelf_then_order":
        delivery_day = today + timedelta(days=rule["delivery_offset_days"])
        next_order_day = delivery_day + timedelta(days=2)  # —Å–º. –ª–æ–≥–∏–∫—É 72—á
        add_task(delivery_day.strftime("%d.%m.%Y"), category, subcategory,
                 f"{rule['emoji']} –ü—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É {supplier_name} ({normalize_tt_from_subcat(subcategory) or '‚Äî'})",
                 "11:00", user_id, status="", repeat="", source=f"auto:delivery:{supplier_name}")
        add_task(next_order_day.strftime("%d.%m.%Y"), category, subcategory,
                 f"{rule['emoji']} –ó–∞–∫–∞–∑–∞—Ç—å {supplier_name} ({normalize_tt_from_subcat(subcategory) or '‚Äî'})",
                 rule["order_deadline"], user_id, status="", repeat="", source=f"auto:order:{supplier_name}")
        created.append((delivery_day, next_order_day))
    return created

# ===================== –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï / –ü–û–õ–£–ß–ï–ù–ò–ï –ó–ê–î–ê–ß =====================
def format_grouped(tasks, header_date=None):
    if not tasks:
        return "–ó–∞–¥–∞—á –Ω–µ—Ç."
    # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –ö–∞—Ç–µ–≥–æ—Ä–∏—è, –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è, –î–µ–¥–ª–∞–π–Ω
    def k(r):
        dl = r.get("–î–µ–¥–ª–∞–π–Ω") or ""
        try:
            dlk = datetime.strptime(dl, "%H:%M").time()
        except:
            dlk = datetime.min.time()
        return (r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), dlk, r.get("–ó–∞–¥–∞—á–∞",""))

    tasks = sorted(tasks, key=k)
    out = []
    if header_date:
        dt = datetime.strptime(header_date, "%d.%m.%Y")
        out.append(f"‚Ä¢ {weekday_ru(dt)} ‚Äî {header_date}\n")
    cur_cat = cur_sub = None
    for r in tasks:
        cat = r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è","") or "‚Äî"
        sub = r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è","") or "‚Äî"
        txt = r.get("–ó–∞–¥–∞—á–∞","")
        dl  = r.get("–î–µ–¥–ª–∞–π–Ω","")
        st  = (r.get("–°—Ç–∞—Ç—É—Å","") or "").lower()
        rep = (r.get("–ü–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å","") or "").strip()
        icon = "‚úÖ" if st == "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ" else ("üîÅ" if rep else "‚¨ú")
        if cat != cur_cat:
            out.append(f"üìÇ <b>{cat}</b>"); cur_cat = cat; cur_sub = None
        if sub != cur_sub:
            out.append(f"  ‚îî <b>{sub}</b>"); cur_sub = sub
        line = f"    ‚îî {icon} {txt}"
        if dl: line += f"  <i>(–¥–æ {dl})</i>"
        out.append(line)
    return "\n".join(out)

def get_tasks_by_date(user_id, date_s):
    rows = row_to_dict_list(ws_tasks)
    return [r for r in rows if str(r.get("User ID")) == str(user_id) and r.get("–î–∞—Ç–∞") == date_s]

def get_tasks_between(user_id, start_dt, days=7):
    dates = {(start_dt + timedelta(days=i)).strftime("%d.%m.%Y") for i in range(days)}
    rows = row_to_dict_list(ws_tasks)
    return [r for r in rows if str(r.get("User ID")) == str(user_id) and r.get("–î–∞—Ç–∞") in dates]

# ===================== –ü–ê–ì–ò–ù–ê–¶–ò–Ø / INLINE =====================
# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ callback –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º –≤–∏–¥–µ
def mk_cb(action, **kwargs):
    payload = {"a": action, **kwargs}
    s = json.dumps(payload, ensure_ascii=False)
    # –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –¥–ª–∏–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    sig = hmac.new(b"cb-key", s.encode("utf-8"), hashlib.sha1).hexdigest()[:6]
    return f"{sig}|{s}"

def parse_cb(data):
    try:
        sig, s = data.split("|", 1)
        check = hmac.new(b"cb-key", s.encode("utf-8"), hashlib.sha1).hexdigest()[:6]
        if sig != check:
            return None
        return json.loads(s)
    except Exception:
        return None

def page_buttons(items, page, total_pages, prefix_action):
    kb = types.InlineKeyboardMarkup()
    for it in items:
        # it: (display_text, task_id)
        kb.add(types.InlineKeyboardButton(it[0], callback_data=mk_cb(prefix_action, id=it[1])))
    nav = []
    if page > 1: nav.append(types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=mk_cb("page", p=page-1, pa=prefix_action)))
    nav.append(types.InlineKeyboardButton(f"{page}/{total_pages}", callback_data="noop"))
    if page < total_pages: nav.append(types.InlineKeyboardButton("‚û°Ô∏è", callback_data=mk_cb("page", p=page+1, pa=prefix_action)))
    if nav:
        kb.row(*nav)
    return kb

def build_task_line(r, i=None):
    # –∫–æ—Ä–æ—Ç–∫–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞
    dl = r.get("–î–µ–¥–ª–∞–π–Ω") or "‚Äî"
    prefix = f"{i}. " if i is not None else ""
    return f"{prefix}{r.get('–ö–∞—Ç–µ–≥–æ—Ä–∏—è','‚Äî')}/{r.get('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è','‚Äî')}: {r.get('–ó–∞–¥–∞—á–∞','')[:40]}‚Ä¶ (–¥–æ {dl})"

# ===================== –ú–ï–ù–Æ =====================
def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üìÖ –°–µ–≥–æ–¥–Ω—è","üìÜ –ù–µ–¥–µ–ª—è")
    kb.row("‚ûï –î–æ–±–∞–≤–∏—Ç—å","üîé –ù–∞–π—Ç–∏","‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å")
    kb.row("üöö –ü–æ—Å—Ç–∞–≤–∫–∞","üß† –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç","‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    return kb

def supply_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üÜï –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞","üì¶ –ó–∞–∫–∞–∑—ã —Å–µ–≥–æ–¥–Ω—è")
    kb.row("‚¨Ö –ù–∞–∑–∞–¥")
    return kb

# ===================== GPT: –ü–ê–†–°–ò–ù–ì –ò –ê–°–°–ò–°–¢–ï–ù–¢ =====================
def ai_parse_to_tasks(text, fallback_user_id):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ dict –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ '–í—Å–µ –∑–∞–¥–∞—á–∏'
    –ü–æ–ª—è: {date, category, subcategory, task, deadline, user_id, repeat, source}
    """
    items = []
    used_ai = False

    if OPENAI_API_KEY:
        try:
            from openai import OpenAI
            client = OpenAI(api_key=OPENAI_API_KEY)
            sys = (
                "–¢—ã –ø–∞—Ä—Å–µ—Ä –∑–∞–¥–∞—á. –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON-–º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤. "
                "–ö–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç: {date:'–î–î.–ú–ú.–ì–ì–ì–ì'|'', time:'–ß–ß:–ú–ú'|'', category, subcategory, task, repeat:''|–æ–ø–∏—Å–∞–Ω–∏–µ, supplier:''|–∏–º—è}. "
                "–ï—Å–ª–∏ —É–ø–æ–º—è–Ω—É—Ç—ã '–ö-–≠–∫—Å–ø—Ä–æ' –∏–ª–∏ '–ò–ü –í—ã–ª–µ–≥–∂–∞–Ω–∏–Ω–∞' ‚Äî —ç—Ç–æ –∑–∞–∫–∞–∑ (category='–ö–æ—Ñ–µ–π–Ω—è' –∏–ª–∏ '–ó–∞–∫—É–ø–∫–∞' –¥–æ–ø—É—Å—Ç–∏–º–æ), "
                "–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: '–¶–µ–Ω—Ç—Ä'/'–ü–æ–ª–µ—Ç' –µ—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è. –ù–µ –ø–∏—à–∏ –ª–∏—à–Ω–∏–π —Ç–µ–∫—Å—Ç –≤–Ω–µ JSON."
            )
            resp = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role":"system","content":sys},{"role":"user","content":text}],
                temperature=0.1
            )
            raw = resp.choices[0].message.content.strip()
            parsed = json.loads(raw)
            if isinstance(parsed, dict):
                parsed = [parsed]
            for it in parsed:
                items.append({
                    "date": it.get("date") or "",
                    "category": it.get("category") or "–õ–∏—á–Ω–æ–µ",
                    "subcategory": it.get("subcategory") or "",
                    "task": it.get("task") or "",
                    "deadline": it.get("time") or "",
                    "user_id": fallback_user_id,
                    "repeat": it.get("repeat") or "",
                    "source": (it.get("supplier") or "")
                })
            used_ai = True
        except Exception as e:
            log.error("AI parse failed: %s", e)

    if not used_ai:
        # –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ–π —Ñ–æ–ª–ª–±–µ–∫
        tl = text.lower()
        cat = "–ö–æ—Ñ–µ–π–Ω—è" if any(x in tl for x in ["–∫–æ—Ñ–µ–π–Ω","–∫-—ç–∫—Å–ø—Ä–æ","–≤—ã–ª–µ–≥–∂–∞–Ω"]) else ("–¢–∞–±–∞—á–∫–∞" if "—Ç–∞–±–∞—á" in tl else "–õ–∏—á–Ω–æ–µ")
        sub = "–¶–µ–Ω—Ç—Ä" if "—Ü–µ–Ω—Ç—Ä" in tl else ("–ü–æ–ª–µ—Ç" if ("–ø–æ–ª–µ—Ç" in tl or "–ø–æ–ª—ë—Ç" in tl) else "")
        dl = re.search(r"(\d{1,2}:\d{2})", text)
        deadline = dl.group(1) if dl else ""
        d = ""
        if "—Å–µ–≥–æ–¥–Ω—è" in tl: d = today_str()
        elif "–∑–∞–≤—Ç—Ä–∞" in tl: d = today_str(now_local()+timedelta(days=1))
        else:
            m = re.search(r"(\d{2}\.\d{2}\.\d{4})", text)
            d = m.group(1) if m else ""
        items = [{
            "date": d, "category": cat, "subcategory": sub,
            "task": text.strip(), "deadline": deadline,
            "user_id": fallback_user_id, "repeat":"", "source":""
        }]

    return items

def ai_assist_answer(query, user_id):
    try:
        rows = get_tasks_between(user_id, now_local().date(), 7)
        brief = []
        for r in sorted(rows, key=lambda x: (datetime.strptime(x["–î–∞—Ç–∞"], "%d.%m.%Y"), x.get("–î–µ–¥–ª–∞–π–Ω","") or "", x.get("–ó–∞–¥–∞—á–∞","") or "")):
            brief.append(f"{r['–î–∞—Ç–∞']} ‚Ä¢ {r['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']}/{r['–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è'] or '‚Äî'} ‚Äî {r['–ó–∞–¥–∞—á–∞']} (–¥–æ {r['–î–µ–¥–ª–∞–π–Ω'] or '‚Äî'}) [{r.get('–°—Ç–∞—Ç—É—Å','')}]")
        context = "\n".join(brief)[:4000]
        if not OPENAI_API_KEY:
            # —Ñ–æ–ª–ª–±–µ–∫
            return "–°–æ–≤–µ—Ç: –Ω–∞—á–Ω–∏ —Å –∑–∞–¥–∞—á —Å –±–ª–∏–∂–∞–π—à–∏–º –¥–µ–¥–ª–∞–π–Ω–æ–º –∏ –≤—ã—Å–æ–∫–æ–π –≤–∞–∂–Ω–æ—Å—Ç—å—é. –†–∞–∑–±–µ–π –∫—Ä—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ 2-3 –ø–æ–¥–∑–∞–¥–∞—á–∏."

        from openai import OpenAI
        client = OpenAI(api_key=OPENAI_API_KEY)
        sys = "–¢—ã –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∑–∞–¥–∞—á–∞–º. –ö—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É, –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –±—É–ª–ª–µ—Ç–∞–º–∏."
        prompt = f"–ó–∞–ø—Ä–æ—Å: {query}\n\n–ú–æ–∏ –∑–∞–¥–∞—á–∏ (7 –¥–Ω–µ–π):\n{context}"
        resp = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role":"system","content":sys},{"role":"user","content":prompt}],
            temperature=0.3
        )
        return resp.choices[0].message.content.strip()
    except Exception as e:
        log.error("AI assistant error: %s", e)
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."

# ===================== –°–û–°–¢–û–Ø–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø =====================
USER_STATE = {}     # uid -> state
USER_DATA  = {}     # uid -> payload dict

def set_state(uid, state, data=None):
    USER_STATE[uid] = state
    if data is not None:
        USER_DATA[uid] = data

def get_state(uid):
    return USER_STATE.get(uid)

def get_data(uid):
    return USER_DATA.get(uid, {})

def clear_state(uid):
    USER_STATE.pop(uid, None)
    USER_DATA.pop(uid, None)

# ===================== –•–ï–ù–î–õ–ï–†–´ –ö–û–ú–ê–ù–î/–ú–ï–ù–Æ =====================
@bot.message_handler(commands=["start"])
def cmd_start(m):
    bot.send_message(m.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∑–∞–¥–∞—á–∞–º. –ß—Ç–æ –¥–µ–ª–∞–µ–º?", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "üìÖ –°–µ–≥–æ–¥–Ω—è")
def handle_today(m):
    uid = m.chat.id
    date_s = today_str()
    rows = get_tasks_by_date(uid, date_s)
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    items = []
    for r in rows:
        tid = sha_task_id(str(r.get("User ID")), r.get("–î–∞—Ç–∞",""), r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ó–∞–¥–∞—á–∞",""), r.get("–î–µ–¥–ª–∞–π–Ω",""))
        items.append((build_task_line(r), tid))
    if not items:
        bot.send_message(uid, f"üìÖ –ó–∞–¥–∞—á–∏ –Ω–∞ {date_s}\n\n–ó–∞–¥–∞—á –Ω–µ—Ç.", reply_markup=main_menu()); return

    page = 1
    total_pages = (len(items)+PAGE_SIZE-1)//PAGE_SIZE
    slice_items = items[(page-1)*PAGE_SIZE:page*PAGE_SIZE]
    kb = page_buttons(slice_items, page, total_pages, prefix_action="open")
    header = f"üìÖ –ó–∞–¥–∞—á–∏ –Ω–∞ {date_s}\n\n" + format_grouped(rows, header_date=date_s)
    bot.send_message(uid, header+"\n\n–û—Ç–∫—Ä–æ–π –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞–¥–∞—á–∏:", reply_markup=main_menu(), reply_markup_inline=kb)

@bot.message_handler(func=lambda msg: msg.text == "üìÜ –ù–µ–¥–µ–ª—è")
def handle_week(m):
    uid = m.chat.id
    tasks = get_tasks_between(uid, now_local().date(), 7)
    if not tasks:
        bot.send_message(uid, "–ù–∞ –Ω–µ–¥–µ–ª—é –∑–∞–¥–∞—á –Ω–µ—Ç.", reply_markup=main_menu()); return
    by_day = {}
    for r in tasks:
        by_day.setdefault(r["–î–∞—Ç–∞"], []).append(r)

    parts = []
    for d in sorted(by_day.keys(), key=lambda s: datetime.strptime(s, "%d.%m.%Y")):
        parts.append(format_grouped(by_day[d], header_date=d))
        parts.append("")
    bot.send_message(uid, "\n".join(parts), reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å")
def handle_add(m):
    uid = m.chat.id
    set_state(uid, "adding_text")
    bot.send_message(uid, "–û–ø–∏—à–∏ –∑–∞–¥–∞—á—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (—è —Å–∞–º —Ä–∞—Å–ø–∞—Ä—à—É –¥–∞—Ç—É/–≤—Ä–µ–º—è/–∫–∞—Ç–µ–≥–æ—Ä–∏—é).")

@bot.message_handler(func=lambda msg: msg.text == "üîé –ù–∞–π—Ç–∏")
def handle_search(m):
    uid = m.chat.id
    set_state(uid, "search_text")
    bot.send_message(uid, "–ß—Ç–æ –∏—â–µ–º? –í–≤–µ–¥–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è/–∫–∞—Ç–µ–≥–æ—Ä–∏–∏/–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏/–¥–∞—Ç—ã.")

@bot.message_handler(func=lambda msg: msg.text == "‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å")
def handle_done_menu(m):
    uid = m.chat.id
    set_state(uid, "done_text")
    bot.send_message(uid, "–ù–∞–ø–∏—à–∏, —á—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ. –ü—Ä–∏–º–µ—Ä—ã:\n<b>—Å–¥–µ–ª–∞–ª –∑–∞–∫–∞–∑—ã –∫-—ç–∫—Å–ø—Ä–æ —Ü–µ–Ω—Ç—Ä</b>\n<b>–∑–∞–∫—Ä—ã–ª–∏ –∑–∞–∫–∞–∑ –≤—ã–ª–µ–≥–∂–∞–Ω–∏–Ω–∞</b>")

@bot.message_handler(func=lambda msg: msg.text == "üöö –ü–æ—Å—Ç–∞–≤–∫–∞")
def handle_supply(m):
    bot.send_message(m.chat.id, "–ú–µ–Ω—é –ø–æ—Å—Ç–∞–≤–æ–∫:", reply_markup=supply_menu())

@bot.message_handler(func=lambda msg: msg.text == "üÜï –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")
def handle_add_supplier(m):
    uid = m.chat.id
    set_state(uid, "add_supplier")
    bot.send_message(uid, "–í–≤–µ–¥–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ; –ü—Ä–∞–≤–∏–ª–æ; –î–µ–¥–ª–∞–π–Ω–ó–∞–∫–∞–∑–∞(optional)</b>\n–ü—Ä–∏–º–µ—Ä—ã:\n–ö-–≠–∫—Å–ø—Ä–æ; –∫–∞–∂–¥—ã–µ 2 –¥–Ω—è; 14:00\n–ò–ü –í—ã–ª–µ–≥–∂–∞–Ω–∏–Ω–∞; shelf 72h; 14:00")

@bot.message_handler(func=lambda msg: msg.text == "üì¶ –ó–∞–∫–∞–∑—ã —Å–µ–≥–æ–¥–Ω—è")
def handle_today_orders(m):
    uid = m.chat.id
    date_s = today_str()
    rows = get_tasks_by_date(uid, date_s)
    orders = [r for r in rows if is_order_task(r.get("–ó–∞–¥–∞—á–∞",""))]
    if not orders:
        bot.send_message(uid, "–°–µ–≥–æ–¥–Ω—è –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç.", reply_markup=supply_menu()); return
    items = []
    for i,r in enumerate(orders, start=1):
        tid = sha_task_id(str(r.get("User ID")), r.get("–î–∞—Ç–∞",""), r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ó–∞–¥–∞—á–∞",""), r.get("–î–µ–¥–ª–∞–π–Ω",""))
        items.append((build_task_line(r, i), tid))
    kb = types.InlineKeyboardMarkup()
    for text, tid in items:
        kb.add(types.InlineKeyboardButton(text, callback_data=mk_cb("open", id=tid)))
    bot.send_message(uid, "–ó–∞–∫–∞–∑—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:", reply_markup=kb)

@bot.message_handler(func=lambda msg: msg.text == "üß† –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç")
def handle_ai(m):
    uid = m.chat.id
    set_state(uid, "assistant_text")
    bot.send_message(uid, "–ß—Ç–æ –Ω—É–∂–Ω–æ? (—Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–µ–Ω—å, –≤—ã–¥–µ–ª–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã, —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ —Ç.–¥.)")

@bot.message_handler(func=lambda msg: msg.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
def handle_settings(m):
    bot.send_message(m.chat.id, f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: <b>{TZ_NAME}</b>\n–£—Ç—Ä–µ–Ω–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç: <b>08:00</b>", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "‚¨Ö –ù–∞–∑–∞–¥")
def handle_back(m):
    clear_state(m.chat.id)
    bot.send_message(m.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

# ===================== –¢–ï–ö–°–¢–û–í–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø =====================
@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "adding_text")
def adding_text(m):
    uid = m.chat.id
    txt = m.text.strip()
    try:
        items = ai_parse_to_tasks(txt, uid)
        created = 0
        added_repeat = 0
        for it in items:
            date_s   = it["date"] or today_str()
            category = it["category"]
            subcat   = it["subcategory"]
            task     = it["task"]
            deadline = it["deadline"]
            repeat   = it["repeat"]
            source   = it["source"]
            add_task(date_s, category, subcat, task, deadline, uid, status="", repeat=repeat, source=source)
            created += 1
        bot.send_message(uid, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–¥–∞—á: {created}", reply_markup=main_menu())
        log_event(uid, "add_task_nlp", txt)
    except Exception as e:
        log.error("adding_text error: %s", e)
        bot.send_message(uid, "–ù–µ —Å–º–æ–≥ –¥–æ–±–∞–≤–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –∏–Ω–∞—á–µ.", reply_markup=main_menu())
    finally:
        clear_state(uid)

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "search_text")
def search_text(m):
    uid = m.chat.id
    q = m.text.strip().lower()
    rows = row_to_dict_list(ws_tasks)
    found = []
    for r in rows:
        if str(r.get("User ID")) != str(uid):
            continue
        hay = " ".join([str(r.get(k,"")) for k in TASKS_HEADERS]).lower()
        if q in hay:
            tid = sha_task_id(str(r.get("User ID")), r.get("–î–∞—Ç–∞",""), r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ó–∞–¥–∞—á–∞",""), r.get("–î–µ–¥–ª–∞–π–Ω",""))
            found.append((build_task_line(r), tid))
    if not found:
        bot.send_message(uid, "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=main_menu()); clear_state(uid); return
    total_pages = (len(found)+PAGE_SIZE-1)//PAGE_SIZE
    page = 1
    slice_items = found[(page-1)*PAGE_SIZE:page*PAGE_SIZE]
    kb = page_buttons(slice_items, page, total_pages, prefix_action="open")
    bot.send_message(uid, "–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:", reply_markup=kb)
    clear_state(uid)

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "done_text")
def done_text(m):
    uid = m.chat.id
    txt = m.text.strip().lower()
    # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É, –µ—Å–ª–∏ —Å–æ–≤–ø–∞–¥–∞–µ—Ç supplier/—Å–ª–æ–≤–æ, –∑–∞–∫—Ä—ã–≤–∞–µ–º
    supplier = guess_supplier(txt)
    rows = get_tasks_by_date(uid, today_str())
    changed = 0
    last_closed = None
    for r in rows:
        if r.get("–°—Ç–∞—Ç—É—Å","").lower() == "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ":
            continue
        t = (r.get("–ó–∞–¥–∞—á–∞","") or "").lower()
        if supplier and supplier.lower() not in t:
            continue
        if not supplier and not any(w in t for w in ["–∫-—ç–∫—Å–ø—Ä–æ","–≤—ã–ª–µ–≥–∂–∞–Ω","–∑–∞–∫–∞–∑","—Å–¥–µ–ª–∞–ª"]):
            continue
        tid = sha_task_id(str(r.get("User ID")), r.get("–î–∞—Ç–∞",""), r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ó–∞–¥–∞—á–∞",""), r.get("–î–µ–¥–ª–∞–π–Ω",""))
        ok, _ = mark_done_by_id(tid, uid)
        if ok:
            changed += 1
            last_closed = r

    msg = f"‚úÖ –û—Ç–º–µ—á–µ–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º: {changed}."
    # –ê–≤—Ç–æ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É
    if changed and last_closed and supplier:
        created = plan_next_by_supplier_rule(uid, supplier, last_closed.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è","–ö–æ—Ñ–µ–π–Ω—è"), last_closed.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), last_closed.get("–ó–∞–¥–∞—á–∞",""))
        if created:
            msg += "\nüîÆ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: " + ", ".join([f"–ø—Ä–∏–µ–º–∫–∞ {d1.strftime('%d.%m')} ‚Üí –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ {d2.strftime('%d.%m')}" for d1,d2 in created])
    bot.send_message(uid, msg, reply_markup=main_menu())
    clear_state(uid)

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "assistant_text")
def assistant_text(m):
    uid = m.chat.id
    answer = ai_assist_answer(m.text.strip(), uid)
    bot.send_message(uid, f"üß† {answer}", reply_markup=main_menu())
    clear_state(uid)

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "add_supplier")
def add_supplier_text(m):
    uid = m.chat.id
    txt = m.text.strip()
    try:
        # –§–æ—Ä–º–∞—Ç: "–ù–∞–∑–≤–∞–Ω–∏–µ; –ü—Ä–∞–≤–∏–ª–æ; –î–µ–¥–ª–∞–π–Ω"
        parts = [p.strip() for p in txt.split(";")]
        name = parts[0]
        rule = parts[1] if len(parts) > 1 else ""
        deadline = parts[2] if len(parts) > 2 else "14:00"
        # –ü–∏—à–µ–º –≤ –ª–∏—Å—Ç ¬´–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏¬ª (–º–∏–Ω–∏–º—É–º ‚Äî –ü–æ—Å—Ç–∞–≤—â–∏–∫, –ü—Ä–∞–≤–∏–ª–æ, –î–µ–¥–ª–∞–π–Ω–ó–∞–∫–∞–∑–∞)
        ws_suppliers.append_row([name, rule, deadline], value_input_option="USER_ENTERED")
        # –û–±–Ω–æ–≤–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ (–≥—Ä—É–±—ã–π –ø–∞—Ä—Å):
        load_supplier_rules_from_sheet()
        bot.send_message(uid, f"‚úÖ –ü–æ—Å—Ç–∞–≤—â–∏–∫ ¬´{name}¬ª –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=supply_menu())
    except Exception as e:
        log.error("add_supplier error: %s", e)
        bot.send_message(uid, "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞.", reply_markup=supply_menu())
    finally:
        clear_state(uid)

# ===================== INLINE CALLBACKS: –∫–∞—Ä—Ç–æ—á–∫–∞, —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –¥–µ–π—Å—Ç–≤–∏—è =====================
def render_task_card(uid, task_id):
    rows = row_to_dict_list(ws_tasks)
    idx = find_row_index_by_id(task_id, rows)
    if not idx:
        return "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", None
    r = rows[idx-2]
    date_s = r.get("–î–∞—Ç–∞","")
    header = f"<b>{r.get('–ó–∞–¥–∞—á–∞','')}</b>\n" \
             f"üìÖ {weekday_ru(datetime.strptime(date_s,'%d.%m.%Y'))} ‚Äî {date_s}\n" \
             f"üìÅ {r.get('–ö–∞—Ç–µ–≥–æ—Ä–∏—è','‚Äî')} / {r.get('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è','‚Äî')}\n" \
             f"‚è∞ –î–µ–¥–ª–∞–π–Ω: {r.get('–î–µ–¥–ª–∞–π–Ω') or '‚Äî'}\n" \
             f"üìù –°—Ç–∞—Ç—É—Å: {r.get('–°—Ç–∞—Ç—É—Å') or '‚Äî'}"
    kb = types.InlineKeyboardMarkup()
    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    kb.add(types.InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å", callback_data=mk_cb("done", id=task_id)))
    if is_order_task(r.get("–ó–∞–¥–∞—á–∞","")):
        kb.add(types.InlineKeyboardButton("üöö –ü—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É", callback_data=mk_cb("accept_delivery", id=task_id)))
    kb.add(types.InlineKeyboardButton("‚ûï –ü–æ–¥–∑–∞–¥–∞—á–∞", callback_data=mk_cb("add_sub", id=task_id)))
    kb.add(types.InlineKeyboardButton("‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data=mk_cb("remind_set", id=task_id)))
    kb.add(types.InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data=mk_cb("close_card")))
    return header, kb

@bot.callback_query_handler(func=lambda c: True)
def callbacks(c):
    uid = c.message.chat.id
    data = parse_cb(c.data) if c.data and c.data != "noop" else None
    if not data:
        bot.answer_callback_query(c.id); return

    a = data.get("a")

    if a == "page":
        page = int(data.get("p", 1))
        pa = data.get("pa")  # prefix_action
        # –ü–µ—Ä–µ—Å—Ç—Ä–æ–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–ª–æ–∂–Ω–æ –±–µ–∑ –ø–∞–º—è—Ç–∏,
        # –ø–æ—ç—Ç–æ–º—É –¥–µ–ª–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ¬´–°–µ–≥–æ–¥–Ω—è¬ª.
        date_s = today_str()
        rows = get_tasks_by_date(uid, date_s)
        items = []
        for r in rows:
            tid = sha_task_id(str(r.get("User ID")), r.get("–î–∞—Ç–∞",""), r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ó–∞–¥–∞—á–∞",""), r.get("–î–µ–¥–ª–∞–π–Ω",""))
            items.append((build_task_line(r), tid))
        total_pages = (len(items)+PAGE_SIZE-1)//PAGE_SIZE
        page = max(1, min(page, total_pages))
        slice_items = items[(page-1)*PAGE_SIZE:page*PAGE_SIZE]
        kb = page_buttons(slice_items, page, total_pages, prefix_action="open")
        try:
            bot.edit_message_reply_markup(uid, c.message.message_id, reply_markup=kb)
        except Exception:
            pass
        bot.answer_callback_query(c.id); return

    if a == "open":
        task_id = data.get("id")
        text, kb = render_task_card(uid, task_id)
        bot.answer_callback_query(c.id)
        if kb:
            bot.send_message(uid, text, reply_markup=kb)
        else:
            bot.send_message(uid, text)
        return

    if a == "close_card":
        bot.answer_callback_query(c.id, "–ó–∞–∫—Ä—ã—Ç–æ")
        try:
            bot.delete_message(uid, c.message.message_id)
        except Exception:
            pass
        return

    if a == "done":
        task_id = data.get("id")
        ok, r = mark_done_by_id(task_id, uid)
        if not ok:
            bot.answer_callback_query(c.id, "–ù–µ —Å–º–æ–≥ –æ—Ç–º–µ—Ç–∏—Ç—å", show_alert=True); return
        # –∞–≤—Ç–æ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –∑–∞–∫–∞–∑
        supplier = guess_supplier(r.get("–ó–∞–¥–∞—á–∞",""))
        msg = "‚úÖ –ì–æ—Ç–æ–≤–æ."
        if supplier:
            created = plan_next_by_supplier_rule(uid, supplier, r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è","–ö–æ—Ñ–µ–π–Ω—è"), r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ó–∞–¥–∞—á–∞",""))
            if created:
                msg += " –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∏–µ–º–∫–∞/—Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑."
        bot.answer_callback_query(c.id, msg, show_alert=True)
        # –û–±–Ω–æ–≤–∏–º –∫–∞—Ä—Ç–æ—á–∫—É
        text, kb = render_task_card(uid, task_id)
        if kb:
            bot.edit_message_text(text, uid, c.message.message_id, reply_markup=kb)
        else:
            bot.edit_message_text(text, uid, c.message.message_id)
        return

    if a == "accept_delivery":
        task_id = data.get("id")
        # —Å–ø—Ä–æ—Å–∏–º –¥–∞—Ç—É: —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞/—Å–≤–æ—è
        kb = types.InlineKeyboardMarkup()
        kb.row(
            types.InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data=mk_cb("accept_delivery_date", id=task_id, d="today")),
            types.InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞", callback_data=mk_cb("accept_delivery_date", id=task_id, d="tomorrow")),
        )
        kb.row(types.InlineKeyboardButton("üìÖ –î—Ä—É–≥–∞—è –¥–∞—Ç–∞", callback_data=mk_cb("accept_delivery_pick", id=task_id)))
        bot.answer_callback_query(c.id)
        bot.send_message(uid, "–ö–æ–≥–¥–∞ –ø—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É?", reply_markup=kb)
        return

    if a == "accept_delivery_pick":
        # –ø–æ–ø—Ä–æ—Å–∏–º –¥–∞—Ç—É —Ç–µ–∫—Å—Ç–æ–º
        task_id = data.get("id")
        set_state(uid, "pick_delivery_date", {"task_id": task_id})
        bot.answer_callback_query(c.id)
        bot.send_message(uid, "–í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return

    if a == "accept_delivery_date":
        task_id = data.get("id")
        when = data.get("d")
        rows = row_to_dict_list(ws_tasks)
        idx = find_row_index_by_id(task_id, rows)
        if not idx:
            bot.answer_callback_query(c.id, "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True); return
        r = rows[idx-2]
        if when == "today":
            date_s = today_str()
        else:
            date_s = today_str(now_local()+timedelta(days=1))
        # —Å–æ–∑–¥–∞—ë–º –ø–æ–¥–∑–∞–¥–∞—á—É ¬´–ü—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É ...¬ª —Å –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏/–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        supplier = guess_supplier(r.get("–ó–∞–¥–∞—á–∞","")) or "–ü–æ—Å—Ç–∞–≤–∫–∞"
        add_task(date_s, r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""),
                 f"üöö –ü—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É {supplier} ({normalize_tt_from_subcat(r.get('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è','')) or '‚Äî'})",
                 "10:00", uid, status="", repeat="", source=f"subtask:{task_id}")
        bot.answer_callback_query(c.id, f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –Ω–∞ {date_s}", show_alert=True)
        return

    if a == "add_sub":
        task_id = data.get("id")
        set_state(uid, "add_subtask_text", {"task_id": task_id})
        bot.answer_callback_query(c.id)
        bot.send_message(uid, "–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –ø–æ–¥–∑–∞–¥–∞—á–∏:")
        return

    if a == "remind_set":
        task_id = data.get("id")
        set_state(uid, "set_reminder", {"task_id": task_id})
        bot.answer_callback_query(c.id)
        bot.send_message(uid, "–ö–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å? –§–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (–ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è).")
        return

# ===================== –¢–ï–ö–°–¢ –î–õ–Ø –ü–û–î–ó–ê–î–ê–ß/–î–ê–¢–´/–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô =====================
@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "add_subtask_text")
def add_subtask_text(m):
    uid = m.chat.id
    data = get_data(uid)
    task_id = data.get("task_id")
    text = m.text.strip()
    rows = row_to_dict_list(ws_tasks)
    idx = find_row_index_by_id(task_id, rows)
    if not idx:
        bot.send_message(uid, "–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_menu()); clear_state(uid); return
    parent = rows[idx-2]
    # –ü–æ–¥–∑–∞–¥–∞—á—É –ø–∏—à–µ–º –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å –ò—Å—Ç–æ—á–Ω–∏–∫=subtask:<parent_id>
    add_task(parent.get("–î–∞—Ç–∞",""), parent.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""), parent.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""),
             f"‚Ä¢ {text}", parent.get("–î–µ–¥–ª–∞–π–Ω",""), uid, status="", repeat="", source=f"subtask:{task_id}")
    bot.send_message(uid, "–ü–æ–¥–∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.", reply_markup=main_menu())
    clear_state(uid)

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "pick_delivery_date")
def pick_delivery_date(m):
    uid = m.chat.id
    data = get_data(uid)
    task_id = data.get("task_id")
    ds = m.text.strip()
    try:
        datetime.strptime(ds, "%d.%m.%Y")
    except Exception:
        bot.send_message(uid, "–î–∞—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞. –ù—É–∂–µ–Ω —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì.", reply_markup=main_menu()); clear_state(uid); return
    rows = row_to_dict_list(ws_tasks)
    idx = find_row_index_by_id(task_id, rows)
    if not idx:
        bot.send_message(uid, "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_menu()); clear_state(uid); return
    r = rows[idx-2]
    supplier = guess_supplier(r.get("–ó–∞–¥–∞—á–∞","")) or "–ü–æ—Å—Ç–∞–≤–∫–∞"
    add_task(ds, r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""),
             f"üöö –ü—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É {supplier} ({normalize_tt_from_subcat(r.get('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è','')) or '‚Äî'})",
             "10:00", uid, status="", repeat="", source=f"subtask:{task_id}")
    bot.send_message(uid, f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –Ω–∞ {ds}.", reply_markup=main_menu())
    clear_state(uid)

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "set_reminder")
def set_reminder(m):
    uid = m.chat.id
    data = get_data(uid)
    task_id = data.get("task_id")
    t = m.text.strip()
    if not re.fullmatch(r"\d{1,2}:\d{2}", t):
        bot.send_message(uid, "–ù—É–∂–µ–Ω —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú.", reply_markup=main_menu()); clear_state(uid); return
    rows = row_to_dict_list(ws_tasks)
    idx = find_row_index_by_id(task_id, rows)
    if not idx:
        bot.send_message(uid, "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_menu()); clear_state(uid); return
    # –í ¬´–ò—Å—Ç–æ—á–Ω–∏–∫¬ª –¥–æ–ø–∏—à–µ–º –º–∞—Ä–∫–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: remind:HH:MM
    cur_source = rows[idx-2].get("–ò—Å—Ç–æ—á–Ω–∏–∫","") or ""
    new_source = (cur_source + "; " if cur_source else "") + f"remind:{t}"
    ws_tasks.update_cell(idx, TASKS_HEADERS.index("–ò—Å—Ç–æ—á–Ω–∏–∫")+1, new_source)
    bot.send_message(uid, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {t}.", reply_markup=main_menu())
    clear_state(uid)

# ===================== –ï–ñ–ï–î–ù–ï–í–ù–´–ô –î–ê–ô–î–ñ–ï–°–¢ –ò –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø =====================
NOTIFIED = set()  # set(task_id|date|time) –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π

def job_daily_digest():
    try:
        users = row_to_dict_list(ws_users)
        today = today_str()
        for u in users:
            uid = str(u.get("Telegram ID") or "").strip()
            if not uid:
                continue
            tasks = get_tasks_by_date(uid, today)
            if not tasks:
                continue
            text = f"üìÖ –ü–ª–∞–Ω –Ω–∞ {today}\n\n" + format_grouped(tasks, header_date=today)
            try:
                bot.send_message(uid, text)
            except Exception as e:
                log.error("send digest error %s", e)
    except Exception as e:
        log.error("job_daily_digest error %s", e)

def job_reminders():
    """–ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É —Å–º–æ—Ç—Ä–∏–º –∑–∞–¥–∞—á–∏ —Å –º–µ—Ç–∫–æ–π remind:HH:MM –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."""
    try:
        today = today_str()
        rows = row_to_dict_list(ws_tasks)
        for r in rows:
            if r.get("–î–∞—Ç–∞") != today: 
                continue
            src = (r.get("–ò—Å—Ç–æ—á–Ω–∏–∫") or "")
            if "remind:" not in src:
                continue
            matches = re.findall(r"remind:(\d{1,2}:\d{2})", src)
            for tm in matches:
                key = sha_task_id(str(r.get("User ID")), r.get("–î–∞—Ç–∞",""), r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ó–∞–¥–∞—á–∞",""), r.get("–î–µ–¥–ª–∞–π–Ω","")) + "|" + today + "|" + tm
                if key in NOTIFIED:
                    continue
                # –µ—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è >= tm ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–¥–∏–Ω —Ä–∞–∑
                try:
                    hh, mm = map(int, tm.split(":"))
                    nowt = now_local().time()
                    if (nowt.hour, nowt.minute) >= (hh, mm):
                        bot.send_message(r.get("User ID"), f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {r.get('–ö–∞—Ç–µ–≥–æ—Ä–∏—è','')}/{r.get('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è','')} ‚Äî {r.get('–ó–∞–¥–∞—á–∞','')} (–¥–æ {r.get('–î–µ–¥–ª–∞–π–Ω') or '‚Äî'})")
                        NOTIFIED.add(key)
                except Exception:
                    pass
    except Exception as e:
        log.error("job_reminders error %s", e)

def scheduler_thread():
    schedule.clear()
    schedule.every().day.at("08:00").do(job_daily_digest)
    schedule.every(1).minutes.do(job_reminders)
    while True:
        schedule.run_pending()
        time.sleep(1)

# ===================== WEBHOOK / FLASK =====================
app = Flask(__name__)

@app.route("/" + API_TOKEN, methods=["POST"])
def webhook():
    try:
        update = request.get_data().decode("utf-8")
        upd = types.Update.de_json(update)
        bot.process_new_updates([upd])
    except Exception as e:
        log.error("Webhook error: %s", e)
    return "OK", 200

@app.route("/")
def home():
    return "Bot is running!"

# ===================== START =====================
if __name__ == "__main__":
    if not API_TOKEN or not WEBHOOK_URL:
        raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω—ã TELEGRAM_TOKEN –∏–ª–∏ WEBHOOK_BASE")

    try:
        bot.remove_webhook()
    except Exception:
        pass
    time.sleep(0.5)
    bot.set_webhook(url=WEBHOOK_URL)

    threading.Thread(target=scheduler_thread, daemon=True).start()
    app.run(host="0.0.0.0", port=int(os.getenv("PORT","5000")))
