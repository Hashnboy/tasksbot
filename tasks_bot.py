import os
import re
import json
import time
import pytz
import queue
import gspread
import logging
import schedule
import threading
from datetime import datetime, timedelta
from flask import Flask, request
from telebot import TeleBot, types

# =========================
#   –û–ö–†–£–ñ–ï–ù–ò–ï / –ù–ê–°–¢–†–û–ô–ö–ò
# =========================
API_TOKEN        = os.getenv("TELEGRAM_TOKEN")
TABLE_URL        = os.getenv("GOOGLE_SHEETS_URL")
CREDENTIALS_FILE = os.getenv("GOOGLE_CREDENTIALS_JSON", "/etc/secrets/credentials.json")
WEBHOOK_BASE     = os.getenv("WEBHOOK_BASE")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: https://<app>.onrender.com
OPENAI_API_KEY   = os.getenv("OPENAI_API_KEY")

if not API_TOKEN or not TABLE_URL or not WEBHOOK_BASE:
    print("[WARN] –ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è. –ù—É–∂–Ω—ã: TELEGRAM_TOKEN, GOOGLE_SHEETS_URL, WEBHOOK_BASE")

WEBHOOK_URL = f"{WEBHOOK_BASE}/{API_TOKEN}"

LOCAL_TZ = pytz.timezone("Europe/Moscow")  # —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ, –∫–∞–∫ —Ç—ã –ø—Ä–æ—Å–∏–ª

logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
log = logging.getLogger("tasksbot")

# =========================
#   TELEGRAM / SHEETS
# =========================
bot = TeleBot(API_TOKEN, parse_mode="HTML")

try:
    gc = gspread.service_account(filename=CREDENTIALS_FILE)
    sh = gc.open_by_url(TABLE_URL)
except Exception as e:
    log.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets", exc_info=True)
    raise

# –û—Å–Ω–æ–≤–Ω—ã–µ –ª–∏—Å—Ç—ã-–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
DIRECTION_SHEETS = {
    "–ö–æ—Ñ–µ–π–Ω—è": sh.worksheet("–ö–æ—Ñ–µ–π–Ω—è"),
    "–¢–∞–±–∞—á–∫–∞": sh.worksheet("–¢–∞–±–∞—á–∫–∞"),
    "WB"     : sh.worksheet("WB"),
    "–õ–∏—á–Ω–æ–µ" : sh.worksheet("–õ–∏—á–Ω–æ–µ"),
}
WS_SUPPLIERS = sh.worksheet("–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏")
WS_USERS     = sh.worksheet("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
WS_LOGS      = sh.worksheet("–õ–æ–≥–∏")

TASK_HEADERS = ["–î–∞—Ç–∞","–ö–∞—Ç–µ–≥–æ—Ä–∏—è","–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è","–ó–∞–¥–∞—á–∞","–î–µ–¥–ª–∞–π–Ω","User ID","–°—Ç–∞—Ç—É—Å","–ü–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å","–ò—Å—Ç–æ—á–Ω–∏–∫"]
SUPP_HEADERS = ["–ü–æ—Å—Ç–∞–≤—â–∏–∫","–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ","–¢–¢","–ü–µ—Ä–∏–æ–¥_–¥–Ω–µ–π","–î–æ—Å—Ç–∞–≤–∫–∞_–¥–Ω–µ–π","–•—Ä–∞–Ω–µ–Ω–∏–µ_–¥–Ω–µ–π","–°—Ç–∞—Ä—Ç_—Ü–∏–∫–ª–∞","–ê–≤—Ç–æ","–ê–∫—Ç–∏–≤–µ–Ω"]

def ensure_headers(ws, expected):
    try:
        head = ws.row_values(1)
        if head != expected:
            log.warning(f"–ö–æ–ª–æ–Ω–∫–∏ –ª–∏—Å—Ç–∞ '{ws.title}' –æ—Ç–ª–∏—á–∞—é—Ç—Å—è.\n–û–∂–∏–¥–∞–ª–∏—Å—å: {expected}\n–§–∞–∫—Ç–∏—á–µ—Å–∫–∏: {head}")
    except Exception as e:
        log.error(f"–ù–µ —Å–º–æ–≥ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ {ws.title}: {e}")

for name, ws in DIRECTION_SHEETS.items():
    ensure_headers(ws, TASK_HEADERS)
ensure_headers(WS_SUPPLIERS, SUPP_HEADERS)

# =========================
#          –£—Ç–∏–ª–∏—Ç—ã
# =========================
def now_local():
    return datetime.now(LOCAL_TZ)

def dstr(dt):
    return dt.strftime("%d.%m.%Y")

def weekday_ru(dt: datetime) -> str:
    return ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫","–í—Ç–æ—Ä–Ω–∏–∫","–°—Ä–µ–¥–∞","–ß–µ—Ç–≤–µ—Ä–≥","–ü—è—Ç–Ω–∏—Ü–∞","–°—É–±–±–æ—Ç–∞","–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"][dt.weekday()]

def log_event(user_id, action, payload=""):
    try:
        WS_LOGS.append_row([datetime.utcnow().isoformat(), str(user_id), action, payload], value_input_option="USER_ENTERED")
    except Exception as e:
        log.error(f"–õ–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")

def add_task(ws, date_s, category, subcat, text, deadline, user_id, status="", repeat="", source="—Ä—É—á–Ω–æ–π"):
    row = [date_s, category, subcat, text, deadline, str(user_id), status, repeat, source]
    ws.append_row(row, value_input_option="USER_ENTERED")

def parse_tt_list(tt_cell: str):
    # "–¶–µ–Ω—Ç—Ä,–ü–æ–ª–µ—Ç" -> ["–¶–µ–Ω—Ç—Ä","–ü–æ–ª–µ—Ç"]
    return [t.strip() for t in (tt_cell or "").split(",") if t.strip()]

def get_all_tasks_for_date(user_id, date_s):
    out = []
    for direction, ws in DIRECTION_SHEETS.items():
        try:
            rows = ws.get_all_records()
        except Exception as e:
            log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–∏—Å—Ç {direction}: {e}")
            rows = []
        for r in rows:
            if r.get("–î–∞—Ç–∞") == date_s and str(r.get("User ID")) == str(user_id):
                r["_direction"] = direction  # –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –≤ –≤—ã–≤–æ–¥–µ
                out.append(r)
    return out

def get_all_tasks_for_week(user_id, start_dt=None):
    if not start_dt:
        start_dt = now_local().date()
    period = {dstr(start_dt + timedelta(days=i)) for i in range(7)}
    out = []
    for direction, ws in DIRECTION_SHEETS.items():
        try:
            rows = ws.get_all_records()
        except Exception as e:
            log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–∏—Å—Ç {direction}: {e}")
            rows = []
        for r in rows:
            if r.get("–î–∞—Ç–∞") in period and str(r.get("User ID")) == str(user_id):
                r["_direction"] = direction
                out.append(r)
    return out

def format_tasks_grouped(tasks, header_date=None):
    if not tasks:
        return "–ó–∞–¥–∞—á –Ω–µ—Ç."

    # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ: –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è, –¥–µ–¥–ª–∞–π–Ω, —Ç–µ–∫—Å—Ç
    def keyf(r):
        dl = r.get("–î–µ–¥–ª–∞–π–Ω") or ""
        try:
            dl_k = datetime.strptime(dl, "%H:%M").time()
        except:
            dl_k = datetime.min.time()
        return (r.get("_direction",""), r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), dl_k, r.get("–ó–∞–¥–∞—á–∞",""))

    tasks = sorted(tasks, key=keyf)

    out = []
    if header_date:
        dt = datetime.strptime(header_date, "%d.%m.%Y")
        out.append(f"‚Ä¢ {weekday_ru(dt)} ‚Äî {header_date}\n")

    cur_dir = cur_cat = cur_sub = None
    for r in tasks:
        d  = r.get("_direction","")
        c  = r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è","")
        sc = r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è","")
        txt= r.get("–ó–∞–¥–∞—á–∞","")
        dl = r.get("–î–µ–¥–ª–∞–π–Ω","") or ""
        st = (r.get("–°—Ç–∞—Ç—É—Å","") or "").lower()
        rep= (r.get("–ü–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å","") or "")
        icon = "‚úÖ" if st == "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ" else ("üîÅ" if rep else "‚¨ú")

        if d != cur_dir:
            out.append(f"üìÇ <b>{d}</b>")
            cur_dir = d; cur_cat = cur_sub = None
        if c != cur_cat:
            out.append(f"  ‚îî <b>{c}</b>")
            cur_cat = c; cur_sub = None
        if sc != cur_sub:
            out.append(f"    ‚îî <i>{sc or '‚Äî'}</i>")
            cur_sub = sc
        line = f"      {icon} {txt}"
        if dl:
            line += f"  <i>(–¥–æ {dl})</i>"
        out.append(line)
    return "\n".join(out)

# =========================
#  –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏ ‚Üí –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è
# =========================
def load_suppliers(active_only=True):
    rows = WS_SUPPLIERS.get_all_records()
    out = []
    for r in rows:
        if active_only and (str(r.get("–ê–∫—Ç–∏–≤–µ–Ω") or "").strip().lower() not in ("–¥–∞","1","y","true","on")):
            continue
        out.append(r)
    return out

def plan_from_supplier_row(r, target_date: datetime):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–∞ target_date,
    –∏—Å—Ö–æ–¥—è –∏–∑ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞.
    –ü–æ–ª—è: –ü–µ—Ä–∏–æ–¥_–¥–Ω–µ–π, –î–æ—Å—Ç–∞–≤–∫–∞_–¥–Ω–µ–π, –•—Ä–∞–Ω–µ–Ω–∏–µ_–¥–Ω–µ–π, –°—Ç–∞—Ä—Ç_—Ü–∏–∫–ª–∞, –ê–≤—Ç–æ
    –õ–æ–≥–∏–∫–∞:
      - –µ—Å–ª–∏ –ê–≤—Ç–æ=–î–∞, –∏ (target_date - –°—Ç–∞—Ä—Ç) % –ü–µ—Ä–∏–æ–¥_–¥–Ω–µ–π == 0 ‚Üí —ç—Ç–æ –¥–µ–Ω—å –∑–∞–∫–∞–∑–∞.
      - –≤ –¥–µ–Ω—å –∑–∞–∫–∞–∑–∞ —Å–æ–∑–¥–∞—ë–º ¬´–ó–∞–∫—É–ø–∫–∞¬ª (–¥–æ 14:00 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é).
      - –µ—Å–ª–∏ –î–æ—Å—Ç–∞–≤–∫–∞_–¥–Ω–µ–π > 0 ‚Üí –Ω–∞ (–∑–∞–∫–∞–∑+–¥–æ—Å—Ç–∞–≤–∫–∞) —Å–æ–∑–¥–∞—ë–º ¬´–ü–æ—Å—Ç–∞–≤–∫–∞ / –ü—Ä–∏–µ–º–∫–∞¬ª.
      - –µ—Å–ª–∏ –•—Ä–∞–Ω–µ–Ω–∏–µ_–¥–Ω–µ–π > 0 ‚Üí ¬´—Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑¬ª —Å—Ç–∞–≤–∏—Ç —Ü–∏–∫–ª —Ç–∞–∫, —á—Ç–æ–±—ã –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –¥–æ—Å—Ç–∞–≤–∫–∞–º–∏ ‚âà –•—Ä–∞–Ω–µ–Ω–∏–µ_–¥–Ω–µ–π.
        (–Ω–æ –±–∞–∑–æ–≤–æ —Ü–∏–∫–ª —É–∂–µ –∑–∞–¥–∞–Ω –ü–µ—Ä–∏–æ–¥_–¥–Ω–µ–π ‚Äî —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ)
    """
    try:
        start = datetime.strptime(str(r.get("–°—Ç–∞—Ä—Ç_—Ü–∏–∫–ª–∞") or "").strip(), "%d.%m.%Y").date()
    except:
        # –µ—Å–ª–∏ –Ω–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –¥–∞—Ç—ã ‚Äî –ø—Ä–∏–≤—è–∑–∫–∞ –∫ 01.01.2025
        start = datetime(2025,1,1).date()

    period = int(r.get("–ü–µ—Ä–∏–æ–¥_–¥–Ω–µ–π") or 0)
    delivery = int(r.get("–î–æ—Å—Ç–∞–≤–∫–∞_–¥–Ω–µ–π") or 0)
    # shelf = int(r.get("–•—Ä–∞–Ω–µ–Ω–∏–µ_–¥–Ω–µ–π") or 0)  # –ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —è–≤–Ω–æ
    auto = str(r.get("–ê–≤—Ç–æ") or "").strip().lower() in ("–¥–∞","1","y","true","on")

    if not auto or period <= 0:
        return []  # –Ω–µ –∞–≤—Ç–æ ‚Äî –±–æ—Ç –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ç

    delta = (target_date.date() - start).days
    if delta < 0:
        return []
    is_order_day = (delta % period == 0)

    if not is_order_day:
        # –≤–æ–∑–º–æ–∂–Ω–æ —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å ¬´–ø—Ä–∏–µ–º–∫–∏¬ª
        if delivery > 0 and (delta - delivery) >= 0 and ((delta - delivery) % period == 0):
            # –∑–Ω–∞—á–∏—Ç –∑–∞–∫–∞–∑ –±—ã–ª "delivery" –¥–Ω–µ–π –Ω–∞–∑–∞–¥
            # —Å–æ–∑–¥–∞—ë–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏–µ–º–∫—É
            return [{
                "–¢–∏–ø":"–ü–æ—Å—Ç–∞–≤–∫–∞",
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è":"–ü–æ—Å—Ç–∞–≤–∫–∞",
                "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è":"–ü—Ä–∏–µ–º–∫–∞",
                "–ó–∞–¥–∞—á–∞": f"–ü—Ä–∏–µ–º–∫–∞ {r.get('–ü–æ—Å—Ç–∞–≤—â–∏–∫')} ({r.get('–¢–¢')})",
                "–î–µ–¥–ª–∞–π–Ω":"11:00"
            }]
        return []

    # –î–µ–Ω—å –∑–∞–∫–∞–∑–∞ ‚Äî —Å–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑; –ø—Ä–∏–µ–º–∫—É —Å–æ–∑–¥–∞–¥–∏–º –æ—Ç–¥–µ–ª—å–Ω–æ –≤ –¥–µ–Ω—å –¥–æ—Å—Ç–∞–≤–∫–∏
    return [{
        "–¢–∏–ø":"–ó–∞–∫—É–ø–∫–∞",
        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è":"–ó–∞–∫—É–ø–∫–∞",
        "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è": r.get("–ü–æ—Å—Ç–∞–≤—â–∏–∫"),
        "–ó–∞–¥–∞—á–∞": f"–ó–∞–∫–∞–∑ {r.get('–ü–æ—Å—Ç–∞–≤—â–∏–∫')} ({r.get('–¢–¢')})",
        "–î–µ–¥–ª–∞–π–Ω":"14:00"
    }]

def upsert_tasks_for_date_from_suppliers(target_dt: datetime, user_id):
    """
    –î–ª—è –¥–∞—Ç—ã target_dt: –ø—Ä–æ–π—Ç–∏—Å—å –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º –∏ —Å–æ–∑–¥–∞—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–¥–∞—á–∏
    –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –ª–∏—Å—Ç–∞—Ö-–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö, –±–µ–∑ –¥—É–±–ª–µ–π.
    """
    created = 0
    suppliers = load_suppliers(active_only=True)
    date_s = dstr(target_dt)

    # –°–Ω–∏–º–µ–º —Å–ª–µ–ø–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á –Ω–∞ –¥–∞—Ç—É, —á—Ç–æ–±—ã –Ω–µ –ø–ª–æ–¥–∏—Ç—å –¥—É–±–ª–∏
    existing_by_dir = {}
    for direction, ws in DIRECTION_SHEETS.items():
        try:
            rows = ws.get_all_records()
        except:
            rows = []
        existing_by_dir[direction] = {(r.get("–î–∞—Ç–∞"), r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è"), r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è"), r.get("–ó–∞–¥–∞—á–∞"), str(r.get("User ID"))) for r in rows}

    for r in suppliers:
        direction = (r.get("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ") or "").strip()
        tt_list = parse_tt_list(r.get("–¢–¢") or "")
        if direction not in DIRECTION_SHEETS:
            continue
        ws = DIRECTION_SHEETS[direction]
        plan = plan_from_supplier_row(r, target_dt)
        if not plan:
            continue

        for tt in tt_list or ["‚Äî"]:
            for item in plan:
                key = (date_s, item["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"], tt, item["–ó–∞–¥–∞—á–∞"].replace("({})".format(r.get("–¢–¢")), f"({tt})"), str(user_id))
                # —Å–æ–±–µ—Ä—ë–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç
                task_text = item["–ó–∞–¥–∞—á–∞"].replace(str(r.get("–¢–¢")), tt)
                dedl = item["–î–µ–¥–ª–∞–π–Ω"]
                # –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –∫–∞–∫ –¢–¢)
                dedup = (date_s, item["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"], tt, task_text, str(user_id))
                if dedup in existing_by_dir[direction]:
                    continue
                add_task(ws, date_s, item["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"], tt, task_text, dedl, user_id, status="", repeat="–∞–≤—Ç–æ", source="–ø–æ—Å—Ç–∞–≤—â–∏–∫–∏")
                existing_by_dir[direction].add(dedup)
                created += 1
    return created

# =========================
#           –ú–µ–Ω—é
# =========================
def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üìÖ –ó–∞–¥–∞—á–∏","üöö –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏")
    kb.row("ü§ñ GPT –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç","‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    return kb

def tasks_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üìÖ –°–µ–≥–æ–¥–Ω—è","üìÜ –ù–µ–¥–µ–ª—è")
    kb.row("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É","‚úÖ –Ø —Å–¥–µ–ª–∞–ª‚Ä¶")
    kb.row("üîÅ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–¥–µ–ª—é","‚¨Ö –ù–∞–∑–∞–¥")
    return kb

def suppliers_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞","üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")
    kb.row("üîÅ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–¥–µ–ª—é","‚¨Ö –ù–∞–∑–∞–¥")
    return kb

def back_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("‚¨Ö –ù–∞–∑–∞–¥")
    return kb

def choose_direction_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.row("–ö–æ—Ñ–µ–π–Ω—è","–¢–∞–±–∞—á–∫–∞")
    kb.row("WB","–õ–∏—á–Ω–æ–µ")
    kb.row("–û—Ç–º–µ–Ω–∞")
    return kb

def choose_tt_kb(direction):
    # —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ—á–∫–∏: –ö–æ—Ñ–µ–π–Ω—è: –¶–µ–Ω—Ç—Ä, –ü–æ–ª–µ—Ç; –¢–∞–±–∞—á–∫–∞: –¶–µ–Ω—Ç—Ä, –ü–æ–ª–µ—Ç, –ö–ª–∏–º–æ–≤–æ
    tts = []
    if direction == "–ö–æ—Ñ–µ–π–Ω—è":
        tts = ["–¶–µ–Ω—Ç—Ä","–ü–æ–ª–µ—Ç"]
    elif direction == "–¢–∞–±–∞—á–∫–∞":
        tts = ["–¶–µ–Ω—Ç—Ä","–ü–æ–ª–µ—Ç","–ö–ª–∏–º–æ–≤–æ"]
    else:
        tts = ["‚Äî"]
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for t in tts:
        kb.add(t)
    kb.add("–ì–æ—Ç–æ–≤–æ","–û—Ç–º–µ–Ω–∞")
    return kb

# =========================
#         FSM
# =========================
STATE = {}
BUFFER = {}

def set_state(uid, s, data=None):
    STATE[uid] = s
    if data is not None:
        BUFFER[uid] = data

def clr_state(uid):
    STATE.pop(uid, None)
    BUFFER.pop(uid, None)

# =========================
#         –•–µ–Ω–¥–ª–µ—Ä—ã
# =========================
app = Flask(__name__)

@bot.message_handler(commands=["start"])
def cmd_start(m):
    bot.send_message(m.chat.id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "‚¨Ö –ù–∞–∑–∞–¥")
def back(m):
    clr_state(m.chat.id)
    bot.send_message(m.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

# -------- –†–∞–∑–¥–µ–ª "–ó–∞–¥–∞—á–∏"
@bot.message_handler(func=lambda msg: msg.text == "üìÖ –ó–∞–¥–∞—á–∏")
def go_tasks(m):
    bot.send_message(m.chat.id, "–†–∞–∑–¥–µ–ª ¬´–ó–∞–¥–∞—á–∏¬ª", reply_markup=tasks_menu())

@bot.message_handler(func=lambda msg: msg.text == "üìÖ –°–µ–≥–æ–¥–Ω—è")
def today(m):
    uid = m.chat.id
    # –∞–≤—Ç–æ–≥–µ–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
    upsert_tasks_for_date_from_suppliers(now_local(), uid)
    date_s = dstr(now_local())
    tasks = get_all_tasks_for_date(uid, date_s)
    bot.send_message(uid, f"üìÖ –ó–∞–¥–∞—á–∏ –Ω–∞ {date_s}\n\n" + format_tasks_grouped(tasks, header_date=date_s), reply_markup=tasks_menu())

@bot.message_handler(func=lambda msg: msg.text == "üìÜ –ù–µ–¥–µ–ª—è")
def week(m):
    uid = m.chat.id
    # –∞–≤—Ç–æ–≥–µ–Ω –Ω–∞ 7 –¥–Ω–µ–π –≤–ø–µ—Ä—ë–¥
    for i in range(7):
        upsert_tasks_for_date_from_suppliers(now_local()+timedelta(days=i), uid)
    tasks = get_all_tasks_for_week(uid)
    if not tasks:
        bot.send_message(uid, "–ù–∞ –Ω–µ–¥–µ–ª—é –∑–∞–¥–∞—á –Ω–µ—Ç.", reply_markup=tasks_menu()); return
    by_day = {}
    for r in tasks:
        by_day.setdefault(r["–î–∞—Ç–∞"], []).append(r)
    parts = []
    for d in sorted(by_day.keys(), key=lambda s: datetime.strptime(s, "%d.%m.%Y")):
        parts.append(format_tasks_grouped(by_day[d], header_date=d))
        parts.append("")
    bot.send_message(uid, "\n".join(parts), reply_markup=tasks_menu())

@bot.message_handler(func=lambda msg: msg.text == "üîÅ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–¥–µ–ª—é")
def gen_week(m):
    uid = m.chat.id
    total = 0
    for i in range(7):
        total += upsert_tasks_for_date_from_suppliers(now_local()+timedelta(days=i), uid)
    bot.send_message(uid, f"–ì–æ—Ç–æ–≤–æ. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–¥–∞—á: {total}", reply_markup=tasks_menu())

@bot.message_handler(func=lambda msg: msg.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
def add_task_start(m):
    set_state(m.chat.id, "add_task_direction", {"task":{}})
    bot.send_message(m.chat.id, "–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", reply_markup=choose_direction_kb())

@bot.message_handler(func=lambda msg: STATE.get(msg.chat.id) == "add_task_direction")
def add_task_direction(m):
    uid = m.chat.id
    direction = m.text.strip()
    if direction not in DIRECTION_SHEETS:
        bot.send_message(uid, "–í—ã–±–µ—Ä–∏ –∏–∑ –∫–Ω–æ–ø–æ–∫.", reply_markup=choose_direction_kb()); return
    BUFFER[uid]["task"]["direction"] = direction
    set_state(uid, "add_task_category", BUFFER[uid])
    bot.send_message(uid, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è? (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ó–∞–∫—É–ø–∫–∞, –ü–æ—Å—Ç–∞–≤–∫–∞, –û–±—â–µ–µ)", reply_markup=back_menu())

@bot.message_handler(func=lambda msg: STATE.get(msg.chat.id) == "add_task_category")
def add_task_category(m):
    uid = m.chat.id
    cat = m.text.strip()
    BUFFER[uid]["task"]["category"] = cat
    set_state(uid, "add_task_subcat", BUFFER[uid])
    bot.send_message(uid, "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ö-–≠–∫—Å–ø—Ä–æ / –ò–ü –í—ã–ª–µ–≥–∂–∞–Ω–∏–Ω–∞ / –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ ‚Äî –¶–µ–Ω—Ç—Ä):", reply_markup=back_menu())

@bot.message_handler(func=lambda msg: STATE.get(msg.chat.id) == "add_task_subcat")
def add_task_subcat(m):
    uid = m.chat.id
    sub = m.text.strip()
    BUFFER[uid]["task"]["subcat"] = sub
    set_state(uid, "add_task_text", BUFFER[uid])
    bot.send_message(uid, "–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:", reply_markup=back_menu())

@bot.message_handler(func=lambda msg: STATE.get(msg.chat.id) == "add_task_text")
def add_task_text(m):
    uid = m.chat.id
    text = m.text.strip()
    BUFFER[uid]["task"]["text"] = text
    set_state(uid, "add_task_deadline", BUFFER[uid])
    bot.send_message(uid, "–î–µ–¥–ª–∞–π–Ω (–ß–ß:–ú–ú) –∏–ª–∏ ¬´‚Äî¬ª:", reply_markup=back_menu())

@bot.message_handler(func=lambda msg: STATE.get(msg.chat.id) == "add_task_deadline")
def add_task_deadline(m):
    uid = m.chat.id
    ded = m.text.strip()
    if ded == "‚Äî": ded = ""
    BUFFER[uid]["task"]["deadline"] = ded
    set_state(uid, "add_task_date", BUFFER[uid])
    bot.send_message(uid, "–î–∞—Ç–∞ (–î–î.–ú–ú.–ì–ì–ì–ì) –∏–ª–∏ ¬´—Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞¬ª:", reply_markup=back_menu())

@bot.message_handler(func=lambda msg: STATE.get(msg.chat.id) == "add_task_date")
def add_task_date(m):
    uid = m.chat.id
    val = m.text.strip().lower()
    if val == "—Å–µ–≥–æ–¥–Ω—è":
        date_s = dstr(now_local())
    elif val == "–∑–∞–≤—Ç—Ä–∞":
        date_s = dstr(now_local()+timedelta(days=1))
    else:
        try:
            datetime.strptime(val, "%d.%m.%Y")
            date_s = val
        except:
            bot.send_message(uid, "–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ ¬´—Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞¬ª.", reply_markup=back_menu()); return

    t = BUFFER[uid]["task"]
    ws = DIRECTION_SHEETS[t["direction"]]
    add_task(ws, date_s, t["category"], t["subcat"], t["text"], t["deadline"], uid, status="", repeat="", source="—Ä—É—á–Ω–æ–π")
    bot.send_message(uid, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ {t['direction']} –Ω–∞ {date_s}:\n‚Ä¢ {t['category']} / {t['subcat']} ‚Äî {t['text']} (–¥–æ {t['deadline'] or '‚Äî'})", reply_markup=tasks_menu())
    log_event(uid, "add_task", json.dumps(t, ensure_ascii=False))
    clr_state(uid)

@bot.message_handler(func=lambda msg: msg.text == "‚úÖ –Ø —Å–¥–µ–ª–∞–ª‚Ä¶")
def done_start(m):
    set_state(m.chat.id, "done_text", {})
    bot.send_message(m.chat.id, "–ù–∞–ø–∏—à–∏ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ. –ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ —Å–¥–µ–ª–∞–ª –∑–∞–∫–∞–∑—ã –∫-—ç–∫—Å–ø—Ä–æ —Ü–µ–Ω—Ç—Ä\n‚Ä¢ —Å–¥–µ–ª–∞–ª –≤—Å–µ –∑–∞–∫–∞–∑—ã –∫-—ç–∫—Å–ø—Ä–æ\n‚Ä¢ –ø—Ä–∏–Ω—è–ª –ø–æ—Å—Ç–∞–≤–∫—É –ò–ü –í—ã–ª–µ–≥–∂–∞–Ω–∏–Ω–∞", reply_markup=back_menu())

@bot.message_handler(func=lambda msg: STATE.get(msg.chat.id) == "done_text")
def done_text(m):
    uid = m.chat.id
    txt = m.text.strip().lower()

    # –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä: –∏—â–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞/–¢–¢/—Ç–∏–ø
    supplier = None
    if "–∫-—ç–∫—Å–ø—Ä–æ" in txt or "k-exp" in txt: supplier = "–ö-–≠–∫—Å–ø—Ä–æ"
    elif "–≤—ã–ª–µ–≥–∂–∞–Ω" in txt: supplier = "–ò–ü –í—ã–ª–µ–≥–∂–∞–Ω–∏–Ω–∞"

    tt = None
    if "—Ü–µ–Ω—Ç—Ä" in txt: tt = "–¶–µ–Ω—Ç—Ä"
    if "–ø–æ–ª–µ—Ç" in txt or "–ø–æ–ª—ë—Ç" in txt: tt = "–ü–æ–ª–µ—Ç"
    if "–∫–ª–∏–º–æ–≤" in txt: tt = "–ö–ª–∏–º–æ–≤–æ"

    today_s = dstr(now_local())
    changed = 0

    # –ø—Ä–æ–π—Ç–∏ –≤—Å–µ –ª–∏—Å—Ç—ã –∏ –æ—Ç–º–µ—Ç–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    for direction, ws in DIRECTION_SHEETS.items():
        rows = ws.get_all_records()
        for idx, r in enumerate(rows, start=2):  # —Å 2-–π —Å—Ç—Ä–æ–∫–∏
            if r.get("–î–∞—Ç–∞") != today_s: continue
            if str(r.get("User ID")) != str(uid): continue
            text = (r.get("–ó–∞–¥–∞—á–∞") or "").lower()
            subc = (r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è") or "")
            tt_match = (tt is None) or (subc.strip().lower() == tt.strip().lower()) or (tt in text)
            supp_match = (supplier is None) or (supplier.lower() in text)
            if tt_match and supp_match and r.get("–°—Ç–∞—Ç—É—Å","").lower() != "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ":
                ws.update_cell(idx, TASK_HEADERS.index("–°—Ç–∞—Ç—É—Å")+1, "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
                changed += 1

    # + –∞–≤—Ç–æ–≥–µ–Ω –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫
    extra = ""
    if supplier:
        # —Å–æ–∑–¥–∞—ë–º –ø—Ä–∏–µ–º–∫—É/—Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑ –ø–æ –¥–∞—Ç–µ (–∫–∞–∫ –º–∏–Ω–∏–º—É–º –¥–æ—Å—Ç–∞–≤–∫–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –∏ —Ç.–ø. —Å–æ–∑–¥–∞–¥—É—Ç—Å—è –≤ —Å–≤–æ–∏ –¥–Ω–∏ –∞–≤—Ç–æ-–ø–ª–∞–Ω–æ–º)
        for i in range(1,3):  # –ø—Ä–æ–≥–æ–Ω—è–µ–º 2 –¥–Ω—è –≤–ø–µ—Ä—ë–¥, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–µ–º–∫—É
            upsert_tasks_for_date_from_suppliers(now_local()+timedelta(days=i), uid)
        extra = "\nüîÆ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤."

    bot.send_message(uid, f"‚úÖ –û—Ç–º–µ—á–µ–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º: {changed}.{extra}", reply_markup=tasks_menu())
    log_event(uid, "done_free_text", txt)
    clr_state(uid)

# -------- –†–∞–∑–¥–µ–ª "–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏"
@bot.message_handler(func=lambda msg: msg.text == "üöö –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏")
def go_suppliers(m):
    bot.send_message(m.chat.id, "–†–∞–∑–¥–µ–ª ¬´–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏¬ª", reply_markup=suppliers_menu())

@bot.message_handler(func=lambda msg: msg.text == "üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")
def list_suppliers(m):
    rows = load_suppliers(active_only=False)
    if not rows:
        bot.send_message(m.chat.id, "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.", reply_markup=suppliers_menu()); return
    lines = []
    for r in rows[:50]:
        lines.append(f"‚Ä¢ {r.get('–ü–æ—Å—Ç–∞–≤—â–∏–∫')} ‚Äî {r.get('–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')} [{r.get('–¢–¢')}] / –ø–µ—Ä–∏–æ–¥ {r.get('–ü–µ—Ä–∏–æ–¥_–¥–Ω–µ–π')} / –∞–≤—Ç–æ={r.get('–ê–≤—Ç–æ')} / –∞–∫—Ç–∏–≤–µ–Ω={r.get('–ê–∫—Ç–∏–≤–µ–Ω')}")
    bot.send_message(m.chat.id, "\n".join(lines), reply_markup=suppliers_menu())

@bot.message_handler(func=lambda msg: msg.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")
def add_supplier_start(m):
    set_state(m.chat.id, "supp_name", {"supp":{}})
    bot.send_message(m.chat.id, "–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:", reply_markup=back_menu())

@bot.message_handler(func=lambda msg: STATE.get(msg.chat.id) == "supp_name")
def supp_name(m):
    uid = m.chat.id
    BUFFER[uid]["supp"]["name"] = m.text.strip()
    set_state(uid, "supp_direction", BUFFER[uid])
    bot.send_message(uid, "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", reply_markup=choose_direction_kb())

@bot.message_handler(func=lambda msg: STATE.get(msg.chat.id) == "supp_direction")
def supp_direction(m):
    uid = m.chat.id
    direction = m.text.strip()
    if direction not in DIRECTION_SHEETS:
        bot.send_message(uid, "–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑ –∫–Ω–æ–ø–æ–∫.", reply_markup=choose_direction_kb()); return
    BUFFER[uid]["supp"]["direction"] = direction
    BUFFER[uid]["supp"]["tts"] = []
    set_state(uid, "supp_tt", BUFFER[uid])
    bot.send_message(uid, "–í—ã–±–µ—Ä–∏ –¢–¢ (–Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ –æ—á–µ—Ä–µ–¥–∏), –∑–∞—Ç–µ–º ¬´–ì–æ—Ç–æ–≤–æ¬ª.", reply_markup=choose_tt_kb(direction))

@bot.message_handler(func=lambda msg: STATE.get(msg.chat.id) == "supp_tt")
def supp_tt(m):
    uid = m.chat.id
    val = m.text.strip()
    if val == "–û—Ç–º–µ–Ω–∞":
        clr_state(uid)
        bot.send_message(uid, "–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=suppliers_menu()); return
    if val == "–ì–æ—Ç–æ–≤–æ":
        if not BUFFER[uid]["supp"]["tts"]:
            bot.send_message(uid, "–í—ã–±–µ—Ä–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –¢–¢.", reply_markup=choose_tt_kb(BUFFER[uid]["supp"]["direction"])); return
        set_state(uid, "supp_period", BUFFER[uid])
        bot.send_message(uid, "–ü–µ—Ä–∏–æ–¥ (–¥–Ω–µ–π) –º–µ–∂–¥—É –∑–∞–∫–∞–∑–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä ¬´2¬ª:", reply_markup=back_menu())
        return
    # –¥–æ–±–∞–≤–∏—Ç—å –¢–¢
    if val not in BUFFER[uid]["supp"]["tts"]:
        BUFFER[uid]["supp"]["tts"].append(val)
    bot.send_message(uid, f"–î–æ–±–∞–≤–∏–ª: {val}. –ï—â—ë –∏–ª–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª.", reply_markup=choose_tt_kb(BUFFER[uid]["supp"]["direction"]))

@bot.message_handler(func=lambda msg: STATE.get(msg.chat.id) == "supp_period")
def supp_period(m):
    uid = m.chat.id
    try:
        n = int(m.text.strip())
        if n <= 0: raise ValueError()
    except:
        bot.send_message(uid, "–£–∫–∞–∂–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ > 0.", reply_markup=back_menu()); return
    BUFFER[uid]["supp"]["period"] = n
    set_state(uid, "supp_delivery", BUFFER[uid])
    bot.send_message(uid, "–î–æ—Å—Ç–∞–≤–∫–∞ (–¥–Ω–µ–π –æ—Ç –∑–∞–∫–∞–∑–∞ –¥–æ –ø—Ä–∏–µ–º–∫–∏), –Ω–∞–ø—Ä–∏–º–µ—Ä ¬´1¬ª:", reply_markup=back_menu())

@bot.message_handler(func=lambda msg: STATE.get(msg.chat.id) == "supp_delivery")
def supp_delivery(m):
    uid = m.chat.id
    try:
        d = int(m.text.strip())
        if d < 0: raise ValueError()
    except:
        bot.send_message(uid, "–£–∫–∞–∂–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ ‚â• 0.", reply_markup=back_menu()); return
    BUFFER[uid]["supp"]["delivery"] = d
    set_state(uid, "supp_shelf", BUFFER[uid])
    bot.send_message(uid, "–•—Ä–∞–Ω–µ–Ω–∏–µ (–¥–Ω–µ–π), –Ω–∞–ø—Ä–∏–º–µ—Ä ¬´0¬ª –µ—Å–ª–∏ –Ω–µ –≤–∞–∂–Ω–æ:", reply_markup=back_menu())

@bot.message_handler(func=lambda msg: STATE.get(msg.chat.id) == "supp_shelf")
def supp_shelf(m):
    uid = m.chat.id
    try:
        s = int(m.text.strip())
        if s < 0: raise ValueError()
    except:
        bot.send_message(uid, "–£–∫–∞–∂–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ ‚â• 0.", reply_markup=back_menu()); return
    BUFFER[uid]["supp"]["shelf"] = s
    set_state(uid, "supp_start", BUFFER[uid])
    bot.send_message(uid, "–î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞ —Ü–∏–∫–ª–∞ (–î–î.–ú–ú.–ì–ì–ì–ì) –∏–ª–∏ ¬´—Å–µ–≥–æ–¥–Ω—è¬ª:", reply_markup=back_menu())

@bot.message_handler(func=lambda msg: STATE.get(msg.chat.id) == "supp_start")
def supp_start(m):
    uid = m.chat.id
    val = m.text.strip().lower()
    if val == "—Å–µ–≥–æ–¥–Ω—è":
        start_s = dstr(now_local())
    else:
        try:
            datetime.strptime(val, "%d.%m.%Y")
            start_s = val
        except:
            bot.send_message(uid, "–§–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ ¬´—Å–µ–≥–æ–¥–Ω—è¬ª.", reply_markup=back_menu()); return
    BUFFER[uid]["supp"]["start"] = start_s
    set_state(uid, "supp_auto", BUFFER[uid])
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("–î–∞","–ù–µ—Ç"); kb.row("‚¨Ö –ù–∞–∑–∞–¥")
    bot.send_message(uid, "–ê–≤—Ç–æ-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á –≤–∫–ª—é—á–µ–Ω–∞? (–î–∞/–ù–µ—Ç)", reply_markup=kb)

@bot.message_handler(func=lambda msg: STATE.get(msg.chat.id) == "supp_auto")
def supp_auto(m):
    uid = m.chat.id
    val = m.text.strip().lower()
    if val not in ("–¥–∞","–Ω–µ—Ç"):
        bot.send_message(uid, "–û—Ç–≤–µ—Ç—å ¬´–î–∞¬ª –∏–ª–∏ ¬´–ù–µ—Ç¬ª.", reply_markup=back_menu()); return
    BUFFER[uid]["supp"]["auto"] = "–î–∞" if val == "–¥–∞" else "–ù–µ—Ç"
    # –ê–∫—Ç–∏–≤–µ–Ω = –î–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    data = BUFFER[uid]["supp"]
    WS_SUPPLIERS.append_row([
        data["name"], data["direction"], ",".join(data["tts"]),
        data["period"], data["delivery"], data["shelf"],
        data["start"], data["auto"], "–î–∞"
    ], value_input_option="USER_ENTERED")
    bot.send_message(uid, f"‚úÖ –ü–æ—Å—Ç–∞–≤—â–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω:\n‚Ä¢ {data['name']} ‚Äî {data['direction']} [{', '.join(data['tts'])}]\n‚Ä¢ –ü–µ—Ä–∏–æ–¥ {data['period']} –¥–Ω., –¥–æ—Å—Ç–∞–≤–∫–∞ {data['delivery']} –¥–Ω., —Ö—Ä–∞–Ω–µ–Ω–∏–µ {data['shelf']} –¥–Ω.\n‚Ä¢ –°—Ç–∞—Ä—Ç {data['start']}, –∞–≤—Ç–æ={data['auto']}",
                     reply_markup=suppliers_menu())
    log_event(uid, "add_supplier", json.dumps(data, ensure_ascii=False))
    clr_state(uid)

# -------- GPT –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç
@bot.message_handler(func=lambda msg: msg.text == "ü§ñ GPT –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç")
def ai_start(m):
    set_state(m.chat.id, "ai_query", {})
    bot.send_message(m.chat.id, "–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å: –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–µ–ª–∞, —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å/–Ω–µ–¥–µ–ª—é, –Ω–∞–π—Ç–∏ –æ–∫–Ω–∞ –∏ —Ç.–ø.", reply_markup=back_menu())

@bot.message_handler(func=lambda msg: STATE.get(msg.chat.id) == "ai_query")
def ai_query(m):
    uid = m.chat.id
    q = m.text.strip()

    # —Å–æ–±–µ—Ä—ë–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ–¥–µ–ª–∏
    tasks = get_all_tasks_for_week(uid)
    lines = []
    for r in sorted(tasks, key=lambda x: (datetime.strptime(x["–î–∞—Ç–∞"], "%d.%m.%Y"), x.get("–î–µ–¥–ª–∞–π–Ω","") or "", x.get("–ó–∞–¥–∞—á–∞","") or "")):
        lines.append(f"{r['–î–∞—Ç–∞']} ‚Ä¢ {r['_direction']} / {r['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']} / {r['–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è']} ‚Äî {r['–ó–∞–¥–∞—á–∞']} (–¥–æ {r['–î–µ–¥–ª–∞–π–Ω'] or '‚Äî'}) [{r.get('–°—Ç–∞—Ç—É—Å','') or ''}]")
    context = "\n".join(lines)[:4000]

    if not OPENAI_API_KEY:
        bot.send_message(uid, "üß† (–ë–µ–∑ GPT) –°–æ–≤–µ—Ç: –Ω–∞—á–Ω–∏ —Å –∑–∞–¥–∞—á —Å –±–ª–∏–∂–∞–π—à–∏–º –¥–µ–¥–ª–∞–π–Ω–æ–º –∏ –≤—ã—Å–æ–∫–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç—å—é.", reply_markup=main_menu())
        clr_state(uid); return

    try:
        from openai import OpenAI
        client = OpenAI(api_key=OPENAI_API_KEY)
        sys = ("–¢—ã –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∑–∞–¥–∞—á–∞–º. –î–∞–π –∫—Ä–∞—Ç–∫–∏–π, –ø–æ –¥–µ–ª—É –ø–ª–∞–Ω: —á—Ç–æ –¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è/–Ω–∞ –Ω–µ–¥–µ–ª—é, –Ω–∞ —á—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ. "
               "–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –∏—Å–ø–æ–ª—å–∑—É–π –±—É–ª–ª–µ—Ç—ã –∏ —á—ë—Ç–∫–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã.")
        prompt = f"–ó–∞–ø—Ä–æ—Å: {q}\n\n–ú–æ–∏ –∑–∞–¥–∞—á–∏:\n{context}"
        resp = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role":"system","content":sys},{"role":"user","content":prompt}],
            temperature=0.3
        )
        ans = resp.choices[0].message.content.strip()
        bot.send_message(uid, f"üß† {ans}", reply_markup=main_menu())
        log_event(uid, "ai_query", q)
    except Exception as e:
        log.error(f"AI error: {e}", exc_info=True)
        bot.send_message(uid, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.", reply_markup=main_menu())
    finally:
        clr_state(uid)

# -------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–ø–æ–∫–∞-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π)
@bot.message_handler(func=lambda msg: msg.text == "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
def settings(m):
    bot.send_message(m.chat.id, "–í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ–∑–∂–µ –¥–æ–±–∞–≤–∏–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥—Ä.", reply_markup=main_menu())

# =========================
#    –ï–ñ–ï–î–ù–ï–í–ù–´–ô –î–ê–ô–î–ñ–ï–°–¢
# =========================
def job_daily_digest():
    try:
        users = WS_USERS.get_all_records()
        today_s = dstr(now_local())
        for u in users:
            uid = str(u.get("Telegram ID") or "").strip()
            if not uid: continue
            # —Å–≥–µ–Ω–µ—Ä–∏—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            upsert_tasks_for_date_from_suppliers(now_local(), uid)
            tasks = get_all_tasks_for_date(uid, today_s)
            if not tasks: continue
            txt = f"üìÖ –ü–ª–∞–Ω –Ω–∞ {today_s}\n\n" + format_tasks_grouped(tasks, header_date=today_s)
            try:
                bot.send_message(uid, txt)
            except Exception as e:
                log.error(f"–ù–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {uid}: {e}")
    except Exception as e:
        log.error(f"job_daily_digest error: {e}", exc_info=True)

def scheduler_thread():
    schedule.clear()
    # 08:00 –ø–æ –ú–æ—Å–∫–≤–µ
    schedule.every().day.at("08:00").do(job_daily_digest)
    while True:
        schedule.run_pending()
        time.sleep(1)

# =========================
#          WEBHOOK
# =========================
@app.route("/" + API_TOKEN, methods=["POST"])
def webhook():
    try:
        update = request.get_data().decode("utf-8")
        upd = types.Update.de_json(update)
        bot.process_new_updates([upd])
    except Exception as e:
        log.error(f"Webhook error: {e}", exc_info=True)
    return "OK", 200

@app.route("/")
def home():
    return "Bot is running!"

# =========================
#          START
# =========================
if __name__ == "__main__":
    if not API_TOKEN or not WEBHOOK_URL:
        raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω—ã TELEGRAM_TOKEN –∏–ª–∏ WEBHOOK_BASE")
    try:
        bot.remove_webhook()
    except Exception:
        pass
    time.sleep(0.5)
    bot.set_webhook(url=WEBHOOK_URL)

    threading.Thread(target=scheduler_thread, daemon=True).start()
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", "5000")))
