# tasks_bot.py
import os
import re
import json
import logging
from datetime import datetime, timedelta, time as dtime
from collections import defaultdict

import pytz
from flask import Flask, request
import telebot
from telebot import types
import gspread

from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger

# ---------------------------
# –ö–æ–Ω—Ñ–∏–≥ / –æ–∫—Ä—É–∂–µ–Ω–∏–µ
# ---------------------------
API_TOKEN = os.getenv("API_TOKEN", "").strip()
TABLE_URL = os.getenv("TABLE_URL", "").strip()
CREDENTIALS_FILE = os.getenv("GOOGLE_CREDENTIALS", "/etc/secrets/credentials.json")
WEBHOOK_BASE = os.getenv("WEBHOOK_BASE", "").rstrip("/")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "").strip()
TZ_NAME = os.getenv("TZ", "UTC")

if not API_TOKEN or ":" not in API_TOKEN:
    raise RuntimeError("API_TOKEN –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")

if not TABLE_URL:
    raise RuntimeError("TABLE_URL –Ω–µ –∑–∞–¥–∞–Ω")

if not os.path.exists(CREDENTIALS_FILE):
    raise RuntimeError(f"–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª cred: {CREDENTIALS_FILE}")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s ‚Äî %(message)s"
)
log = logging.getLogger("tasks-bot")

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å
tz = pytz.timezone(TZ_NAME)

# ---------------------------
# Telegram bot (—Ç–æ–ª—å–∫–æ webhook)
# ---------------------------
bot = telebot.TeleBot(API_TOKEN, parse_mode="HTML")

# ---------------------------
# Google Sheets
# ---------------------------
gc = gspread.service_account(filename=CREDENTIALS_FILE)
sh = gc.open_by_url(TABLE_URL)
tasks_ws = sh.worksheet("–ó–∞–¥–∞—á–∏")
users_ws = sh.worksheet("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")

# –û–∂–∏–¥–∞–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ª–∏—Å—Ç–∞ "–ó–∞–¥–∞—á–∏":
# –î–∞—Ç–∞ | –ö–∞—Ç–µ–≥–æ—Ä–∏—è | –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è | –ó–∞–¥–∞—á–∞ | –î–µ–¥–ª–∞–π–Ω | –°—Ç–∞—Ç—É—Å | –ü–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å | User ID
# where: –°—Ç–∞—Ç—É—Å: "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ" / "" ; –ü–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å: —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ —à–∞–±–ª–æ–Ω; User ID: chat.id

# ---------------------------
# OpenAI (GPT –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç)
# ---------------------------
from openai import OpenAI
oai_client = None
if OPENAI_API_KEY:
    try:
        oai_client = OpenAI(api_key=OPENAI_API_KEY)
    except Exception as e:
        log.error(f"OpenAI init error: {e}")

SYSTEM_PROMPT = """–¢—ã ‚Äî –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∑–∞–¥–∞—á–∞–º.
–£ —Ç–µ–±—è –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–µ–≥–æ–¥–Ω—è, –Ω–µ–¥–µ–ª—è, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏).
–¢–≤–æ—è —Ü–µ–ª—å ‚Äî –ø–æ–Ω—è—Ç—å –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –∏ –≤–µ—Ä–Ω—É—Ç—å –°–¢–†–û–ì–û JSON —Å –ø–æ–ª—è–º–∏:
{
  "action": "...",        // one of: "list_today", "list_week", "list_day", "mark_done", "add_task", "reschedule", "help"
  "date": "–î–î.–ú–ú.–ì–ì–ì–ì",   // –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  "task_query": "...",    // —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–¥–∞—á–∏ (—Ñ—Ä–∞–≥–º–µ–Ω—Ç)
  "category": "...",
  "subcategory": "...",
  "deadline": "–ß–ß:–ú–ú",
  "repeat": "...",        // –º–∞—Ä–∫–µ—Ä –ø–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç–∏
  "free_text": "..."      // –æ—Ä–≥. –æ–ø–∏—Å–∞–Ω–∏–µ
}
–ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ—è—Å–Ω–∞, –≤–µ—Ä–Ω–∏ action="help".
–û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û JSON –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.
–ü—Ä–∏–º–µ—Ä—ã:
"—è –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–∫–∞–∑ —Ç–∞–±–∞–∫–∞" => {"action":"mark_done","task_query":"–∑–∞–∫–∞–∑ —Ç–∞–±–∞–∫–∞"}
"–¥–æ–±–∞–≤—å –∑–∞–≤—Ç—Ä–∞ –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ –≤ 10:00" => {"action":"add_task","date":"<–∑–∞–≤—Ç—Ä–∞—à–Ω—è—è –¥–∞—Ç–∞>","task_query":"–∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ","deadline":"10:00"}
"–ø–µ—Ä–µ–Ω–µ—Å–∏ –∑–∞–∫–∞–∑ –∫–æ—Ñ–µ –Ω–∞ –ø—è—Ç–Ω–∏—Ü—É 15:00" => {"action":"reschedule","date":"<–±–ª–∏–∂–∞–π—à–∞—è –ø—è—Ç–Ω–∏—Ü–∞>","task_query":"–∑–∞–∫–∞–∑ –∫–æ—Ñ–µ","deadline":"15:00"}
"""

def weekday_name_ru(dt: datetime) -> str:
    names = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫","–í—Ç–æ—Ä–Ω–∏–∫","–°—Ä–µ–¥–∞","–ß–µ—Ç–≤–µ—Ä–≥","–ü—è—Ç–Ω–∏—Ü–∞","–°—É–±–±–æ—Ç–∞","–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    return names[dt.weekday()]

def week_dates(start: datetime) -> list:
    return [(start + timedelta(days=i)).strftime("%d.%m.%Y") for i in range(7)]

def normalize_date_str(s: str) -> str:
    # –æ–∂–∏–¥–∞–µ–º –î–î.–ú–ú.–ì–ì–ì–ì
    if re.match(r"^\d{2}\.\d{2}\.\d{4}$", s):
        return s
    return ""

def get_users() -> list:
    items = []
    for row in users_ws.get_all_records():
        tid = str(row.get("Telegram ID") or "").strip()
        if tid:
            cats = []
            raw = (row.get("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–¥–∞—á") or "").strip()
            if raw:
                cats = [c.strip() for c in raw.split(",") if c.strip()]
            items.append({"id": tid, "name": row.get("–ò–º—è",""), "categories": cats})
    return items

def get_tasks_raw():
    return tasks_ws.get_all_records()

def filter_tasks_by_user(tasks, user_id):
    return [t for t in tasks if str(t.get("User ID")) == str(user_id)]

def tasks_for_date(user_id, date_str):
    rows = filter_tasks_by_user(get_tasks_raw(), user_id)
    return [r for r in rows if (r.get("–î–∞—Ç–∞") == date_str)]

def tasks_for_week(user_id, start: datetime):
    dates = set(week_dates(start))
    rows = filter_tasks_by_user(get_tasks_raw(), user_id)
    return [r for r in rows if r.get("–î–∞—Ç–∞") in dates]

def append_task(date_s, category, subcategory, task, deadline, user_id, status="", repeat=""):
    tasks_ws.append_row([date_s, category, subcategory, task, deadline, status, repeat, str(user_id)])

def find_first_cell_in_col(ws, col_idx, value):
    # –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –∫–æ–ª–æ–Ω–∫–µ: –≤–µ—Ä–Ω–µ–º –ø–µ—Ä–≤—É—é —è—á–µ–π–∫—É —Å —Ç–æ—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º
    try:
        cells = ws.findall(value)
        for c in cells:
            if c.col == col_idx:
                return c
    except Exception:
        pass
    return None

def fuzzy_pick_task(rows, query):
    # –ø—Ä–æ—Å—Ç–∞—è "—Ä–∞–∑–º—ã—Ç–∞—è" –≤—ã–±–æ—Ä–∫–∞ –ø–æ –ø–æ–¥—Å—Ç—Ä–æ–∫–µ
    q = (query or "").strip().lower()
    if not q:
        return None
    scored = []
    for r in rows:
        desc = str(r.get("–ó–∞–¥–∞—á–∞",""))
        if q in desc.lower():
            # —á–µ–º –∫–æ—Ä–æ—á–µ —Ä–∞–∑–Ω–∏—Ü–∞, —Ç–µ–º –ª—É—á—à–µ
            scored.append((len(desc) - len(q), r))
    scored.sort(key=lambda x: x[0])
    return scored[0][1] if scored else None

def format_tasks_grouped(rows, title_date: str = "") -> str:
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ö–∞—Ç–µ–≥–æ—Ä–∏—è/–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è + –∫—Ä–∞—Å–∏–≤—ã–µ –∑–Ω–∞—á–∫–∏
    if not rows:
        return "–ó–∞–¥–∞—á –Ω–µ—Ç. –û—Ç–¥–æ—Ö–Ω–∏ üòä"
    groups = defaultdict(lambda: defaultdict(list))
    for r in rows:
        cat = r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è","–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏") or "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        sub = r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è","‚Äî") or "‚Äî"
        groups[cat][sub].append(r)

    lines = []
    if title_date:
        # –ø—Ä–∏–º–µ—Ä: ‚Ä¢ –°—Ä–µ–¥–∞ ‚Äî 13.08.2025
        try:
            dt = datetime.strptime(title_date, "%d.%m.%Y")
            lines.append(f"‚Ä¢ <b>{weekday_name_ru(dt)}</b> ‚Äî <b>{title_date}</b>\n")
        except Exception:
            lines.append(f"‚Ä¢ <b>{title_date}</b>\n")

    for cat, subs in groups.items():
        lines.append(f"üìÇ <b>{cat}</b>")
        for sub, items in subs.items():
            lines.append(f"  ‚îî <i>{sub}</i>")
            for t in items:
                status = (t.get("–°—Ç–∞—Ç—É—Å","") or "").lower()
                icon = "‚úÖ" if status == "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ" else "‚¨ú"
                dl = t.get("–î–µ–¥–ª–∞–π–Ω","") or ""
                rep = t.get("–ü–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å","") or ""
                rep_icon = " üîÅ" if rep.strip() else ""
                lines.append(f"    {icon} {t.get('–ó–∞–¥–∞—á–∞','')}{rep_icon}  (–¥–æ {dl})")
            lines.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –ø–æ–¥–≥—Ä—É–ø–ø–∞–º–∏
        lines.append("")      # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    return "\n".join(lines).strip()

def format_week_list(rows_by_date) -> str:
    if not rows_by_date:
        return "–ù–∞ –Ω–µ–¥–µ–ª—é –∑–∞–¥–∞—á –Ω–µ—Ç."
    out = []
    for date_s, items in rows_by_date:
        out.append(f"üóì <b>{weekday_name_ru(datetime.strptime(date_s,'%d.%m.%Y'))}</b> ‚Äî <b>{date_s}</b>")
        if not items:
            out.append("  ‚Ä¢ –ù–µ—Ç –∑–∞–¥–∞—á\n")
            continue
        for i, t in enumerate(items, 1):
            rep_icon = " üîÅ" if (t.get("–ü–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å","") or "").strip() else ""
            dl = t.get("–î–µ–¥–ª–∞–π–Ω","") or ""
            out.append(f"  {i}. {t.get('–ó–∞–¥–∞—á–∞','')}{rep_icon} (–¥–æ {dl})")
        out.append("")  # –ø—Ä–æ–±–µ–ª –º–µ–∂–¥—É –¥–Ω—è–º–∏
    return "\n".join(out).strip()

# ---------------------------
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# ---------------------------
def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üìÖ –°–µ–≥–æ–¥–Ω—è", "üìÜ –ù–µ–¥–µ–ª—è")
    kb.add("üóì –í—Å—è –Ω–µ–¥–µ–ª—è", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
    kb.add("‚ÑπÔ∏è –ü–æ–º–æ—â—å")
    return kb

def week_days_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    today = datetime.now(tz).replace(hour=0, minute=0, second=0, microsecond=0)
    for i in range(7):
        d = today + timedelta(days=i)
        kb.add(f"{weekday_name_ru(d)} ({d.strftime('%d.%m.%Y')})")
    kb.add("‚¨Ö –ù–∞–∑–∞–¥")
    return kb

# ---------------------------
# GPT —Ä–∞–∑–±–æ—Ä –Ω–∞–º–µ—Ä–µ–Ω–∏–π
# ---------------------------
def gpt_intent(user_text: str, today_str: str, week_dates_list: list) -> dict:
    if not oai_client:
        # Fallback: –±–µ–∑ GPT ‚Äî –ø—Ä–æ—Å—Ç–µ–π—à–∏–µ —ç–≤—Ä–∏—Å—Ç–∏–∫–∏
        txt = user_text.lower()
        if "—Å–µ–≥–æ–¥–Ω—è" in txt:
            return {"action":"list_today"}
        if "–Ω–µ–¥–µ–ª" in txt and "–≤—Å—è" in txt:
            return {"action":"list_week"}
        if "–ø–µ—Ä–µ–Ω–µ—Å" in txt or "–ø–µ—Ä–µ–Ω–µ—Å–∏" in txt:
            return {"action":"reschedule","task_query":user_text}
        if "–≤—ã–ø–æ–ª–Ω–∏–ª" in txt or "—Å–¥–µ–ª–∞–ª" in txt:
            return {"action":"mark_done","task_query":user_text}
        if "–¥–æ–±–∞–≤" in txt:
            return {"action":"add_task","free_text":user_text}
        return {"action":"help"}

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º "–∫–æ–Ω—Ç–µ–∫—Å—Ç" (–º–∏–Ω–∏–º—É–º, —á—Ç–æ–±—ã –Ω–µ —Å–ª–∞—Ç—å –ª–∏—à–Ω–µ–≥–æ)
    context = {
        "today": today_str,
        "week": week_dates_list
    }

    try:
        msg = oai_client.chat.completions.create(
            model="gpt-4o-mini",
            temperature=0.2,
            messages=[
                {"role":"system","content":SYSTEM_PROMPT},
                {"role":"user","content":f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {json.dumps(context, ensure_ascii=False)}\n–¢–µ–∫—Å—Ç: {user_text}"}
            ],
            response_format={"type":"json_object"},
        )
        raw = msg.choices[0].message.content
        data = json.loads(raw)
        return data
    except Exception as e:
        log.error(f"GPT intent error: {e}")
        return {"action":"help"}

# ---------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ / –∫–Ω–æ–ø–æ–∫
# ---------------------------
@bot.message_handler(commands=["start"])
def on_start(message):
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∑–∞–¥–∞—á–∞–º. –í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏ –º–Ω–µ –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å ü§ù",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda m: m.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
def on_help(message):
    bot.send_message(message.chat.id,
        "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        "‚Ä¢ ¬´–ü–æ–∫–∞–∂–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è¬ª\n"
        "‚Ä¢ ¬´–í—Å—è –Ω–µ–¥–µ–ª—è¬ª\n"
        "‚Ä¢ ¬´–Ø –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–∫–∞–∑ —Ç–∞–±–∞–∫–∞¬ª\n"
        "‚Ä¢ ¬´–î–æ–±–∞–≤—å –∑–∞–≤—Ç—Ä–∞ –∑–∞–∫–∞–∑–∞—Ç—å –∫–æ—Ñ–µ –≤ 14:00¬ª\n"
        "‚Ä¢ ¬´–ü–µ—Ä–µ–Ω–µ—Å–∏ –º–æ–π –∑–∞–∫–∞–∑ –∫–æ—Ñ–µ –Ω–∞ –ø—è—Ç–Ω–∏—Ü—É 15:00¬ª",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda m: m.text == "üìÖ –°–µ–≥–æ–¥–Ω—è")
def on_today(message):
    today = datetime.now(tz).strftime("%d.%m.%Y")
    rows = tasks_for_date(message.chat.id, today)
    txt = f"üìÖ <b>–ó–∞–¥–∞—á–∏ –Ω–∞ {today}</b>\n\n" + format_tasks_grouped(rows, title_date=today)
    bot.send_message(message.chat.id, txt)

@bot.message_handler(func=lambda m: m.text == "üìÜ –ù–µ–¥–µ–ª—è")
def on_week_menu(message):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=week_days_menu())

@bot.message_handler(func=lambda m: m.text == "üóì –í—Å—è –Ω–µ–¥–µ–ª—è")
def on_week_all(message):
    start = datetime.now(tz).replace(hour=0, minute=0, second=0, microsecond=0)
    rows = tasks_for_week(message.chat.id, start)
    # –°–≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º
    bucket = defaultdict(list)
    for r in rows:
        bucket[r.get("–î–∞—Ç–∞","")] += [r]
    ordered = []
    for d in week_dates(start):
        ordered.append((d, bucket.get(d, [])))
    bot.send_message(message.chat.id, format_week_list(ordered))

@bot.message_handler(func=lambda m: "(" in (m.text or "") and ")" in (m.text or ""))
def on_day_pick(message):
    # —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–∫–∏: "–°—Ä–µ–¥–∞ (13.08.2025)"
    try:
        date_str = message.text.split("(")[1].strip(")")
    except Exception:
        date_str = ""
    if not normalize_date_str(date_str):
        bot.send_message(message.chat.id, "–ù–µ –ø–æ–Ω—è–ª –¥–∞—Ç—É ü§î", reply_markup=main_menu())
        return
    rows = tasks_for_date(message.chat.id, date_str)
    txt = f"üìÖ <b>–ó–∞–¥–∞—á–∏ –Ω–∞ {date_str}</b>\n\n" + format_tasks_grouped(rows, title_date=date_str)
    bot.send_message(message.chat.id, txt, reply_markup=main_menu())

@bot.message_handler(func=lambda m: m.text == "‚¨Ö –ù–∞–∑–∞–¥")
def on_back(message):
    bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

# ---------------------------
# Natural language (GPT –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç)
# ---------------------------
def handle_intent(message, intent: dict):
    uid = message.chat.id
    today = datetime.now(tz)
    today_s = today.strftime("%d.%m.%Y")

    action = intent.get("action","help")
    if action == "help":
        return on_help(message)

    if action == "list_today":
        rows = tasks_for_date(uid, today_s)
        bot.send_message(uid, f"üìÖ <b>–ó–∞–¥–∞—á–∏ –Ω–∞ {today_s}</b>\n\n" + format_tasks_grouped(rows, title_date=today_s))
        return

    if action == "list_week":
        start = today.replace(hour=0, minute=0, second=0, microsecond=0)
        rows = tasks_for_week(uid, start)
        bucket = defaultdict(list)
        for r in rows:
            bucket[r.get("–î–∞—Ç–∞","")] += [r]
        ordered = []
        for d in week_dates(start):
            ordered.append((d, bucket.get(d, [])))
        bot.send_message(uid, format_week_list(ordered))
        return

    if action == "list_day":
        d = intent.get("date","")
        d = normalize_date_str(d)
        if not d:
            bot.send_message(uid, "–ù—É–∂–Ω–∞ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")
            return
        rows = tasks_for_date(uid, d)
        bot.send_message(uid, f"üìÖ <b>–ó–∞–¥–∞—á–∏ –Ω–∞ {d}</b>\n\n" + format_tasks_grouped(rows, title_date=d))
        return

    if action == "mark_done":
        query = (intent.get("task_query") or "").strip()
        rows = tasks_for_date(uid, today_s)
        if not rows:
            bot.send_message(uid, "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏.")
            return
        pick = fuzzy_pick_task(rows, query) if query else None
        if not pick:
            bot.send_message(uid, "–ù–µ –Ω–∞—à—ë–ª –∑–∞–¥–∞—á—É. –£—Ç–æ—á–Ω–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
            return
        # –ù–∞–π—Ç–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ: –∫–æ–ª–æ–Ω–∫–∞ "–ó–∞–¥–∞—á–∞" ‚Äî 4, "–°—Ç–∞—Ç—É—Å" ‚Äî 6
        try:
            desc = pick.get("–ó–∞–¥–∞—á–∞","")
            cell = tasks_ws.find(desc)
            if cell:
                tasks_ws.update_cell(cell.row, 6, "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
                bot.send_message(uid, f"‚úÖ –û—Ç–º–µ—Ç–∏–ª: <b>{desc}</b>")
            else:
                bot.send_message(uid, "–ù–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü–µ.")
        except Exception as e:
            log.exception(e)
            bot.send_message(uid, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –∑–∞–¥–∞—á–∏.")
        return

    if action == "add_task":
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–±—Ä–∞—Ç—å –ø–æ–ª—è
        date_s = normalize_date_str(intent.get("date","")) or today_s
        category = intent.get("category","–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        subcat = intent.get("subcategory","‚Äî")
        desc = intent.get("task_query") or intent.get("free_text") or "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
        deadline = intent.get("deadline","")
        repeat = intent.get("repeat","")
        try:
            append_task(date_s, category, subcat, desc, deadline, uid, status="", repeat=repeat)
            bot.send_message(uid, f"‚úÖ –î–æ–±–∞–≤–∏–ª –∑–∞–¥–∞—á—É –Ω–∞ <b>{date_s}</b>:\n‚Ä¢ {desc} (–¥–æ {deadline})")
        except Exception as e:
            log.exception(e)
            bot.send_message(uid, "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É.")
        return

    if action == "reschedule":
        # –ù–∞–π—Ç–∏ –∑–∞–¥–∞—á—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ —Å–µ–≥–æ–¥–Ω—è), –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É/–¥–µ–¥–ª–∞–π–Ω
        query = (intent.get("task_query") or "").strip()
        new_date = normalize_date_str(intent.get("date","")) or today_s
        new_deadline = intent.get("deadline","")
        rows = filter_tasks_by_user(get_tasks_raw(), uid)
        pick = fuzzy_pick_task(rows, query) if query else None
        if not pick:
            bot.send_message(uid, "–ù–µ –Ω–∞—à—ë–ª –∑–∞–¥–∞—á—É –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞. –£—Ç–æ—á–Ω–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
            return
        try:
            desc = pick.get("–ó–∞–¥–∞—á–∞","")
            cell = tasks_ws.find(desc)
            if cell:
                # –ö–æ–ª–æ–Ω–∫–∏: 1-–î–∞—Ç–∞, 5-–î–µ–¥–ª–∞–π–Ω
                tasks_ws.update_cell(cell.row, 1, new_date)
                if new_deadline:
                    tasks_ws.update_cell(cell.row, 5, new_deadline)
                bot.send_message(uid, f"üîÅ –ü–µ—Ä–µ–Ω—ë—Å <b>{desc}</b> –Ω–∞ <b>{new_date}</b>{(' '+new_deadline) if new_deadline else ''}")
            else:
                bot.send_message(uid, "–ù–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü–µ.")
        except Exception as e:
            log.exception(e)
            bot.send_message(uid, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –∑–∞–¥–∞—á–∏.")
        return

    # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    on_help(message)

@bot.message_handler(func=lambda m: True)
def on_any_text(message):
    text = (message.text or "").strip()
    # –ö–Ω–æ–ø–∫–∏ –∏ —Å–ø–µ—Ü-–∫–æ–º–∞–Ω–¥—ã —É–∂–µ –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω—ã –≤—ã—à–µ; –∑–¥–µ—Å—å ‚Äî —Å–≤–æ–±–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
    today = datetime.now(tz)
    intent = gpt_intent(text, today.strftime("%d.%m.%Y"), week_dates(today))
    handle_intent(message, intent)

# ---------------------------
# –ê–≤—Ç–æ–ø–ª–∞–Ω –Ω–∞ 09:00
# ---------------------------
def send_daily_plan():
    try:
        today_s = datetime.now(tz).strftime("%d.%m.%Y")
        for u in get_users():
            uid = u["id"]
            rows = tasks_for_date(uid, today_s)
            if rows:
                bot.send_message(uid, f"üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!\n–í–æ—Ç —Ç–≤–æ–π –ø–ª–∞–Ω –Ω–∞ <b>{today_s}</b>:\n\n" + format_tasks_grouped(rows, title_date=today_s))
    except Exception as e:
        log.exception(e)

scheduler = BackgroundScheduler(timezone=tz)
# –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:00 –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ TZ
scheduler.add_job(send_daily_plan, CronTrigger(hour=9, minute=0))

# ---------------------------
# Flask + Webhook
# ---------------------------
app = Flask(__name__)

@app.route("/" + API_TOKEN, methods=["POST"])
def tg_webhook():
    try:
        json_str = request.get_data(as_text=True)
        update = telebot.types.Update.de_json(json_str)
        bot.process_new_updates([update])
    except Exception as e:
        log.exception(e)
        return "ERR", 500
    return "OK", 200

@app.route("/")
def home():
    return "Bot is running!", 200

def setup_webhook():
    # –£–¥–∞–ª–∏–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –∑–∞—Ç–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏–º
    try:
        bot.remove_webhook()
    except Exception:
        pass
    webhook_url = f"{WEBHOOK_BASE}/{API_TOKEN}"
    ok = bot.set_webhook(url=webhook_url, max_connections=40)
    if ok:
        log.info(f"Webhook set to: {webhook_url}")
    else:
        log.error("Failed to set webhook")

# ---------------------------
# Entry
# ---------------------------
if __name__ == "__main__":
    setup_webhook()
    scheduler.start()
    # Flask dev server (–Ω–∞ Render —ç—Ç–æ –æ–∫ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞)
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", "5000")))
