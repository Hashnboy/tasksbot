
import telebot
import gspread
import schedule
import time
import threading
from datetime import datetime, timedelta
from flask import Flask

# ====== –ù–ê–°–¢–†–û–ô–ö–ò ======
API_TOKEN = "YOUR_TELEGRAM_BOT_TOKEN"  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
TABLE_URL = "https://docs.google.com/spreadsheets/d/1lIV2kUx8sDHR1ynMB2di8j5n9rpj1ydhsmfjXJpRGeA/edit?usp=sharing"
CREDENTIALS_FILE = "credentials.json"

bot = telebot.TeleBot(API_TOKEN)

# ====== –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö GOOGLE SHEETS ======
gc = gspread.service_account(filename=CREDENTIALS_FILE)
sh = gc.open_by_url(TABLE_URL)

tasks_ws = sh.worksheet("–ó–∞–¥–∞—á–∏")
users_ws = sh.worksheet("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
repeat_ws = sh.worksheet("–ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–∞–¥–∞—á–∏")

# ====== –§–£–ù–ö–¶–ò–ò ======
def get_users():
    users = []
    rows = users_ws.get_all_records()
    for row in rows:
        if row["Telegram ID"]:
            users.append({
                "name": row["–ò–º—è"],
                "id": str(row["Telegram ID"]),
                "categories": [c.strip() for c in row["–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–¥–∞—á"].split(",")] if row["–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–¥–∞—á"] else []
            })
    return users

def get_tasks_for_date(user_id, date_str):
    tasks = []
    rows = tasks_ws.get_all_records()
    users = get_users()
    user_info = next((u for u in users if u["id"] == str(user_id)), None)
    for row in rows:
        if row["–î–∞—Ç–∞"] == date_str:
            if not user_info or not user_info["categories"] or row["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] in user_info["categories"]:
                tasks.append(row)
    return tasks

def add_task(date, category, subcategory, task, deadline, status="", repeat=""):
    tasks_ws.append_row([date, category, subcategory, task, deadline, status, repeat])

def process_repeating_tasks():
    today_str = datetime.now().strftime("%d.%m.%Y")
    today_weekday = datetime.now().strftime("%A").lower()
    weekday_map = {
        "monday": "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "tuesday": "–≤—Ç–æ—Ä–Ω–∏–∫",
        "wednesday": "—Å—Ä–µ–¥–∞",
        "thursday": "—á–µ—Ç–≤–µ—Ä–≥",
        "friday": "–ø—è—Ç–Ω–∏—Ü–∞",
        "saturday": "—Å—É–±–±–æ—Ç–∞",
        "sunday": "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }
    today_rus = weekday_map[today_weekday]

    existing_tasks_today = [t["–ó–∞–¥–∞—á–∞"] for t in tasks_ws.get_all_records() if t["–î–∞—Ç–∞"] == today_str]

    for row in repeat_ws.get_all_records():
        if row["–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏"].strip().lower() == today_rus:
            if row["–ó–∞–¥–∞—á–∞"] not in existing_tasks_today:
                add_task(today_str, row["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"], row["–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è"], row["–ó–∞–¥–∞—á–∞"], row["–í—Ä–µ–º—è"], "", "–ø–æ–≤—Ç–æ—Ä")

def schedule_next_repeat_tasks():
    weekday_to_int = {
        "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": 0,
        "–≤—Ç–æ—Ä–Ω–∏–∫": 1,
        "—Å—Ä–µ–¥–∞": 2,
        "—á–µ—Ç–≤–µ—Ä–≥": 3,
        "–ø—è—Ç–Ω–∏—Ü–∞": 4,
        "—Å—É–±–±–æ—Ç–∞": 5,
        "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": 6
    }
    today = datetime.now()
    for row in repeat_ws.get_all_records():
        target_weekday = weekday_to_int[row["–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏"].strip().lower()]
        days_ahead = (target_weekday - today.weekday() + 7) % 7
        if days_ahead == 0:
            days_ahead = 7
        task_date = (today + timedelta(days=days_ahead)).strftime("%d.%m.%Y")
        existing_tasks = [t["–ó–∞–¥–∞—á–∞"] for t in tasks_ws.get_all_records() if t["–î–∞—Ç–∞"] == task_date]
        if row["–ó–∞–¥–∞—á–∞"] not in existing_tasks:
            add_task(task_date, row["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"], row["–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è"], row["–ó–∞–¥–∞—á–∞"], row["–í—Ä–µ–º—è"], "", "–ø–æ–≤—Ç–æ—Ä")

def send_daily_plan():
    process_repeating_tasks()
    schedule_next_repeat_tasks()

    users = get_users()
    today = datetime.now().strftime("%d.%m.%Y")
    for user in users:
        tasks = get_tasks_for_date(user["id"], today)
        if tasks:
            text = f"üìÖ –ü–ª–∞–Ω –Ω–∞ {today}:\n\n"

"
            for i, t in enumerate(tasks, 1):
                status_icon = "‚úÖ" if t["–°—Ç–∞—Ç—É—Å"].lower() == "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ" else "‚¨ú"
                text += f"{status_icon} {i}. [{t['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']} - {t['–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è']}] {t['–ó–∞–¥–∞—á–∞']} (–¥–æ {t['–î–µ–¥–ª–∞–π–Ω']})
"
            bot.send_message(user["id"], text)

def send_reminders():
    now = datetime.now()
    users = get_users()
    for user in users:
        tasks = get_tasks_for_date(user["id"], datetime.now().strftime("%d.%m.%Y"))
        for t in tasks:
            if not t["–°—Ç–∞—Ç—É—Å"] or t["–°—Ç–∞—Ç—É—Å"].lower() != "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ":
                try:
                    deadline = datetime.strptime(t["–î–µ–¥–ª–∞–π–Ω"], "%H:%M")
                    deadline_today = now.replace(hour=deadline.hour, minute=deadline.minute, second=0, microsecond=0)
                    if 0 <= (deadline_today - now).total_seconds() <= 1800:
                        bot.send_message(user["id"], f"‚ö†Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {t['–ó–∞–¥–∞—á–∞']} (–¥–æ {t['–î–µ–¥–ª–∞–π–Ω']})")
                except:
                    pass

def send_evening_report():
    users = get_users()
    today = datetime.now().strftime("%d.%m.%Y")
    for user in users:
        tasks = get_tasks_for_date(user["id"], today)
        if tasks:
            done = [t for t in tasks if t["–°—Ç–∞—Ç—É—Å"].lower() == "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ"]
            undone = [t for t in tasks if not t["–°—Ç–∞—Ç—É—Å"] or t["–°—Ç–∞—Ç—É—Å"].lower() != "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ"]
            text = f"üåô –ò—Ç–æ–≥ –∑–∞ {today}:

"
            for t in done:
                text += f"‚úÖ {t['–ó–∞–¥–∞—á–∞']}
"
            for t in undone:
                text += f"üîÑ –ü–µ—Ä–µ–Ω–æ—Å: {t['–ó–∞–¥–∞—á–∞']}
"
                add_task((datetime.now() + timedelta(days=1)).strftime("%d.%m.%Y"), t["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"], t["–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è"], t["–ó–∞–¥–∞—á–∞"], t["–î–µ–¥–ª–∞–π–Ω"], "", t["–ü–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å"])
            bot.send_message(user["id"], text)

@bot.message_handler(commands=['done'])
def mark_done(message):
    try:
        task_num = int(message.text.split()[1]) - 1
        user_id = str(message.chat.id)
        tasks = get_tasks_for_date(user_id, datetime.now().strftime("%d.%m.%Y"))
        if 0 <= task_num < len(tasks):
            cell = tasks_ws.find(tasks[task_num]["–ó–∞–¥–∞—á–∞"])
            tasks_ws.update_cell(cell.row, 6, "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
            bot.send_message(user_id, f"‚úÖ –ó–∞–¥–∞—á–∞ '{tasks[task_num]['–ó–∞–¥–∞—á–∞']}' –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
        else:
            bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏")
    except:
        bot.send_message(user_id, "–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /done 1")

# ====== –§–£–ù–ö–¶–ò–ò –ó–ê–ü–£–°–ö–ê ======
def run_scheduler():
    schedule.every().day.at("09:00").do(send_daily_plan)
    schedule.every(10).minutes.do(send_reminders)
    schedule.every().day.at("19:00").do(send_evening_report)
    while True:
        schedule.run_pending()
        time.sleep(1)

def run_bot():
    bot.polling(none_stop=True)

# Flask –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
app = Flask(__name__)

@app.route("/")
def home():
    return "Bot is running!"

if __name__ == "__main__":
    threading.Thread(target=run_scheduler).start()
    threading.Thread(target=run_bot).start()
    app.run(host="0.0.0.0", port=5000)
