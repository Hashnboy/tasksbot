# tasks_bot.py
# -*- coding: utf-8 -*-
import os
import re
import json
import time
import pytz
import hmac
import hashlib
import logging
import schedule
import threading
from datetime import datetime, timedelta

import gspread
from flask import Flask, request
from telebot import TeleBot, types

# =============== –û–ö–†–£–ñ–ï–ù–ò–ï ===============
API_TOKEN        = os.getenv("TELEGRAM_TOKEN")
TABLE_URL        = os.getenv("GOOGLE_SHEETS_URL")
CREDENTIALS_FILE = os.getenv("GOOGLE_CREDENTIALS_JSON", "/etc/secrets/credentials.json")
WEBHOOK_BASE     = os.getenv("WEBHOOK_BASE")
OPENAI_API_KEY   = os.getenv("OPENAI_API_KEY")
TZ_NAME          = os.getenv("TZ", "Europe/Moscow")
WEBHOOK_URL      = f"{WEBHOOK_BASE}/{API_TOKEN}" if API_TOKEN and WEBHOOK_BASE else None

LOCAL_TZ = pytz.timezone(TZ_NAME)

logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
log = logging.getLogger("tasksbot")

REQUIRED_ENVS = ["TELEGRAM_TOKEN", "GOOGLE_SHEETS_URL", "WEBHOOK_BASE"]
miss = [v for v in REQUIRED_ENVS if not os.getenv(v)]
if miss:
    log.warning("–ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: %s", ", ".join(miss))

# =============== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===============
bot = TeleBot(API_TOKEN, parse_mode="HTML")

try:
    gc = gspread.service_account(filename=CREDENTIALS_FILE)
    sh = gc.open_by_url(TABLE_URL)

    # –û—Å–Ω–æ–≤–Ω—ã–µ –ª–∏—Å—Ç—ã
    WS = {}
    EXPECTED_TASK_SHEETS = ["–ö–æ—Ñ–µ–π–Ω—è","–¢–∞–±–∞—á–∫–∞","WB","–õ–∏—á–Ω–æ–µ"]
    for name in EXPECTED_TASK_SHEETS:
        try:
            WS[name] = sh.worksheet(name)
        except Exception:
            WS[name] = None
            log.error("–ù–µ –Ω–∞–π–¥–µ–Ω –ª–∏—Å—Ç –∑–∞–¥–∞—á: %s (—Å–æ–∑–¥–∞–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ù–ï –±—É–¥–µ–º)", name)

    ws_suppliers = sh.worksheet("–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏")
    ws_users     = sh.worksheet("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
    ws_logs      = sh.worksheet("–õ–æ–≥–∏")
    log.info("Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω—ã.")
except Exception as e:
    log.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets", exc_info=True)
    raise

TASKS_HEADERS = ["–î–∞—Ç–∞","–ö–∞—Ç–µ–≥–æ—Ä–∏—è","–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è","–ó–∞–¥–∞—á–∞","–î–µ–¥–ª–∞–π–Ω","User ID","–°—Ç–∞—Ç—É—Å","–ü–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å","–ò—Å—Ç–æ—á–Ω–∏–∫"]

# =============== –£–¢–ò–õ–ò–¢–´ ===============
PAGE_SIZE = 7

def now_local():
    return datetime.now(LOCAL_TZ)

def today_str(dt=None):
    if dt is None:
        dt = now_local()
    return dt.strftime("%d.%m.%Y")

def weekday_ru(dt: datetime) -> str:
    names = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫","–í—Ç–æ—Ä–Ω–∏–∫","–°—Ä–µ–¥–∞","–ß–µ—Ç–≤–µ—Ä–≥","–ü—è—Ç–Ω–∏—Ü–∞","–°—É–±–±–æ—Ç–∞","–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    return names[dt.weekday()]

def log_event(user_id, action, payload=""):
    try:
        ws_logs.append_row([datetime.utcnow().isoformat(), str(user_id), action, payload],
                           value_input_option="USER_ENTERED")
    except Exception:
        pass

def row_to_dict_list(ws):
    return ws.get_all_records() if ws else []

def sha_task_id(user_id, date_s, cat, subcat, text, deadline):
    key = f"{user_id}|{date_s}|{cat}|{subcat}|{text}|{deadline}"
    return hashlib.sha1(key.encode("utf-8")).hexdigest()[:16]

def find_row_index_by_id(task_id, rows):
    for i, r in enumerate(rows, start=2):
        rid = sha_task_id(str(r.get("User ID")), r.get("–î–∞—Ç–∞",""), r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""),
                          r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ó–∞–¥–∞—á–∞",""), r.get("–î–µ–¥–ª–∞–π–Ω",""))
        if rid == task_id:
            return i
    return None

def ws_for_category(category: str):
    cat = (category or "").strip()
    if cat in WS and WS[cat] is not None:
        return WS[cat]
    # –ú—è–≥–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
    m = {
        "–∫–æ—Ñ": "–ö–æ—Ñ–µ–π–Ω—è",
        "—Ç–∞–±": "–¢–∞–±–∞—á–∫–∞",
        "–ª–∏—á": "–õ–∏—á–Ω–æ–µ",
        "wb":  "WB",
    }
    for k, v in m.items():
        if k in cat.lower() and WS.get(v):
            return WS[v]
    # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –õ–∏—á–Ω–æ–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if WS.get("–õ–∏—á–Ω–æ–µ"):
        return WS["–õ–∏—á–Ω–æ–µ"]
    # –µ—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–µ—Ç ‚Äî None
    return None

def task_exists(ws, date_s, category, subcategory, text, deadline, user_id):
    """–ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–µ–π: –∏—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π."""
    if not ws:
        return False
    rows = row_to_dict_list(ws)
    for r in rows:
        if (str(r.get("User ID")) == str(user_id) and
            (r.get("–î–∞—Ç–∞") or "") == (date_s or "") and
            (r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è") or "") == (category or "") and
            (r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è") or "") == (subcategory or "") and
            (r.get("–ó–∞–¥–∞—á–∞") or "") == (text or "") and
            (r.get("–î–µ–¥–ª–∞–π–Ω") or "") == (deadline or "")):
            return True
    return False

def add_task(date_s, category, subcategory, text, deadline, user_id, status="", repeat="", source=""):
    ws = ws_for_category(category)
    if not ws:
        raise RuntimeError(f"–ù–µ –Ω–∞–π–¥–µ–Ω –ª–∏—Å—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{category}¬ª. –°–æ–∑–¥–∞–π—Ç–µ –ª–∏—Å—Ç –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
    if task_exists(ws, date_s, category, subcategory, text, deadline, user_id):
        log.info("–î—É–±–ª—å –ø—Ä–æ–ø—É—â–µ–Ω: %s / %s / %s", date_s, category, text)
        return False
    row = [date_s, category, subcategory, text, deadline, str(user_id), status, repeat, source]
    ws.append_row(row, value_input_option="USER_ENTERED")
    return True

def mark_done_by_id(task_id, user_id):
    # –ò—â–µ–º –ø–æ –≤—Å–µ–º –ª–∏—Å—Ç–∞–º
    for cat, ws in WS.items():
        rows = row_to_dict_list(ws)
        idx = find_row_index_by_id(task_id, rows)
        if not idx:
            continue
        r = rows[idx-2]
        if str(r.get("User ID")) != str(user_id):
            return False, None
        ws.update_cell(idx, TASKS_HEADERS.index("–°—Ç–∞—Ç—É—Å")+1, "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
        return True, r
    return False, None

def is_order_task(text: str) -> bool:
    t = (text or "").lower()
    return "–∑–∞–∫–∞–∑" in t or "–∑–∞–∫–∞–∑–∞—Ç—å" in t

def guess_supplier(text: str) -> str:
    t = (text or "").lower()
    if "–∫-—ç–∫—Å–ø—Ä–æ" in t or "–∫ —ç–∫—Å–ø—Ä–æ" in t or "k-exp" in t:
        return "–ö-–≠–∫—Å–ø—Ä–æ"
    if "–≤—ã–ª–µ–≥–∂–∞–Ω" in t:
        return "–ò–ü –í—ã–ª–µ–≥–∂–∞–Ω–∏–Ω–∞"
    return ""

def normalize_tt_from_subcat(subcat: str) -> str:
    s = (subcat or "").strip().lower()
    if "—Ü–µ–Ω—Ç—Ä" in s: return "–¶–µ–Ω—Ç—Ä"
    if "–ø–æ–ª–µ—Ç" in s or "–ø–æ–ª—ë—Ç" in s: return "–ü–æ–ª–µ—Ç"
    if "–∫–ª–∏–º–æ–≤" in s: return "–ö–ª–∏–º–æ–≤–æ"
    return subcat or ""

# =============== –ü–†–ê–í–ò–õ–ê –ü–û–°–¢–ê–í–©–ò–ö–û–í ===============
SUPPLIER_RULES = {
    "–∫-—ç–∫—Å–ø—Ä–æ": {
        "kind": "cycle_every_n_days",
        "order_every_days": 2,
        "delivery_offset_days": 1,
        "order_deadline": "14:00",
        "emoji": "üì¶"
    },
    "–∏–ø –≤—ã–ª–µ–≥–∂–∞–Ω–∏–Ω–∞": {
        "kind": "delivery_shelf_then_order",
        "delivery_offset_days": 1,
        "shelf_hours": 72,
        "order_deadline": "14:00",
        "emoji": "ü•ò"
    }
}

def load_supplier_rules_from_sheet():
    try:
        rows = row_to_dict_list(ws_suppliers)
        for r in rows:
            name = (r.get("–ü–æ—Å—Ç–∞–≤—â–∏–∫") or r.get("–ù–∞–∑–≤–∞–Ω–∏–µ") or "").strip().lower()
            if not name:
                continue
            kind = (r.get("–ü—Ä–∞–≤–∏–ª–æ") or r.get("Rule") or "").strip().lower()
            if not kind:
                continue
            d_off = int(str(r.get("DeliveryOffsetDays") or r.get("–°–º–µ—â–µ–Ω–∏–µ–ü–æ—Å—Ç–∞–≤–∫–∏–î–Ω–µ–π") or 1))
            order_deadline = (r.get("–î–µ–¥–ª–∞–π–Ω–ó–∞–∫–∞–∑–∞") or "14:00").strip()
            emoji = (r.get("Emoji") or "üì¶").strip()
            if "–∫–∞–∂–¥—ã–µ" in kind:
                n = int(re.findall(r"\d+", kind)[0]) if re.findall(r"\d+", kind) else 2
                SUPPLIER_RULES[name] = {
                    "kind": "cycle_every_n_days",
                    "order_every_days": n,
                    "delivery_offset_days": d_off,
                    "order_deadline": order_deadline,
                    "emoji": emoji
                }
            elif "72" in kind or "shelf" in kind or "storage" in kind:
                shelf = int(re.findall(r"\d+", kind)[0]) if re.findall(r"\d+", kind) else 72
                SUPPLIER_RULES[name] = {
                    "kind": "delivery_shelf_then_order",
                    "delivery_offset_days": d_off,
                    "shelf_hours": shelf,
                    "order_deadline": order_deadline,
                    "emoji": emoji
                }
    except Exception as e:
        log.warning("–ù–µ —Å–º–æ–≥ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏–∑ –ª–∏—Å—Ç–∞: %s", e)

load_supplier_rules_from_sheet()

def plan_next_by_supplier_rule(user_id, supplier_name, category, subcategory, base_task_text):
    key = (supplier_name or "").strip().lower()
    rule = SUPPLIER_RULES.get(key)
    if not rule:
        return []
    created = []
    today = now_local().date()

    if rule["kind"] == "cycle_every_n_days":
        delivery_day = today + timedelta(days=rule["delivery_offset_days"])
        next_order_day = today + timedelta(days=rule["order_every_days"])
        add_task(delivery_day.strftime("%d.%m.%Y"), category, subcategory,
                 f"{rule['emoji']} –ü—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É {supplier_name} ({normalize_tt_from_subcat(subcategory) or '‚Äî'})",
                 "10:00", user_id, status="", repeat="", source=f"auto:delivery:{supplier_name}")
        add_task(next_order_day.strftime("%d.%m.%Y"), category, subcategory,
                 f"{rule['emoji']} –ó–∞–∫–∞–∑–∞—Ç—å {supplier_name} ({normalize_tt_from_subcat(subcategory) or '‚Äî'})",
                 rule["order_deadline"], user_id, status="", repeat="", source=f"auto:order:{supplier_name}")
        created.append((delivery_day, next_order_day))

    elif rule["kind"] == "delivery_shelf_then_order":
        delivery_day = today + timedelta(days=rule["delivery_offset_days"])
        next_order_day = delivery_day + timedelta(days=2)
        add_task(delivery_day.strftime("%d.%m.%Y"), category, subcategory,
                 f"{rule['emoji']} –ü—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É {supplier_name} ({normalize_tt_from_subcat(subcategory) or '‚Äî'})",
                 "11:00", user_id, status="", repeat="", source=f"auto:delivery:{supplier_name}")
        add_task(next_order_day.strftime("%d.%m.%Y"), category, subcategory,
                 f"{rule['emoji']} –ó–∞–∫–∞–∑–∞—Ç—å {supplier_name} ({normalize_tt_from_subcat(subcategory) or '‚Äî'})",
                 rule["order_deadline"], user_id, status="", repeat="", source=f"auto:order:{supplier_name}")
        created.append((delivery_day, next_order_day))
    return created

# =============== –ß–¢–ï–ù–ò–ï –ó–ê–î–ê–ß ===============
def format_grouped(tasks, header_date=None):
    if not tasks:
        return "–ó–∞–¥–∞—á –Ω–µ—Ç."
    def k(r):
        dl = r.get("–î–µ–¥–ª–∞–π–Ω") or ""
        try:
            dlk = datetime.strptime(dl, "%H:%M").time()
        except:
            dlk = datetime.min.time()
        return (r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), dlk, r.get("–ó–∞–¥–∞—á–∞",""))
    tasks = sorted(tasks, key=k)
    out = []
    if header_date:
        dt = datetime.strptime(header_date, "%d.%m.%Y")
        out.append(f"‚Ä¢ {weekday_ru(dt)} ‚Äî {header_date}\n")
    cur_cat = cur_sub = None
    for r in tasks:
        cat = r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è","") or "‚Äî"
        sub = r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è","") or "‚Äî"
        txt = r.get("–ó–∞–¥–∞—á–∞","")
        dl  = r.get("–î–µ–¥–ª–∞–π–Ω","")
        st  = (r.get("–°—Ç–∞—Ç—É—Å","") or "").lower()
        rep = (r.get("–ü–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å","") or "").strip()
        icon = "‚úÖ" if st == "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ" else ("üîÅ" if rep else "‚¨ú")
        if cat != cur_cat:
            out.append(f"üìÇ <b>{cat}</b>"); cur_cat = cat; cur_sub = None
        if sub != cur_sub:
            out.append(f"  ‚îî <b>{sub}</b>"); cur_sub = sub
        line = f"    ‚îî {icon} {txt}"
        if dl: line += f"  <i>(–¥–æ {dl})</i>"
        out.append(line)
    return "\n".join(out)

def get_all_task_rows():
    rows = []
    for cat, ws in WS.items():
        if not ws: continue
        r = row_to_dict_list(ws)
        rows.extend(r)
    return rows

def get_tasks_by_date(user_id, date_s):
    rows = get_all_task_rows()
    return [r for r in rows if str(r.get("User ID")) == str(user_id) and r.get("–î–∞—Ç–∞") == date_s]

def get_tasks_between(user_id, start_dt, days=7):
    dates = {(start_dt + timedelta(days=i)).strftime("%d.%m.%Y") for i in range(days)}
    rows = get_all_task_rows()
    return [r for r in rows if str(r.get("User ID")) == str(user_id) and r.get("–î–∞—Ç–∞") in dates]

# =============== –ü–ê–ì–ò–ù–ê–¶–ò–Ø / INLINE ===============
def mk_cb(action, **kwargs):
    payload = {"a": action, **kwargs}
    s = json.dumps(payload, ensure_ascii=False)
    sig = hmac.new(b"cb-key", s.encode("utf-8"), hashlib.sha1).hexdigest()[:6]
    return f"{sig}|{s}"

def parse_cb(data):
    try:
        sig, s = data.split("|", 1)
        check = hmac.new(b"cb-key", s.encode("utf-8"), hashlib.sha1).hexdigest()[:6]
        if sig != check:
            return None
        return json.loads(s)
    except Exception:
        return None

def page_buttons(items, page, total_pages, prefix_action):
    kb = types.InlineKeyboardMarkup()
    for it in items:
        kb.add(types.InlineKeyboardButton(it[0], callback_data=mk_cb(prefix_action, id=it[1])))
    nav = []
    if page > 1: nav.append(types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=mk_cb("page", p=page-1, pa=prefix_action)))
    nav.append(types.InlineKeyboardButton(f"{page}/{total_pages}", callback_data="noop"))
    if page < total_pages: nav.append(types.InlineKeyboardButton("‚û°Ô∏è", callback_data=mk_cb("page", p=page+1, pa=prefix_action)))
    if nav: kb.row(*nav)
    return kb

def build_task_line(r, i=None):
    dl = r.get("–î–µ–¥–ª–∞–π–Ω") or "‚Äî"
    prefix = f"{i}. " if i is not None else ""
    return f"{prefix}{r.get('–ö–∞—Ç–µ–≥–æ—Ä–∏—è','‚Äî')}/{r.get('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è','‚Äî')}: {r.get('–ó–∞–¥–∞—á–∞','')[:40]}‚Ä¶ (–¥–æ {dl})"

# =============== –ú–ï–ù–Æ ===============
def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üìÖ –°–µ–≥–æ–¥–Ω—è","üìÜ –ù–µ–¥–µ–ª—è")
    kb.row("‚ûï –î–æ–±–∞–≤–∏—Ç—å","üîé –ù–∞–π—Ç–∏","‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å")
    kb.row("üöö –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏","üß† –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç","‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    kb.row("‚òï –ö–æ—Ñ–µ–π–Ω—è","üö¨ –¢–∞–±–∞—á–∫–∞","üõí WB","üë§ –õ–∏—á–Ω–æ–µ")
    return kb

def supply_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üÜï –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞","üì¶ –ó–∞–∫–∞–∑—ã —Å–µ–≥–æ–¥–Ω—è")
    kb.row("‚¨Ö –ù–∞–∑–∞–¥")
    return kb

def category_menu(cat_name):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(f"üìÖ –°–µ–≥–æ–¥–Ω—è ‚Äî {cat_name}", f"üìÜ –ù–µ–¥–µ–ª—è ‚Äî {cat_name}")
    kb.row(f"‚ûï –î–æ–±–∞–≤–∏—Ç—å ‚Äî {cat_name}", f"üîé –ù–∞–π—Ç–∏ ‚Äî {cat_name}")
    kb.row("‚¨Ö –ù–∞–∑–∞–¥")
    return kb

# =============== GPT: –ü–ê–†–°–ò–ù–ì –ò –ê–°–°–ò–°–¢–ï–ù–¢ ===============
def ai_parse_to_tasks(text, fallback_user_id, forced_category=None):
    items = []
    used_ai = False
    if OPENAI_API_KEY:
        try:
            from openai import OpenAI
            client = OpenAI(api_key=OPENAI_API_KEY)
            sys = (
                "–¢—ã –ø–∞—Ä—Å–µ—Ä –∑–∞–¥–∞—á. –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON-–º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤.\n"
                "–û–±—ä–µ–∫—Ç: {date:'–î–î.–ú–ú.–ì–ì–ì–ì'|'' , time:'–ß–ß:–ú–ú'|'' , category:'–ö–æ—Ñ–µ–π–Ω—è'|'–¢–∞–±–∞—á–∫–∞'|'WB'|'–õ–∏—á–Ω–æ–µ' , "
                "subcategory, task, repeat:''|–æ–ø–∏—Å–∞–Ω–∏–µ, supplier:''|–∏–º—è}.\n"
                "–ï—Å–ª–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–ª–µ–¥—É–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫ ‚Äî –∑–∞–ø–æ–ª–Ω–∏ supplier –∏ category (–æ–±—ã—á–Ω–æ '–ö–æ—Ñ–µ–π–Ω—è' –∏–ª–∏ '–ó–∞–∫—É–ø–∫–∞/–ö–æ—Ñ–µ–π–Ω—è').\n"
                "–ù–µ –ø–∏—à–∏ –Ω–∏—á–µ–≥–æ –∫—Ä–æ–º–µ JSON."
            )
            user_prompt = text
            if forced_category:
                user_prompt += f"\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞—Ç—å: {forced_category}"
            resp = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role":"system","content":sys},{"role":"user","content":user_prompt}],
                temperature=0.1
            )
            raw = resp.choices[0].message.content.strip()
            parsed = json.loads(raw)
            if isinstance(parsed, dict):
                parsed = [parsed]
            for it in parsed:
                items.append({
                    "date": it.get("date") or "",
                    "category": it.get("category") or forced_category or "–õ–∏—á–Ω–æ–µ",
                    "subcategory": it.get("subcategory") or "",
                    "task": it.get("task") or "",
                    "deadline": it.get("time") or "",
                    "user_id": fallback_user_id,
                    "repeat": it.get("repeat") or "",
                    "source": (it.get("supplier") or "")
                })
            used_ai = True
        except Exception as e:
            log.error("AI parse failed: %s", e)

    if not used_ai:
        tl = text.lower()
        # —Ñ–æ—Ä—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
        if forced_category:
            cat = forced_category
        else:
            if any(x in tl for x in ["–∫–æ—Ñ–µ–π–Ω","–∫-—ç–∫—Å–ø—Ä–æ","–≤—ã–ª–µ–≥–∂–∞–Ω"]):
                cat = "–ö–æ—Ñ–µ–π–Ω—è"
            elif "—Ç–∞–±–∞—á" in tl:
                cat = "–¢–∞–±–∞—á–∫–∞"
            elif "wb" in tl or "wild" in tl:
                cat = "WB"
            else:
                cat = "–õ–∏—á–Ω–æ–µ"
        sub = "–¶–µ–Ω—Ç—Ä" if "—Ü–µ–Ω—Ç—Ä" in tl else ("–ü–æ–ª–µ—Ç" if ("–ø–æ–ª–µ—Ç" in tl or "–ø–æ–ª—ë—Ç" in tl) else "")
        dl = re.search(r"(\d{1,2}:\d{2})", text)
        deadline = dl.group(1) if dl else ""
        d = ""
        if "—Å–µ–≥–æ–¥–Ω—è" in tl: d = today_str()
        elif "–∑–∞–≤—Ç—Ä–∞" in tl: d = today_str(now_local()+timedelta(days=1))
        else:
            m = re.search(r"(\d{2}\.\d{2}\.\d{4})", text)
            d = m.group(1) if m else ""
        items = [{
            "date": d, "category": cat, "subcategory": sub,
            "task": text.strip(), "deadline": deadline,
            "user_id": fallback_user_id, "repeat":"", "source":""
        }]
    return items

def ai_assist_answer(query, user_id):
    try:
        rows = get_tasks_between(user_id, now_local().date(), 14)  # –±–æ–ª—å—à–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        brief = []
        for r in sorted(rows, key=lambda x: (datetime.strptime(x["–î–∞—Ç–∞"], "%d.%m.%Y"),
                                             x.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""), x.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""),
                                             x.get("–î–µ–¥–ª–∞–π–Ω","") or "", x.get("–ó–∞–¥–∞—á–∞","") or "")):
            brief.append(f"{r['–î–∞—Ç–∞']} ‚Ä¢ {r['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']}/{r.get('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è') or '‚Äî'} ‚Äî {r['–ó–∞–¥–∞—á–∞']} (–¥–æ {r.get('–î–µ–¥–ª–∞–π–Ω') or '‚Äî'}) [{r.get('–°—Ç–∞—Ç—É—Å','') or ''}]")
        context = "\n".join(brief)[:8000]
        if not OPENAI_API_KEY:
            return "–°–æ–≤–µ—Ç: –Ω–∞—á–Ω–∏ —Å –∑–∞–¥–∞—á —Å –±–ª–∏–∂–∞–π—à–∏–º –¥–µ–¥–ª–∞–π–Ω–æ–º –∏ –≤—ã—Å–æ–∫–æ–π –≤–∞–∂–Ω–æ—Å—Ç—å—é. –†–∞–∑–±–µ–π –∫—Ä—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ 2-3 –ø–æ–¥–∑–∞–¥–∞—á–∏."
        from openai import OpenAI
        client = OpenAI(api_key=OPENAI_API_KEY)
        sys = (
            "–¢—ã —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∑–∞–¥–∞—á–∞–º. –í–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n"
            "- —É–ø–æ—Ä—è–¥–æ—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É;\n"
            "- –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–¥–∑–∞–¥–∞—á–∏;\n"
            "- –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (—Ç–∞–π–º–±–ª–æ–∫–∏);\n"
            "- –≤—ã—è–≤–∏—Ç—å –ø—Ä–æ—Å—Ä–æ—á–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–∞–¥–∞—á–∏;\n"
            "- –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å, —á—Ç–æ –º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å —Å–µ–≥–æ–¥–Ω—è.\n"
            "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –±—É–ª–ª–µ—Ç–∞–º–∏."
        )
        prompt = f"–ó–∞–ø—Ä–æ—Å: {query}\n\n–ú–æ–∏ –∑–∞–¥–∞—á–∏ (14 –¥–Ω–µ–π):\n{context}"
        resp = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role":"system","content":sys},{"role":"user","content":prompt}],
            temperature=0.3
        )
        return resp.choices[0].message.content.strip()
    except Exception as e:
        log.error("AI assistant error: %s", e)
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."

# =============== –°–û–°–¢–û–Ø–ù–ò–Ø ===============
USER_STATE = {}
USER_DATA  = {}

def set_state(uid, state, data=None):
    USER_STATE[uid] = state
    if data is not None:
        USER_DATA[uid] = data

def get_state(uid):
    return USER_STATE.get(uid)

def get_data(uid):
    return USER_DATA.get(uid, {})

def clear_state(uid):
    USER_STATE.pop(uid, None)
    USER_DATA.pop(uid, None)

# =============== –•–ï–ù–î–õ–ï–†–´ ===============
@bot.message_handler(commands=["start"])
def cmd_start(m):
    bot.send_message(m.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∑–∞–¥–∞—á–∞–º. –ß—Ç–æ –¥–µ–ª–∞–µ–º?", reply_markup=main_menu())

# –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –ø–æ —Ç–µ–º–∞–º
@bot.message_handler(func=lambda msg: msg.text in ["‚òï –ö–æ—Ñ–µ–π–Ω—è","üö¨ –¢–∞–±–∞—á–∫–∞","üõí WB","üë§ –õ–∏—á–Ω–æ–µ"])
def handle_category_root(m):
    cat = {"‚òï –ö–æ—Ñ–µ–π–Ω—è":"–ö–æ—Ñ–µ–π–Ω—è","üö¨ –¢–∞–±–∞—á–∫–∞":"–¢–∞–±–∞—á–∫–∞","üõí WB":"WB","üë§ –õ–∏—á–Ω–æ–µ":"–õ–∏—á–Ω–æ–µ"}[m.text]
    set_state(m.chat.id, "cat_ctx", {"cat": cat})
    bot.send_message(m.chat.id, f"–†–∞–∑–¥–µ–ª: <b>{cat}</b>", reply_markup=category_menu(cat))

@bot.message_handler(func=lambda msg: msg.text == "üìÖ –°–µ–≥–æ–¥–Ω—è")
def handle_today(m):
    uid = m.chat.id
    date_s = today_str()
    rows = get_tasks_by_date(uid, date_s)
    items = []
    for r in rows:
        tid = sha_task_id(str(r.get("User ID")), r.get("–î–∞—Ç–∞",""), r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""),
                          r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ó–∞–¥–∞—á–∞",""), r.get("–î–µ–¥–ª–∞–π–Ω",""))
        items.append((build_task_line(r), tid))
    if not items:
        bot.send_message(uid, f"üìÖ –ó–∞–¥–∞—á–∏ –Ω–∞ {date_s}\n\n–ó–∞–¥–∞—á –Ω–µ—Ç.", reply_markup=main_menu()); return
    page = 1
    total_pages = (len(items)+PAGE_SIZE-1)//PAGE_SIZE
    slice_items = items[(page-1)*PAGE_SIZE:page*PAGE_SIZE]
    kb = page_buttons(slice_items, page, total_pages, prefix_action="open")
    header = f"üìÖ –ó–∞–¥–∞—á–∏ –Ω–∞ {date_s}\n\n" + format_grouped(rows, header_date=date_s)
    bot.send_message(uid, header)
    bot.send_message(uid, "–û—Ç–∫—Ä–æ–π –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞–¥–∞—á–∏:", reply_markup=kb)

@bot.message_handler(func=lambda msg: msg.text and msg.text.startswith("üìÖ –°–µ–≥–æ–¥–Ω—è ‚Äî "))
def handle_today_cat(m):
    uid = m.chat.id
    cat = m.text.split("‚Äî",1)[1].strip()
    date_s = today_str()
    rows = [r for r in get_tasks_by_date(uid, date_s) if r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è")==cat]
    if not rows:
        bot.send_message(uid, f"–í {cat} –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞—á –Ω–µ—Ç.", reply_markup=category_menu(cat)); return
    items = []
    for r in rows:
        tid = sha_task_id(str(r.get("User ID")), r.get("–î–∞—Ç–∞",""), r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""),
                          r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ó–∞–¥–∞—á–∞",""), r.get("–î–µ–¥–ª–∞–π–Ω",""))
        items.append((build_task_line(r), tid))
    total_pages = (len(items)+PAGE_SIZE-1)//PAGE_SIZE
    kb = page_buttons(items[:PAGE_SIZE], 1, total_pages, "open")
    header = f"üìÖ {cat}: —Å–µ–≥–æ–¥–Ω—è\n\n" + format_grouped(rows, header_date=date_s)
    bot.send_message(uid, header, reply_markup=kb)

@bot.message_handler(func=lambda msg: msg.text == "üìÜ –ù–µ–¥–µ–ª—è")
def handle_week(m):
    uid = m.chat.id
    tasks = get_tasks_between(uid, now_local().date(), 7)
    if not tasks:
        bot.send_message(uid, "–ù–∞ –Ω–µ–¥–µ–ª—é –∑–∞–¥–∞—á –Ω–µ—Ç.", reply_markup=main_menu()); return
    by_day = {}
    for r in tasks:
        by_day.setdefault(r["–î–∞—Ç–∞"], []).append(r)
    parts = []
    for d in sorted(by_day.keys(), key=lambda s: datetime.strptime(s, "%d.%m.%Y")):
        parts.append(format_grouped(by_day[d], header_date=d))
        parts.append("")
    bot.send_message(uid, "\n".join(parts), reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text and msg.text.startswith("üìÜ –ù–µ–¥–µ–ª—è ‚Äî "))
def handle_week_cat(m):
    uid = m.chat.id
    cat = m.text.split("‚Äî",1)[1].strip()
    tasks = [r for r in get_tasks_between(uid, now_local().date(), 7) if r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è")==cat]
    if not tasks:
        bot.send_message(uid, f"–í {cat} –Ω–∞ –Ω–µ–¥–µ–ª—é –∑–∞–¥–∞—á –Ω–µ—Ç.", reply_markup=category_menu(cat)); return
    by_day = {}
    for r in tasks:
        by_day.setdefault(r["–î–∞—Ç–∞"], []).append(r)
    parts = []
    for d in sorted(by_day.keys(), key=lambda s: datetime.strptime(s, "%d.%m.%Y")):
        rows = [r for r in by_day[d] if r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è")==cat]
        parts.append(format_grouped(rows, header_date=d))
        parts.append("")
    bot.send_message(uid, "\n".join(parts), reply_markup=category_menu(cat))

@bot.message_handler(func=lambda msg: msg.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å")
def handle_add(m):
    uid = m.chat.id
    set_state(uid, "adding_text")
    bot.send_message(uid, "–û–ø–∏—à–∏ –∑–∞–¥–∞—á—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (—è —Å–∞–º —Ä–∞—Å–ø–∞—Ä—à—É –¥–∞—Ç—É/–≤—Ä–µ–º—è/–∫–∞—Ç–µ–≥–æ—Ä–∏—é).")

@bot.message_handler(func=lambda msg: msg.text and msg.text.startswith("‚ûï –î–æ–±–∞–≤–∏—Ç—å ‚Äî "))
def handle_add_cat(m):
    uid = m.chat.id
    cat = m.text.split("‚Äî",1)[1].strip()
    set_state(uid, "adding_text_cat", {"cat": cat})
    bot.send_message(uid, f"–û–ø–∏—à–∏ –∑–∞–¥–∞—á—É (–∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {cat}).")

@bot.message_handler(func=lambda msg: msg.text == "üîé –ù–∞–π—Ç–∏")
def handle_search(m):
    uid = m.chat.id
    set_state(uid, "search_text")
    bot.send_message(uid, "–ß—Ç–æ –∏—â–µ–º? –í–≤–µ–¥–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è/–∫–∞—Ç–µ–≥–æ—Ä–∏–∏/–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏/–¥–∞—Ç—ã.")

@bot.message_handler(func=lambda msg: msg.text and msg.text.startswith("üîé –ù–∞–π—Ç–∏ ‚Äî "))
def handle_search_cat(m):
    uid = m.chat.id
    cat = m.text.split("‚Äî",1)[1].strip()
    set_state(uid, "search_text_cat", {"cat": cat})
    bot.send_message(uid, f"–ß—Ç–æ –∏—â–µ–º –≤ {cat}?")

@bot.message_handler(func=lambda msg: msg.text == "‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å")
def handle_done_menu(m):
    uid = m.chat.id
    set_state(uid, "done_text")
    bot.send_message(uid, "–ù–∞–ø–∏—à–∏, —á—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ. –ü—Ä–∏–º–µ—Ä—ã:\n<b>—Å–¥–µ–ª–∞–ª –∑–∞–∫–∞–∑ –∫-—ç–∫—Å–ø—Ä–æ —Ü–µ–Ω—Ç—Ä</b>\n<b>–∑–∞–∫—Ä—ã–ª–∏ –∑–∞–∫–∞–∑ –≤—ã–ª–µ–≥–∂–∞–Ω–∏–Ω–∞</b>")

@bot.message_handler(func=lambda msg: msg.text == "üöö –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏")
def handle_supply(m):
    bot.send_message(m.chat.id, "–ú–µ–Ω—é –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤:", reply_markup=supply_menu())

@bot.message_handler(func=lambda msg: msg.text == "üÜï –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")
def handle_add_supplier(m):
    uid = m.chat.id
    set_state(uid, "add_supplier")
    bot.send_message(uid, "–§–æ—Ä–º–∞—Ç:\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ; –ü—Ä–∞–≤–∏–ª–æ; –î–µ–¥–ª–∞–π–Ω–ó–∞–∫–∞–∑–∞(optional)</b>\n–ü—Ä–∏–º–µ—Ä—ã:\n–ö-–≠–∫—Å–ø—Ä–æ; –∫–∞–∂–¥—ã–µ 2 –¥–Ω—è; 14:00\n–ò–ü –í—ã–ª–µ–≥–∂–∞–Ω–∏–Ω–∞; shelf 72h; 14:00")

@bot.message_handler(func=lambda msg: msg.text == "üì¶ –ó–∞–∫–∞–∑—ã —Å–µ–≥–æ–¥–Ω—è")
def handle_today_orders(m):
    uid = m.chat.id
    date_s = today_str()
    rows = get_tasks_by_date(uid, date_s)
    orders = [r for r in rows if is_order_task(r.get("–ó–∞–¥–∞—á–∞",""))]
    if not orders:
        bot.send_message(uid, "–°–µ–≥–æ–¥–Ω—è –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç.", reply_markup=supply_menu()); return
    items = []
    for i,r in enumerate(orders, start=1):
        tid = sha_task_id(str(r.get("User ID")), r.get("–î–∞—Ç–∞",""), r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""),
                          r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ó–∞–¥–∞—á–∞",""), r.get("–î–µ–¥–ª–∞–π–Ω",""))
        items.append((build_task_line(r, i), tid))
    kb = types.InlineKeyboardMarkup()
    for text, tid in items:
        kb.add(types.InlineKeyboardButton(text, callback_data=mk_cb("open", id=tid)))
    bot.send_message(uid, "–ó–∞–∫–∞–∑—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:", reply_markup=kb)

@bot.message_handler(func=lambda msg: msg.text == "üß† –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç")
def handle_ai(m):
    uid = m.chat.id
    set_state(uid, "assistant_text")
    bot.send_message(uid, "–ß—Ç–æ –Ω—É–∂–Ω–æ? (—Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–µ–Ω—å, –≤—ã–¥–µ–ª–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã, —Ç–∞–π–º–±–ª–æ–∫–∏ –∏ —Ç.–¥.)")

@bot.message_handler(func=lambda msg: msg.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
def handle_settings(m):
    bot.send_message(m.chat.id, f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: <b>{TZ_NAME}</b>\n–£—Ç—Ä–µ–Ω–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç: <b>08:00</b>", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "‚¨Ö –ù–∞–∑–∞–¥")
def handle_back(m):
    clear_state(m.chat.id)
    bot.send_message(m.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

# =============== –¢–ï–ö–°–¢–û–í–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø ===============
@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "adding_text")
def adding_text(m):
    uid = m.chat.id
    txt = m.text.strip()
    try:
        items = ai_parse_to_tasks(txt, uid)
        created = 0
        for it in items:
            ok = add_task(it["date"] or today_str(), it["category"], it["subcategory"], it["task"],
                          it["deadline"], uid, status="", repeat=it["repeat"], source=it["source"])
            if ok: created += 1
        bot.send_message(uid, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–¥–∞—á: {created}", reply_markup=main_menu())
        log_event(uid, "add_task_nlp", txt)
    except Exception as e:
        log.error("adding_text error: %s", e)
        bot.send_message(uid, f"–ù–µ —Å–º–æ–≥ –¥–æ–±–∞–≤–∏—Ç—å: {e}", reply_markup=main_menu())
    finally:
        clear_state(uid)

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "adding_text_cat")
def adding_text_cat(m):
    uid = m.chat.id
    data = get_data(uid)
    forced_cat = data.get("cat")
    txt = m.text.strip()
    try:
        items = ai_parse_to_tasks(txt, uid, forced_category=forced_cat)
        created = 0
        for it in items:
            ok = add_task(it["date"] or today_str(), it["category"], it["subcategory"], it["task"],
                          it["deadline"], uid, status="", repeat=it["repeat"], source=it["source"])
            if ok: created += 1
        bot.send_message(uid, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–¥–∞—á: {created}", reply_markup=category_menu(forced_cat))
        log_event(uid, "add_task_nlp", f"{forced_cat}: {txt}")
    except Exception as e:
        log.error("adding_text_cat error: %s", e)
        bot.send_message(uid, f"–ù–µ —Å–º–æ–≥ –¥–æ–±–∞–≤–∏—Ç—å: {e}", reply_markup=category_menu(forced_cat))
    finally:
        clear_state(uid)

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) in ["search_text","search_text_cat"])
def search_text(m):
    uid = m.chat.id
    st = get_state(uid)
    q = m.text.strip().lower()
    data = get_data(uid)
    forced_cat = data.get("cat") if st == "search_text_cat" else None

    found = []
    for cat, ws in WS.items():
        if not ws: continue
        if forced_cat and cat != forced_cat: continue
        rows = row_to_dict_list(ws)
        for r in rows:
            if str(r.get("User ID")) != str(uid): continue
            hay = " ".join([str(r.get(k,"")) for k in TASKS_HEADERS]).lower()
            if q in hay:
                tid = sha_task_id(str(r.get("User ID")), r.get("–î–∞—Ç–∞",""), r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""),
                                  r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ó–∞–¥–∞—á–∞",""), r.get("–î–µ–¥–ª–∞–π–Ω",""))
                found.append((build_task_line(r), tid))
    if not found:
        bot.send_message(uid, "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=main_menu()); clear_state(uid); return
    total_pages = (len(found)+PAGE_SIZE-1)//PAGE_SIZE
    kb = page_buttons(found[:PAGE_SIZE], 1, total_pages, prefix_action="open")
    bot.send_message(uid, "–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:", reply_markup=kb)
    clear_state(uid)

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "done_text")
def done_text(m):
    uid = m.chat.id
    txt = m.text.strip().lower()
    supplier = guess_supplier(txt)
    # –∏—â–µ–º –∑–∞–¥–∞—á–∏ —Å–µ–≥–æ–¥–Ω—è –ø–æ –≤—Å–µ–º –ª–∏—Å—Ç–∞–º
    changed = 0
    last_closed = None
    for cat, ws in WS.items():
        if not ws: continue
        rows = [r for r in row_to_dict_list(ws) if r.get("–î–∞—Ç–∞")==today_str() and str(r.get("User ID"))==str(uid)]
        for r in rows:
            if (r.get("–°—Ç–∞—Ç—É—Å","") or "").lower() == "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ":
                continue
            t = (r.get("–ó–∞–¥–∞—á–∞","") or "").lower()
            if supplier and supplier.lower() not in t:
                continue
            if not supplier and not any(w in t for w in ["–∫-—ç–∫—Å–ø—Ä–æ","–≤—ã–ª–µ–≥–∂–∞–Ω","–∑–∞–∫–∞–∑","—Å–¥–µ–ª–∞–ª","–∑–∞–∫–∞–∑–∞—Ç—å"]):
                continue
            tid = sha_task_id(str(r.get("User ID")), r.get("–î–∞—Ç–∞",""), r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""),
                              r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ó–∞–¥–∞—á–∞",""), r.get("–î–µ–¥–ª–∞–π–Ω",""))
            ok, _ = mark_done_by_id(tid, uid)
            if ok:
                changed += 1
                last_closed = r

    msg = f"‚úÖ –û—Ç–º–µ—á–µ–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º: {changed}."
    if changed and last_closed and supplier:
        created = plan_next_by_supplier_rule(uid, supplier,
                                             last_closed.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è","–ö–æ—Ñ–µ–π–Ω—è"),
                                             last_closed.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""),
                                             last_closed.get("–ó–∞–¥–∞—á–∞",""))
        if created:
            msg += "\nüîÆ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: " + ", ".join([f"–ø—Ä–∏–µ–º–∫–∞ {d1.strftime('%d.%m')} ‚Üí –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ {d2.strftime('%d.%m')}" for d1,d2 in created])
    bot.send_message(uid, msg, reply_markup=main_menu())
    clear_state(uid)

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "assistant_text")
def assistant_text(m):
    uid = m.chat.id
    answer = ai_assist_answer(m.text.strip(), uid)
    bot.send_message(uid, f"üß† {answer}", reply_markup=main_menu())
    clear_state(uid)

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "add_supplier")
def add_supplier_text(m):
    uid = m.chat.id
    txt = m.text.strip()
    try:
        parts = [p.strip() for p in txt.split(";")]
        name = parts[0]
        rule = parts[1] if len(parts) > 1 else ""
        deadline = parts[2] if len(parts) > 2 else "14:00"
        ws_suppliers.append_row([name, rule, deadline], value_input_option="USER_ENTERED")
        load_supplier_rules_from_sheet()
        bot.send_message(uid, f"‚úÖ –ü–æ—Å—Ç–∞–≤—â–∏–∫ ¬´{name}¬ª –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=supply_menu())
    except Exception as e:
        log.error("add_supplier error: %s", e)
        bot.send_message(uid, "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞.", reply_markup=supply_menu())
    finally:
        clear_state(uid)

# =============== –ö–ê–†–¢–û–ß–ö–ò / CALLBACKS ===============
def render_task_card(uid, task_id):
    # –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –ª–∏—Å—Ç—ã
    for cat, ws in WS.items():
        rows = row_to_dict_list(ws)
        idx = find_row_index_by_id(task_id, rows)
        if not idx:
            continue
        r = rows[idx-2]
        date_s = r.get("–î–∞—Ç–∞","")
        header = (
            f"<b>{r.get('–ó–∞–¥–∞—á–∞','')}</b>\n"
            f"üìÖ {weekday_ru(datetime.strptime(date_s,'%d.%m.%Y'))} ‚Äî {date_s}\n"
            f"üìÅ {r.get('–ö–∞—Ç–µ–≥–æ—Ä–∏—è','‚Äî')} / {r.get('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è','‚Äî')}\n"
            f"‚è∞ –î–µ–¥–ª–∞–π–Ω: {r.get('–î–µ–¥–ª–∞–π–Ω') or '‚Äî'}\n"
            f"üìù –°—Ç–∞—Ç—É—Å: {r.get('–°—Ç–∞—Ç—É—Å') or '‚Äî'}"
        )
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å", callback_data=mk_cb("done", id=task_id)))
        if is_order_task(r.get("–ó–∞–¥–∞—á–∞","")):
            kb.add(types.InlineKeyboardButton("üöö –ü—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É", callback_data=mk_cb("accept_delivery", id=task_id)))
        kb.add(types.InlineKeyboardButton("‚ûï –ü–æ–¥–∑–∞–¥–∞—á–∞", callback_data=mk_cb("add_sub", id=task_id)))
        kb.add(types.InlineKeyboardButton("‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data=mk_cb("remind_set", id=task_id)))
        kb.add(types.InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data=mk_cb("close_card")))
        return header, kb
    return "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", None

@bot.callback_query_handler(func=lambda c: True)
def callbacks(c):
    uid = c.message.chat.id
    data = parse_cb(c.data) if c.data and c.data != "noop" else None
    if not data:
        bot.answer_callback_query(c.id); return

    a = data.get("a")

    if a == "page":
        page = int(data.get("p", 1))
        date_s = today_str()
        rows = get_tasks_by_date(uid, date_s)
        items = []
        for r in rows:
            tid = sha_task_id(str(r.get("User ID")), r.get("–î–∞—Ç–∞",""), r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""),
                              r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ó–∞–¥–∞—á–∞",""), r.get("–î–µ–¥–ª–∞–π–Ω",""))
            items.append((build_task_line(r), tid))
        total_pages = (len(items)+PAGE_SIZE-1)//PAGE_SIZE
        page = max(1, min(page, total_pages))
        slice_items = items[(page-1)*PAGE_SIZE:page*PAGE_SIZE]
        kb = page_buttons(slice_items, page, total_pages, prefix_action="open")
        try:
            bot.edit_message_reply_markup(uid, c.message.message_id, reply_markup=kb)
        except Exception:
            pass
        bot.answer_callback_query(c.id); return

    if a == "open":
        task_id = data.get("id")
        text, kb = render_task_card(uid, task_id)
        bot.answer_callback_query(c.id)
        if kb:
            bot.send_message(uid, text, reply_markup=kb)
        else:
            bot.send_message(uid, text)
        return

    if a == "close_card":
        bot.answer_callback_query(c.id, "–ó–∞–∫—Ä—ã—Ç–æ")
        try:
            bot.delete_message(uid, c.message.message_id)
        except Exception:
            pass
        return

    if a == "done":
        task_id = data.get("id")
        ok, r = mark_done_by_id(task_id, uid)
        if not ok:
            bot.answer_callback_query(c.id, "–ù–µ —Å–º–æ–≥ –æ—Ç–º–µ—Ç–∏—Ç—å", show_alert=True); return
        supplier = guess_supplier(r.get("–ó–∞–¥–∞—á–∞",""))
        msg = "‚úÖ –ì–æ—Ç–æ–≤–æ."
        if supplier:
            created = plan_next_by_supplier_rule(uid, supplier, r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è","–ö–æ—Ñ–µ–π–Ω—è"),
                                                 r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ó–∞–¥–∞—á–∞",""))
            if created:
                msg += " –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∏–µ–º–∫–∞/—Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑."
        bot.answer_callback_query(c.id, msg, show_alert=True)
        text, kb = render_task_card(uid, task_id)
        if kb:
            bot.edit_message_text(text, uid, c.message.message_id, reply_markup=kb)
        else:
            bot.edit_message_text(text, uid, c.message.message_id)
        return

    if a == "accept_delivery":
        task_id = data.get("id")
        kb = types.InlineKeyboardMarkup()
        kb.row(
            types.InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data=mk_cb("accept_delivery_date", id=task_id, d="today")),
            types.InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞", callback_data=mk_cb("accept_delivery_date", id=task_id, d="tomorrow")),
        )
        kb.row(types.InlineKeyboardButton("üìÖ –î—Ä—É–≥–∞—è –¥–∞—Ç–∞", callback_data=mk_cb("accept_delivery_pick", id=task_id)))
        bot.answer_callback_query(c.id)
        bot.send_message(uid, "–ö–æ–≥–¥–∞ –ø—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É?", reply_markup=kb)
        return

    if a == "accept_delivery_pick":
        task_id = data.get("id")
        set_state(uid, "pick_delivery_date", {"task_id": task_id})
        bot.answer_callback_query(c.id)
        bot.send_message(uid, "–í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return

    if a == "accept_delivery_date":
        task_id = data.get("id")
        when = data.get("d")
        # –∏—â–µ–º –∑–∞–¥–∞—á—É
        parent = None
        parent_ws = None
        for cat, ws in WS.items():
            rows = row_to_dict_list(ws)
            idx = find_row_index_by_id(task_id, rows)
            if idx:
                parent = rows[idx-2]
                parent_ws = ws
                break
        if not parent:
            bot.answer_callback_query(c.id, "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True); return
        date_s = today_str() if when == "today" else today_str(now_local()+timedelta(days=1))
        supplier = guess_supplier(parent.get("–ó–∞–¥–∞—á–∞","")) or "–ü–æ—Å—Ç–∞–≤–∫–∞"
        add_task(date_s, parent.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""), parent.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""),
                 f"üöö –ü—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É {supplier} ({normalize_tt_from_subcat(parent.get('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è','')) or '‚Äî'})",
                 "10:00", uid, status="", repeat="", source=f"subtask:{task_id}")
        bot.answer_callback_query(c.id, f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –Ω–∞ {date_s}", show_alert=True)
        return

    if a == "add_sub":
        task_id = data.get("id")
        set_state(uid, "add_subtask_text", {"task_id": task_id})
        bot.answer_callback_query(c.id)
        bot.send_message(uid, "–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –ø–æ–¥–∑–∞–¥–∞—á–∏:")
        return

    if a == "remind_set":
        task_id = data.get("id")
        set_state(uid, "set_reminder", {"task_id": task_id})
        bot.answer_callback_query(c.id)
        bot.send_message(uid, "–ö–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å? –§–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (–ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è).")
        return

# =============== –ü–û–î–ó–ê–î–ê–ß–ò / –î–ê–¢–´ / –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø ===============
@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "add_subtask_text")
def add_subtask_text(m):
    uid = m.chat.id
    data = get_data(uid)
    task_id = data.get("task_id")
    text = m.text.strip()
    # –Ω–∞–π–¥—ë–º —Ä–æ–¥–∏—Ç–µ–ª—è
    parent = None
    for cat, ws in WS.items():
        rows = row_to_dict_list(ws)
        idx = find_row_index_by_id(task_id, rows)
        if idx:
            parent = rows[idx-2]
            break
    if not parent:
        bot.send_message(uid, "–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_menu()); clear_state(uid); return
    add_task(parent.get("–î–∞—Ç–∞",""), parent.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""), parent.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""),
             f"‚Ä¢ {text}", parent.get("–î–µ–¥–ª–∞–π–Ω",""), uid, status="", repeat="", source=f"subtask:{task_id}")
    bot.send_message(uid, "–ü–æ–¥–∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.", reply_markup=main_menu())
    clear_state(uid)

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "pick_delivery_date")
def pick_delivery_date(m):
    uid = m.chat.id
    data = get_data(uid)
    task_id = data.get("task_id")
    ds = m.text.strip()
    try:
        datetime.strptime(ds, "%d.%m.%Y")
    except Exception:
        bot.send_message(uid, "–î–∞—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞. –ù—É–∂–µ–Ω —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì.", reply_markup=main_menu()); clear_state(uid); return
    parent = None
    for cat, ws in WS.items():
        rows = row_to_dict_list(ws)
        idx = find_row_index_by_id(task_id, rows)
        if idx:
            parent = rows[idx-2]
            break
    if not parent:
        bot.send_message(uid, "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_menu()); clear_state(uid); return
    supplier = guess_supplier(parent.get("–ó–∞–¥–∞—á–∞","")) or "–ü–æ—Å—Ç–∞–≤–∫–∞"
    add_task(ds, parent.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""), parent.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""),
             f"üöö –ü—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É {supplier} ({normalize_tt_from_subcat(parent.get('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è','')) or '‚Äî'})",
             "10:00", uid, status="", repeat="", source=f"subtask:{task_id}")
    bot.send_message(uid, f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –Ω–∞ {ds}.", reply_markup=main_menu())
    clear_state(uid)

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "set_reminder")
def set_reminder(m):
    uid = m.chat.id
    data = get_data(uid)
    task_id = data.get("task_id")
    t = m.text.strip()
    if not re.fullmatch(r"\d{1,2}:\d{2}", t):
        bot.send_message(uid, "–ù—É–∂–µ–Ω —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú.", reply_markup=main_menu()); clear_state(uid); return
    # –Ω–∞–π–¥—ë–º –∑–∞–¥–∞—á—É –∏ –ø—Ä–æ–ø–∏—à–µ–º remind:HH:MM –≤ –ò—Å—Ç–æ—á–Ω–∏–∫
    for cat, ws in WS.items():
        rows = row_to_dict_list(ws)
        idx = find_row_index_by_id(task_id, rows)
        if not idx: continue
        r = rows[idx-2]
        cur_source = r.get("–ò—Å—Ç–æ—á–Ω–∏–∫","") or ""
        new_source = (cur_source + "; " if cur_source else "") + f"remind:{t}"
        ws.update_cell(idx, TASKS_HEADERS.index("–ò—Å—Ç–æ—á–Ω–∏–∫")+1, new_source)
        bot.send_message(uid, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {t}.", reply_markup=main_menu())
        clear_state(uid)
        return
    bot.send_message(uid, "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_menu())
    clear_state(uid)

# =============== –ï–ñ–ï–î–ù–ï–í–ù–´–ï –î–ê–ô–î–ñ–ï–°–¢–´ –ò –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø ===============
NOTIFIED = set()

def job_daily_digest():
    try:
        users = row_to_dict_list(ws_users)
        today = today_str()
        for u in users:
            uid = str(u.get("Telegram ID") or "").strip()
            if not uid: continue
            tasks = get_tasks_by_date(uid, today)
            if not tasks: continue
            text = f"üìÖ –ü–ª–∞–Ω –Ω–∞ {today}\n\n" + format_grouped(tasks, header_date=today)
            try:
                bot.send_message(uid, text)
            except Exception as e:
                log.error("send digest error %s", e)
    except Exception as e:
        log.error("job_daily_digest error %s", e)

def job_reminders():
    try:
        today = today_str()
        rows = get_all_task_rows()
        for r in rows:
            if r.get("–î–∞—Ç–∞") != today: 
                continue
            src = (r.get("–ò—Å—Ç–æ—á–Ω–∏–∫") or "")
            if "remind:" not in src:
                continue
            matches = re.findall(r"remind:(\d{1,2}:\d{2})", src)
            for tm in matches:
                key = sha_task_id(str(r.get("User ID")), r.get("–î–∞—Ç–∞",""), r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""),
                                  r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ó–∞–¥–∞—á–∞",""), r.get("–î–µ–¥–ª–∞–π–Ω","")) + "|" + today + "|" + tm
                if key in NOTIFIED:
                    continue
                try:
                    hh, mm = map(int, tm.split(":"))
                    nowt = now_local().time()
                    if (nowt.hour, nowt.minute) >= (hh, mm):
                        bot.send_message(r.get("User ID"),
                                         f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {r.get('–ö–∞—Ç–µ–≥–æ—Ä–∏—è','')}/{r.get('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è','')} ‚Äî {r.get('–ó–∞–¥–∞—á–∞','')} (–¥–æ {r.get('–î–µ–¥–ª–∞–π–Ω') or '‚Äî'})")
                        NOTIFIED.add(key)
                except Exception:
                    pass
    except Exception as e:
        log.error("job_reminders error %s", e)

def scheduler_thread():
    schedule.clear()
    schedule.every().day.at("08:00").do(job_daily_digest)
    schedule.every(1).minutes.do(job_reminders)
    while True:
        schedule.run_pending()
        time.sleep(1)

# =============== WEBHOOK / FLASK ===============
app = Flask(__name__)

@app.route("/" + API_TOKEN, methods=["POST"])
def webhook():
    try:
        update = request.get_data().decode("utf-8")
        upd = types.Update.de_json(update)
        bot.process_new_updates([upd])
    except Exception as e:
        log.error("Webhook error: %s", e)
    return "OK", 200

@app.route("/")
def home():
    return "Bot is running!"

# =============== START ===============
if __name__ == "__main__":
    if not API_TOKEN or not WEBHOOK_URL:
        raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω—ã TELEGRAM_TOKEN –∏–ª–∏ WEBHOOK_BASE")
    try:
        bot.remove_webhook()
    except Exception:
        pass
    time.sleep(0.5)
    bot.set_webhook(url=WEBHOOK_URL)
    threading.Thread(target=scheduler_thread, daemon=True).start()
    app.run(host="0.0.0.0", port=int(os.getenv("PORT","5000")))
