import telebot
import gspread
import schedule
import time
import threading
import re
from datetime import datetime, timedelta
from flask import Flask, request
from telebot import types
from zoneinfo import ZoneInfo  # –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å Python 3.9+

# ====== –ù–ê–°–¢–†–û–ô–ö–ò ======
API_TOKEN = "7959600917:AAF7szpbvX8CoFObxjVb6y3aCiSceCi-Rt4"
TABLE_URL = "https://docs.google.com/spreadsheets/d/1lIV2kUx8sDHR1ynMB2di8j5n9rpj1ydhsmfjXJpRGeA/edit?usp=sharing"
CREDENTIALS_FILE = "/etc/secrets/credentials.json"
WEBHOOK_URL = "https://tasksbot-hy3t.onrender.com/" + API_TOKEN
TIMEZONE = ZoneInfo("Europe/Moscow")

bot = telebot.TeleBot(API_TOKEN)

# ====== –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö GOOGLE SHEETS ======
gc = gspread.service_account(filename=CREDENTIALS_FILE)
sh = gc.open_by_url(TABLE_URL)

tasks_ws = sh.worksheet("–ó–∞–¥–∞—á–∏")
users_ws = sh.worksheet("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")

# ====== –≠–ú–û–î–ó–ò –î–õ–Ø –ö–ê–¢–ï–ì–û–†–ò–ô ======
CATEGORY_EMOJIS = {
    "–∑–∞–∫–∞–∑": "üì¶",
    "–¥–æ–º": "üè†",
    "—Ä–∞–±–æ—Ç–∞": "üíº",
    "–≤—Å—Ç—Ä–µ—á–∞": "üìÖ",
    "–ø–æ–∫—É–ø–∫–∞": "üõí",
    "–æ—Ç–¥—ã—Ö": "üå¥",
}

# ====== –§–£–ù–ö–¶–ò–ò ======
def get_users():
    users = []
    for row in users_ws.get_all_records():
        if row.get("Telegram ID"):
            cats = [c.strip() for c in (row.get("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–¥–∞—á") or "").split(",") if c.strip()]
            users.append({
                "name": row.get("–ò–º—è", ""),
                "id": str(row.get("Telegram ID")),
                "categories": cats
            })
    return users

def get_tasks_for_date(user_id, date_str):
    tasks = []
    for row in tasks_ws.get_all_records():
        if row.get("–î–∞—Ç–∞") == date_str and str(row.get("User ID")) == str(user_id):
            tasks.append(row)
    return tasks

def get_tasks_for_week(user_id):
    today = datetime.now(TIMEZONE)
    week_dates = [(today + timedelta(days=i)).strftime("%d.%m.%Y") for i in range(7)]
    return [row for row in tasks_ws.get_all_records()
            if row.get("–î–∞—Ç–∞") in week_dates and str(row.get("User ID")) == str(user_id)]

def add_task(date, category, subcategory, task, deadline, user_id, status="", repeat=""):
    tasks_ws.append_row([date, category, subcategory, task, deadline, status, repeat, user_id])

def format_tasks_by_category(tasks, date_str):
    if not tasks:
        return f"‚ùå –ù–∞ {date_str} –∑–∞–¥–∞—á –Ω–µ—Ç."
    
    grouped = {}
    for t in tasks:
        cat = t.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        emoji = next((em for key, em in CATEGORY_EMOJIS.items() if key.lower() in cat.lower()), "üìå")
        grouped.setdefault(f"{emoji} {cat}", []).append(t)

    text = f"üìÖ –ó–∞–¥–∞—á–∏ –Ω–∞ {date_str}:\n\n"
    for cat, items in grouped.items():
        text += f"{cat}:\n"
        for i, t in enumerate(items, 1):
            text += f"  {i}. {t.get('–ó–∞–¥–∞—á–∞','')} (–¥–æ {t.get('–î–µ–¥–ª–∞–π–Ω','')})\n"
        text += "\n"
    return text.strip()

# ====== –ö–ù–û–ü–ö–ò ======
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üìÖ –°–µ–≥–æ–¥–Ω—è", "üìÜ –ù–µ–¥–µ–ª—è", "üóì –í—Å—è –Ω–µ–¥–µ–ª—è", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
    return markup

def week_days_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    today = datetime.now(TIMEZONE)
    days_map = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫","–í—Ç–æ—Ä–Ω–∏–∫","–°—Ä–µ–¥–∞","–ß–µ—Ç–≤–µ—Ä–≥","–ü—è—Ç–Ω–∏—Ü–∞","–°—É–±–±–æ—Ç–∞","–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    for i in range(7):
        day_date = today + timedelta(days=i)
        btn_text = f"{days_map[day_date.weekday()]} ({day_date.strftime('%d.%m.%Y')})"
        markup.add(btn_text)
    markup.add("‚¨Ö –ù–∞–∑–∞–¥")
    return markup

# ====== –°–¢–ê–¢–£–°–´ –î–õ–Ø –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ó–ê–î–ê–ß ======
user_steps = {}
temp_task_data = {}

@bot.message_handler(func=lambda msg: msg.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
def add_task_start(message):
    user_steps[message.chat.id] = 'date'
    temp_task_data[message.chat.id] = {}
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")

@bot.message_handler(func=lambda m: user_steps.get(m.chat.id) == 'date')
def get_task_date(message):
    if not re.match(r"^\d{2}\.\d{2}\.\d{4}$", message.text):
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!")
        return
    temp_task_data[message.chat.id]['date'] = message.text
    user_steps[message.chat.id] = 'category'
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:")

@bot.message_handler(func=lambda m: user_steps.get(m.chat.id) == 'category')
def get_task_category(message):
    temp_task_data[message.chat.id]['category'] = message.text
    user_steps[message.chat.id] = 'subcategory'
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:")

@bot.message_handler(func=lambda m: user_steps.get(m.chat.id) == 'subcategory')
def get_task_subcategory(message):
    temp_task_data[message.chat.id]['subcategory'] = message.text
    user_steps[message.chat.id] = 'task'
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")

@bot.message_handler(func=lambda m: user_steps.get(m.chat.id) == 'task')
def get_task_desc(message):
    temp_task_data[message.chat.id]['task'] = message.text
    user_steps[message.chat.id] = 'deadline'
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω (–ß–ß:–ú–ú):")

@bot.message_handler(func=lambda m: user_steps.get(m.chat.id) == 'deadline')
def get_task_deadline(message):
    if not re.match(r"^\d{2}:\d{2}$", message.text):
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!")
        return
    data = temp_task_data[message.chat.id]
    data['deadline'] = message.text
    add_task(data['date'], data['category'], data['subcategory'], data['task'], data['deadline'], message.chat.id)
    bot.send_message(message.chat.id, "‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=main_menu())
    user_steps.pop(message.chat.id, None)
    temp_task_data.pop(message.chat.id, None)

# ====== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ======
@bot.message_handler(commands=["start"])
def start_cmd(message):
    bot.send_message(message.chat.id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "üìÖ –°–µ–≥–æ–¥–Ω—è")
def today_tasks(message):
    today = datetime.now(TIMEZONE).strftime("%d.%m.%Y")
    tasks = get_tasks_for_date(message.chat.id, today)
    bot.send_message(message.chat.id, format_tasks_by_category(tasks, today))

@bot.message_handler(func=lambda msg: msg.text == "üìÜ –ù–µ–¥–µ–ª—è")
def week_menu_cmd(message):
    bot.send_message(message.chat.id, "üìÜ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:", reply_markup=week_days_menu())

@bot.message_handler(func=lambda msg: msg.text == "üóì –í—Å—è –Ω–µ–¥–µ–ª—è")
def all_week_tasks(message):
    tasks = get_tasks_for_week(message.chat.id)
    if tasks:
        today = datetime.now(TIMEZONE)
        text = "üóì –í—Å–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é:\n\n"
        for i in range(7):
            day_date = (today + timedelta(days=i)).strftime("%d.%m.%Y")
            day_tasks = [t for t in tasks if t["–î–∞—Ç–∞"] == day_date]
            text += format_tasks_by_category(day_tasks, day_date) + "\n\n"
        bot.send_message(message.chat.id, text.strip())
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–∞ –Ω–µ–¥–µ–ª—é –∑–∞–¥–∞—á –Ω–µ—Ç.")

@bot.message_handler(func=lambda msg: "(" in msg.text and ")" in msg.text)
def day_tasks_cmd(message):
    date_str = message.text.split("(")[1].strip(")")
    tasks = get_tasks_for_date(message.chat.id, date_str)
    bot.send_message(message.chat.id, format_tasks_by_category(tasks, date_str))

@bot.message_handler(func=lambda msg: msg.text == "‚¨Ö –ù–∞–∑–∞–¥")
def back_to_main(message):
    bot.send_message(message.chat.id, "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

# ====== –ü–õ–ê–ù–ò–†–û–í–©–ò–ö ======
def send_daily_plan():
    today = datetime.now(TIMEZONE).strftime("%d.%m.%Y")
    for user in get_users():
        tasks = get_tasks_for_date(user["id"], today)
        if tasks:
            bot.send_message(user["id"], format_tasks_by_category(tasks, today))

def run_scheduler():
    schedule.every().day.at("09:00").do(send_daily_plan)
    while True:
        schedule.run_pending()
        time.sleep(1)

# ====== WEBHOOK ======
app = Flask(__name__)

@app.route("/" + API_TOKEN, methods=["POST"])
def webhook():
    update = telebot.types.Update.de_json(request.get_data().decode("utf-8"))
    bot.process_new_updates([update])
    return "OK", 200

@app.route("/")
def home():
    return "Bot is running!"

if __name__ == "__main__":
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL)
    threading.Thread(target=run_scheduler, daemon=True).start()
    app.run(host="0.0.0.0", port=5000)
