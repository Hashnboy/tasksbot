# tasks_bot.py
import os
import re
import json
import time
import pytz
import gspread
import logging
import schedule
import threading
from datetime import datetime, timedelta
from flask import Flask, request, abort
from telebot import TeleBot, types

# =========================
# –ù–ê–°–¢–†–û–ô–ö–ò / –û–ö–†–£–ñ–ï–ù–ò–ï
# =========================
API_TOKEN = os.getenv("API_TOKEN")  # TELEGRAM BOT TOKEN
TABLE_URL = os.getenv("TABLE_URL")  # GOOGLE SHEETS URL
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")  # OpenAI
CREDENTIALS_FILE = os.getenv("CREDENTIALS_FILE", "/etc/secrets/credentials.json")

# –ü—É–±–ª–∏—á–Ω—ã–π URL —Å–µ—Ä–≤–∏—Å–∞ (Render ‚Üí Settings ‚Üí Environment ‚Üí BASE_URL)
BASE_URL = os.getenv("BASE_URL", "https://tasksbot-hy3t.onrender.com")
WEBHOOK_URL = f"{BASE_URL}/{API_TOKEN}"

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å
TZ_NAME = os.getenv("BOT_TZ", "Europe/Moscow")
TZ = pytz.timezone(TZ_NAME)

# =========================
# –õ–û–ì–ò
# =========================
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s"
)
log = logging.getLogger("tasksbot")

# =========================
# –ü–†–û–í–ï–†–ö–ò –°–ï–ö–†–ï–¢–û–í
# =========================
if not API_TOKEN:
    log.error("API_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    raise SystemExit(1)
if not TABLE_URL:
    log.error("TABLE_URL –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    raise SystemExit(1)

# =========================
# TELEGRAM BOT + FLASK
# =========================
bot = TeleBot(API_TOKEN, parse_mode="HTML")
app = Flask(__name__)

# =========================
# GOOGLE SHEETS
# –ó–∞–¥–∞—á–∏: –î–∞—Ç–∞ | –ö–∞—Ç–µ–≥–æ—Ä–∏—è | –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è | –ó–∞–¥–∞—á–∞ | –î–µ–¥–ª–∞–π–Ω | –°—Ç–∞—Ç—É—Å | –ü–æ–≤—Ç–æ—Ä | User ID
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: –ò–º—è | Telegram ID | –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–¥–∞—á
# –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–∞–¥–∞—á–∏: –û–ø–∏—Å–∞–Ω–∏–µ | –ö–∞—Ç–µ–≥–æ—Ä–∏—è | –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è | –í—Ä–µ–º—è | –ü—Ä–∞–≤–∏–ª–æ | User ID
# =========================
try:
    gc = gspread.service_account(filename=CREDENTIALS_FILE)
    sh = gc.open_by_url(TABLE_URL)
    tasks_ws = sh.worksheet("–ó–∞–¥–∞—á–∏")
    users_ws = sh.worksheet("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
    try:
        repeat_ws = sh.worksheet("–ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–∞–¥–∞—á–∏")
    except Exception:
        repeat_ws = None
        log.warning("–õ–∏—Å—Ç '–ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–∞–¥–∞—á–∏' –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
except Exception as e:
    log.exception("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets")
    raise

# =========================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# =========================
def today_str():
    return datetime.now(TZ).strftime("%d.%m.%Y")

def week_dates(start: datetime = None):
    base = start or datetime.now(TZ)
    return [(base + timedelta(days=i)).strftime("%d.%m.%Y") for i in range(7)]

def to_weekday_ru(dt: datetime):
    wd = dt.weekday()
    names = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫","–í—Ç–æ—Ä–Ω–∏–∫","–°—Ä–µ–¥–∞","–ß–µ—Ç–≤–µ—Ä–≥","–ü—è—Ç–Ω–∏—Ü–∞","–°—É–±–±–æ—Ç–∞","–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    return names[wd]

def get_users():
    users = []
    for row in users_ws.get_all_records():
        tid = str(row.get("Telegram ID") or "").strip()
        if not tid:
            continue
        raw = str(row.get("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–¥–∞—á") or "").strip()
        cats = [c.strip() for c in raw.split(",")] if raw else []
        users.append({"name": row.get("–ò–º—è",""), "id": tid, "categories": cats})
    return users

def get_tasks_for_date(user_id, date_str_):
    res = []
    for row in tasks_ws.get_all_records():
        if str(row.get("User ID")) == str(user_id) and str(row.get("–î–∞—Ç–∞")) == date_str_:
            res.append(row)
    return res

def get_tasks_for_week(user_id):
    dates = week_dates()
    res = []
    for row in tasks_ws.get_all_records():
        if str(row.get("User ID")) == str(user_id) and str(row.get("–î–∞—Ç–∞")) in dates:
            res.append(row)
    return res

def add_task(date, category, subcategory, task, deadline, user_id, status="", repeat=""):
    date = date or ""
    category = category or ""
    subcategory = subcategory or ""
    task = task or ""
    deadline = deadline or ""
    status = status or ""
    repeat = repeat or ""
    user_id = str(user_id) if user_id is not None else ""
    tasks_ws.append_row(
        [date, category, subcategory, task, deadline, status, repeat, user_id],
        value_input_option="USER_ENTERED"
    )

def format_tasks_grouped(date_title, tasks):
    if not tasks:
        return f"üìÖ –ó–∞–¥–∞—á–∏ –Ω–∞ {date_title}\n\n–ü—É—Å—Ç–æ ‚Äî –æ—Ç–¥—ã—Ö–∞–µ–º üòé"
    grouped = {}
    for t in tasks:
        cat = (t.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è") or "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏").strip()
        sub = (t.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è") or "‚Äî").strip()
        grouped.setdefault(cat, {}).setdefault(sub, []).append(t)

    parts = [f"üìÖ –ó–∞–¥–∞—á–∏ –Ω–∞ <b>{date_title}</b>\n"]
    for cat, subs in grouped.items():
        parts.append(f"üìÇ <b>{cat}</b>")
        for sub, items in subs.items():
            parts.append(f"  ‚îî <i>{sub}</i>")
            for it in items:
                status = (it.get("–°—Ç–∞—Ç—É—Å") or "").lower()
                done = "‚úÖ" if status == "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ" else "‚¨ú"
                dl = it.get("–î–µ–¥–ª–∞–π–Ω") or ""
                rep = (it.get("–ü–æ–≤—Ç–æ—Ä") or "").strip()
                sticker = " üîÅ" if rep else ""
                parts.append(f"    {done} {it.get('–ó–∞–¥–∞—á–∞','')}{sticker}  (–¥–æ {dl})")
        parts.append("")
    return "\n".join(parts).strip()

def format_week_all(user_id):
    out = ["üóì <b>–í—Å–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é</b>\n"]
    base = datetime.now(TZ)
    for i in range(7):
        d = base + timedelta(days=i)
        d_str = d.strftime("%d.%m.%Y")
        day_name = to_weekday_ru(d)
        tasks = get_tasks_for_date(user_id, d_str)
        out.append(f"‚Ä¢ <b>{day_name}</b> ‚Äî {d_str}")
        if tasks:
            out.append("")
            out.append(format_tasks_grouped(d_str, tasks))
        else:
            out.append("  –ü—É—Å—Ç–æ")
        out.append("")
    return "\n".join(out)

def week_days_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    base = datetime.now(TZ)
    for i in range(7):
        d = base + timedelta(days=i)
        btn_text = f"{to_weekday_ru(d)} ({d.strftime('%d.%m.%Y')})"
        markup.add(btn_text)
    markup.add("üóì –í—Å—è –Ω–µ–¥–µ–ª—è", "‚¨Ö –ù–∞–∑–∞–¥")
    return markup

def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üìÖ –°–µ–≥–æ–¥–Ω—è", "üìÜ –ù–µ–¥–µ–ª—è")
    markup.add("üóì –í—Å—è –Ω–µ–¥–µ–ª—è", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
    markup.add("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
    markup.add("ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞")
    return markup

# =========================
# GPT-–ê–°–°–ò–°–¢–ï–ù–¢ (NLP)
# =========================
def ai_parse_intent(user_text):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON:
    { "action": "mark_done|add_task|list_today|list_date|list_week|unknown",
      "date": "–î–î.–ú–ú.–ì–ì–ì–ì"|null,
      "task": "...", "category": "...", "subcategory": "...", "deadline": "–ß–ß:–ú–ú"|null }
    """
    if not OPENAI_API_KEY:
        low = user_text.lower()
        if "–≤—ã–ø–æ–ª–Ω" in low:
            return {"action": "mark_done", "task": user_text, "date": None, "category": None, "subcategory": None, "deadline": None}
        if "–¥–æ–±–∞–≤" in low or "—Å–æ–∑–¥–∞–π" in low:
            return {"action": "add_task", "task": user_text, "date": None, "category": None, "subcategory": None, "deadline": None}
        if "–Ω–µ–¥–µ–ª" in low:
            return {"action": "list_week", "date": None, "task": None, "category": None, "subcategory": None, "deadline": None}
        if "—Å–µ–≥–æ–¥–Ω" in low:
            return {"action": "list_today", "date": today_str(), "task": None, "category": None, "subcategory": None, "deadline": None}
        m = re.search(r"\b(\d{2}\.\d{2}\.\d{4})\b", user_text)
        if m:
            return {"action": "list_date", "date": m.group(1), "task": None, "category": None, "subcategory": None, "deadline": None}
        return {"action": "unknown", "date": None, "task": None, "category": None, "subcategory": None, "deadline": None}

    try:
        from openai import OpenAI
        client = OpenAI(api_key=OPENAI_API_KEY)
        system_msg = (
            "–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∑–∞–¥–∞—á–∞–º. –ü–∞—Ä—Å–∏—à—å –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "
            "–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ JSON –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π. –ö–ª—é—á–∏: "
            "action (mark_done|add_task|list_today|list_date|list_week|unknown), "
            "date (–î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ null), task, category, subcategory, deadline (–ß–ß:–ú–ú –∏–ª–∏ null). "
            "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–≤–æ—Ä–∏—Ç '—è –≤—ã–ø–æ–ª–Ω–∏–ª ‚Ä¶' ‚Äî action=mark_done, task=–Ω–∞–∑–≤–∞–Ω–∏–µ. "
            "–ï—Å–ª–∏ '–¥–æ–±–∞–≤—å ‚Ä¶ –∑–∞–≤—Ç—Ä–∞ –≤ 14:00' ‚Äî action=add_task, date=–∑–∞–≤—Ç—Ä–∞, deadline=14:00."
        )
        resp = client.chat.completions.create(
            model=os.getenv("OPENAI_MODEL", "gpt-4o-mini"),
            messages=[
                {"role": "system", "content": system_msg},
                {"role": "user", "content": user_text}
            ],
            temperature=0.2
        )
        raw = resp.choices[0].message.content.strip()
        m = re.search(r"\{.*\}", raw, re.S)
        data = json.loads(m.group(0) if m else raw)
        for k in ["action","date","task","category","subcategory","deadline"]:
            data.setdefault(k, None)
        return data
    except Exception as e:
        log.error("AI error: %s", e, exc_info=True)
        return {"action": "unknown", "date": None, "task": None, "category": None, "subcategory": None, "deadline": None}

def find_task_row(user_id, date_str_, task_substr):
    rows = tasks_ws.get_all_records()
    for idx, row in enumerate(rows, start=2):  # 1 ‚Äî –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if str(row.get("User ID")) != str(user_id):
            continue
        if date_str_ and str(row.get("–î–∞—Ç–∞")) != date_str_:
            continue
        title = row.get("–ó–∞–¥–∞—á–∞") or ""
        if task_substr.lower() in title.lower():
            return idx, row
    return None, None

# =========================
# –ü–û–í–¢–û–†–Ø–Æ–©–ò–ï–°–Ø –ó–ê–î–ê–ß–ò
# =========================
def process_repeating_tasks_for_today():
    if not repeat_ws:
        return
    today = datetime.now(TZ)
    today_d = today.strftime("%d.%m.%Y")
    rows = repeat_ws.get_all_records()

    for r in rows:
        rule = (r.get("–ü—Ä–∞–≤–∏–ª–æ") or "").strip().lower()
        desc = (r.get("–û–ø–∏—Å–∞–Ω–∏–µ") or "").strip()
        cat = (r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è") or "").strip()
        sub = (r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è") or "").strip()
        time_str = (r.get("–í—Ä–µ–º—è") or "").strip()
        uid = str(r.get("User ID") or "").strip()
        if not uid or not desc:
            continue

        def add_if_not_exists(target_date):
            day_tasks = get_tasks_for_date(uid, target_date)
            if any((t.get("–ó–∞–¥–∞—á–∞") or "").strip().lower() == desc.lower() for t in day_tasks):
                return
            add_task(target_date, cat, sub, desc, time_str, uid, status="", repeat=rule)

        if rule == "–∫–∞–∂–¥—ã–π –¥–µ–Ω—å":
            add_if_not_exists(today_d)
        elif rule.startswith("–∫–∞–∂–¥—ã–π"):
            parts = [p.strip() for p in rule.replace("–∫–∞–∂–¥—ã–π", "").split(",")]
            weekdays_ru = {
                "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": 0, "–≤—Ç–æ—Ä–Ω–∏–∫": 1, "—Å—Ä–µ–¥–∞": 2,
                "—á–µ—Ç–≤–µ—Ä–≥": 3, "–ø—è—Ç–Ω–∏—Ü–∞": 4, "—Å—É–±–±–æ—Ç–∞": 5, "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": 6
            }
            if weekdays_ru.get(to_weekday_ru(today).lower()) in [weekdays_ru.get(p) for p in parts if p in weekdays_ru]:
                add_if_not_exists(today_d)
        elif rule == "–∑–∞–≤—Ç—Ä–∞ –∏ –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞":
            z = (today + timedelta(days=1)).strftime("%d.%m.%Y")
            pz = (today + timedelta(days=2)).strftime("%d.%m.%Y")
            add_if_not_exists(z)
            add_if_not_exists(pz)
        elif rule.startswith("—á–µ—Ä–µ–∑"):
            m = re.search(r"—á–µ—Ä–µ–∑\s+(\d+)", rule)
            if m:
                add_if_not_exists(today_d)
        else:
            continue

# =========================
# –†–ê–°–°–´–õ–ö–ê –í 09:00
# =========================
def send_daily_plan():
    try:
        if repeat_ws:
            process_repeating_tasks_for_today()
    except Exception as e:
        log.error("–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∑–∞–¥–∞—á: %s", e, exc_info=True)

    date_title = today_str()
    for u in get_users():
        uid = u["id"]
        tasks = get_tasks_for_date(uid, date_title)
        msg = format_tasks_grouped(date_title, tasks)
        try:
            bot.send_message(uid, msg, reply_markup=main_menu())
        except Exception as e:
            log.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–ª–∞–Ω %s: %s", uid, e)

def run_scheduler():
    schedule.clear()
    schedule.every().day.at("09:00").do(send_daily_plan)
    while True:
        try:
            schedule.run_pending()
            time.sleep(1)
        except Exception as e:
            log.error("Scheduler error: %s", e, exc_info=True)
            time.sleep(2)

# =========================
# –•–ï–ù–î–õ–ï–†–´ / –ö–ù–û–ü–ö–ò
# =========================
@bot.message_handler(commands=["start"])
def start_cmd(message):
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∑–∞–¥–∞—á–∞–º. –í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–Ø –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–∫–∞–∑ –§–µ–¥—è¬ª).",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda m: m.text == "üìÖ –°–µ–≥–æ–¥–Ω—è")
def today_tasks(message):
    uid = message.chat.id
    date_title = today_str()
    tasks = get_tasks_for_date(uid, date_title)
    bot.send_message(uid, format_tasks_grouped(date_title, tasks), reply_markup=main_menu())

@bot.message_handler(func=lambda m: m.text == "üìÜ –ù–µ–¥–µ–ª—è")
def week_menu(message):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å:", reply_markup=week_days_menu())

@bot.message_handler(func=lambda m: m.text == "üóì –í—Å—è –Ω–µ–¥–µ–ª—è")
def all_week(message):
    uid = message.chat.id
    bot.send_message(uid, format_week_all(uid), reply_markup=main_menu())

@bot.message_handler(func=lambda m: "(" in (m.text or "") and ")" in (m.text or ""))
def day_tasks(message):
    uid = message.chat.id
    try:
        date_str_ = message.text.split("(")[1].split(")")[0].strip()
    except Exception:
        return
    tasks = get_tasks_for_date(uid, date_str_)
    try:
        d = datetime.strptime(date_str_, "%d.%m.%Y")
        title = f"{to_weekday_ru(d)} ‚Äî {date_str_}"
    except Exception:
        title = date_str_
    bot.send_message(uid, format_tasks_grouped(title, tasks), reply_markup=main_menu())

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á (–º–∞—Å—Ç–µ—Ä)
user_steps = {}
temp_task_data = {}

@bot.message_handler(func=lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
def add_task_start(message):
    uid = message.chat.id
    user_steps[uid] = "date"
    temp_task_data[uid] = {}
    bot.send_message(uid, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–î–î.–ú–ú.–ì–ì–ì–ì):")

@bot.message_handler(func=lambda m: user_steps.get(m.chat.id) == "date")
def add_task_date(message):
    if not re.match(r"^\d{2}\.\d{2}\.\d{4}$", message.text.strip()):
        bot.send_message(message.chat.id, "‚ùå –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü—Ä–∏–º–µ—Ä: 13.08.2025")
        return
    temp_task_data[message.chat.id]["date"] = message.text.strip()
    user_steps[message.chat.id] = "category"
    bot.send_message(message.chat.id, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è:")

@bot.message_handler(func=lambda m: user_steps.get(m.chat.id) == "category")
def add_task_category(message):
    temp_task_data[message.chat.id]["category"] = message.text.strip()
    user_steps[message.chat.id] = "subcategory"
    bot.send_message(message.chat.id, "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è:")

@bot.message_handler(func=lambda m: user_steps.get(m.chat.id) == "subcategory")
def add_task_subcategory(message):
    temp_task_data[message.chat.id]["subcategory"] = message.text.strip()
    user_steps[message.chat.id] = "title"
    bot.send_message(message.chat.id, "–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")

@bot.message_handler(func=lambda m: user_steps.get(m.chat.id) == "title")
def add_task_title(message):
    temp_task_data[message.chat.id]["task"] = message.text.strip()
    user_steps[message.chat.id] = "deadline"
    bot.send_message(message.chat.id, "–î–µ–¥–ª–∞–π–Ω (–ß–ß:–ú–ú), –º–æ–∂–Ω–æ –ø—É—Å—Ç–æ:")

@bot.message_handler(func=lambda m: user_steps.get(m.chat.id) == "deadline")
def add_task_deadline(message):
    uid = message.chat.id
    dl = message.text.strip()
    if dl and not re.match(r"^\d{2}:\d{2}$", dl):
        bot.send_message(uid, "‚ùå –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü—Ä–∏–º–µ—Ä: 14:30. –ò–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç–æ.")
        return
    data = temp_task_data.get(uid, {})
    add_task(
        data.get("date"), data.get("category"), data.get("subcategory"),
        data.get("task"), dl, uid, status="", repeat=""
    )
    bot.send_message(uid, "‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=main_menu())
    temp_task_data.pop(uid, None)
    user_steps.pop(uid, None)

# –û—Ç–º–µ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–º–∞—Å—Ç–µ—Ä)
mark_steps = {}
@bot.message_handler(func=lambda m: m.text == "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
def mark_start(message):
    uid = message.chat.id
    date_title = today_str()
    tasks = get_tasks_for_date(uid, date_title)
    if not tasks:
        bot.send_message(uid, "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞—á –Ω–µ—Ç.", reply_markup=main_menu())
        return
    lines = [f"üìã –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –Ω–∞ {date_title}:"]
    for i, t in enumerate(tasks, 1):
        lines.append(f"{i}. {t.get('–ó–∞–¥–∞—á–∞','')} (–¥–æ {t.get('–î–µ–¥–ª–∞–π–Ω','')})")
    bot.send_message(uid, "\n".join(lines))
    mark_steps[uid] = {"date": date_title, "await": True}

@bot.message_handler(func=lambda m: mark_steps.get(m.chat.id, {}).get("await") is True and re.match(r"^\d+$", (m.text or "").strip()))
def mark_pick(message):
    uid = message.chat.id
    info = mark_steps.get(uid, {})
    date_title = info.get("date")
    tasks = get_tasks_for_date(uid, date_title)
    idx = int((message.text or "0").strip()) - 1
    if idx < 0 or idx >= len(tasks):
        bot.send_message(uid, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –û—Ç–º–µ–Ω–∞.", reply_markup=main_menu())
        mark_steps.pop(uid, None)
        return
    task_title = tasks[idx].get("–ó–∞–¥–∞—á–∞") or ""
    row_index, _ = find_task_row(uid, date_title, task_title)
    if not row_index:
        bot.send_message(uid, "–ù–µ –Ω–∞—à—ë–ª –∑–∞–¥–∞—á—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=main_menu())
        mark_steps.pop(uid, None)
        return
    tasks_ws.update_cell(row_index, 6, "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
    bot.send_message(uid, f"‚úÖ –ì–æ—Ç–æ–≤–æ: <b>{task_title}</b>", reply_markup=main_menu())
    mark_steps.pop(uid, None)

# GPT —Å–≤–æ–±–æ–¥–Ω—ã–π –≤–æ–ø—Ä–æ—Å
@bot.message_handler(func=lambda m: m.text == "ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞")
def ask_ai_prompt(message):
    bot.send_message(
        message.chat.id,
        "–°–ø—Ä–æ—Å–∏ –º–µ–Ω—è –æ –∑–∞–¥–∞—á–∞—Ö: ¬´—è –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–∫–∞–∑ —Ñ–µ–¥—è¬ª, ¬´–¥–æ–±–∞–≤—å –∑–∞–¥–∞—á—É –∑–∞–≤—Ç—Ä–∞ –≤ 14:00¬ª, ¬´–ø–æ–∫–∞–∂–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ –ø—è—Ç–Ω–∏—Ü—É¬ª.\n–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ:"
    )

# –û–±—â–∏–π NLP-—Ö–µ–Ω–¥–ª–µ—Ä
@bot.message_handler(func=lambda m: True)
def ai_router(message):
    txt = (message.text or "").strip()
    if txt in ["üìÖ –°–µ–≥–æ–¥–Ω—è", "üìÜ –ù–µ–¥–µ–ª—è", "üóì –í—Å—è –Ω–µ–¥–µ–ª—è", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", "ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞", "‚¨Ö –ù–∞–∑–∞–¥"]:
        return

    intent = ai_parse_intent(txt)
    uid = message.chat.id

    if intent["action"] == "list_week":
        bot.send_message(uid, format_week_all(uid), reply_markup=main_menu())
        return

    if intent["action"] == "list_today":
        d = today_str()
        bot.send_message(uid, format_tasks_grouped(d, get_tasks_for_date(uid, d)), reply_markup=main_menu())
        return

    if intent["action"] == "list_date" and intent.get("date"):
        d = intent["date"]
        try:
            dt = datetime.strptime(d, "%d.%m.%Y")
            title = f"{to_weekday_ru(dt)} ‚Äî {d}"
        except Exception:
            title = d
        bot.send_message(uid, format_tasks_grouped(title, get_tasks_for_date(uid, d)), reply_markup=main_menu())
        return

    if intent["action"] == "mark_done" and intent.get("task"):
        d = intent.get("date") or today_str()
        row_index, row = find_task_row(uid, d, intent["task"])
        if not row_index:
            for d2 in week_dates():
                row_index, row = find_task_row(uid, d2, intent["task"])
                if row_index:
                    d = d2
                    break
        if not row_index:
            bot.send_message(uid, "–ù–µ –Ω–∞—à—ë–ª —Ç–∞–∫—É—é –∑–∞–¥–∞—á—É. –£—Ç–æ—á–Ω–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –¥–∞—Ç—É.")
            return
        tasks_ws.update_cell(row_index, 6, "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
        bot.send_message(uid, f"‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è: <b>{row.get('–ó–∞–¥–∞—á–∞','')}</b>")
        return

    if intent["action"] == "add_task" and intent.get("task"):
        d = intent.get("date")
        if not d:
            m = re.search(r"\b(\d{2}\.\d{2}\.\d{4})\b", txt)
            if m:
                d = m.group(1)
        if not d:
            low = txt.lower()
            if "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞" in low:
                d = (datetime.now(TZ) + timedelta(days=2)).strftime("%d.%m.%Y")
            elif "–∑–∞–≤—Ç—Ä–∞" in low:
                d = (datetime.now(TZ) + timedelta(days=1)).strftime("%d.%m.%Y")
            else:
                d = today_str()

        deadline = intent.get("deadline")
        if not deadline:
            m = re.search(r"\b(\d{2}:\d{2})\b", txt)
            if m:
                deadline = m.group(1)

        add_task(
            d,
            intent.get("category") or "–û–±—â–µ–µ",
            intent.get("subcategory") or "‚Äî",
            intent["task"],
            deadline or "",
            uid,
            status="",
            repeat=""
        )
        bot.send_message(uid, f"‚úÖ –î–æ–±–∞–≤–∏–ª –∑–∞–¥–∞—á—É –Ω–∞ {d}:\n‚Ä¢ {intent['task']}" + (f" (–¥–æ {deadline})" if deadline else ""))
        return

    bot.send_message(uid, "–Ø –Ω–µ –ø–æ–Ω—è–ª –∑–∞–ø—Ä–æ—Å ü§î –ü–æ–ø—Ä–æ–±—É–π –∏–Ω–∞—á–µ –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é.", reply_markup=main_menu())

# =========================
# –í–ï–ë–•–£–ö
# =========================
@app.route(f"/{API_TOKEN}", methods=["POST"])
def webhook():
    if request.method == "POST":
        try:
            update = types.Update.de_json(request.get_data().decode("utf-8"))
        except Exception:
            abort(400)
        bot.process_new_updates([update])
        return "OK", 200
    return "Method Not Allowed", 405

@app.route("/")
def home():
    return "Bot is running!", 200

# =========================
# –°–¢–ê–†–¢ –°–ï–†–í–ï–†–ê
# =========================
def setup_webhook():
    try:
        bot.remove_webhook()
    except Exception:
        pass
    ok = bot.set_webhook(url=WEBHOOK_URL, allowed_updates=["message"])
    if ok:
        log.info("Webhook set to %s", WEBHOOK_URL)
    else:
        log.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±—Ö—É–∫")

if __name__ == "__main__":
    setup_webhook()
    th = threading.Thread(target=run_scheduler, daemon=True)
    th.start()
    port = int(os.getenv("PORT", "5000"))
    app.run(host="0.0.0.0", port=port)
