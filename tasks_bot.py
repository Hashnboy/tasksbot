# -*- coding: utf-8 -*-
"""
–§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∑–∞–¥–∞—á –±–µ–∑ –ª–∏—Å—Ç–∞ ¬´–í—Å–µ –∑–∞–¥–∞—á–∏¬ª.
–ü–æ–¥–¥–µ—Ä–∂–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏–∏-–ª–∏—Å—Ç—ã (–ö–æ—Ñ–µ–π–Ω—è, –¢–∞–±–∞—á–∫–∞, –õ–∏—á–Ω–æ–µ, WB), –ø–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å, –∞–≤—Ç–æ–ø–æ—Å—Ç–∞–≤–∫–∏,
–ø–∞–≥–∏–Ω–∞—Ü–∏—è, –ø–æ–¥–∑–∞–¥–∞—á–∏, –º–∞—Å—Å–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞, NLP –Ω–∞ OPENAI_API_KEY.
"""

import os, re, json, time, pytz, hmac, hashlib, logging, schedule, threading
from datetime import datetime, timedelta, date
from typing import List, Dict, Tuple

import gspread
from flask import Flask, request
from telebot import TeleBot, types

# ===================== –û–ö–†–£–ñ–ï–ù–ò–ï =====================
API_TOKEN        = os.getenv("TELEGRAM_TOKEN")
TABLE_URL        = os.getenv("GOOGLE_SHEETS_URL")
CREDENTIALS_FILE = os.getenv("GOOGLE_CREDENTIALS_JSON", "/etc/secrets/credentials.json")
WEBHOOK_BASE     = os.getenv("WEBHOOK_BASE")
OPENAI_API_KEY   = os.getenv("OPENAI_API_KEY")
TZ_NAME          = os.getenv("TZ", "Europe/Moscow")
WEBHOOK_URL      = f"{WEBHOOK_BASE}/{API_TOKEN}" if API_TOKEN and WEBHOOK_BASE else None
LOCAL_TZ         = pytz.timezone(TZ_NAME)

logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
log = logging.getLogger("tasksbot")

# ===================== –ë–û–¢ / SHEETS =====================
bot = TeleBot(API_TOKEN, parse_mode="HTML")

# –õ–∏—Å—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –ò–ó–ù–ê–ß–ê–õ–¨–ù–û –î–û–õ–ñ–ù–´ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
CATEGORY_SHEETS = ["–ö–æ—Ñ–µ–π–Ω—è","–¢–∞–±–∞—á–∫–∞","–õ–∏—á–Ω–æ–µ","WB"]
SHEETS: Dict[str, gspread.Worksheet] = {}
ws_suppliers = ws_users = ws_logs = None

def connect_sheets():
    global SHEETS, ws_suppliers, ws_users, ws_logs
    gc = gspread.service_account(filename=CREDENTIALS_FILE)
    sh = gc.open_by_url(TABLE_URL)

    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –ª–∏—Å—Ç—ã
    for title in ["–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "–õ–æ–≥–∏"]:
        try:
            ws = sh.worksheet(title)
            if title == "–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏": ws_suppliers = ws
            elif title == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏": ws_users = ws
            else: ws_logs = ws
        except gspread.exceptions.WorksheetNotFound:
            log.error("–ù–µ –Ω–∞–π–¥–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ª–∏—Å—Ç: %s (—Å–æ–∑–¥–∞–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ù–ï –±—É–¥–µ–º)", title)
            raise

    # –ö–∞—Ç–µ–≥–æ—Ä–∏–π–Ω—ã–µ –ª–∏—Å—Ç—ã ‚Äî —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
    SHEETS.clear()
    for title in CATEGORY_SHEETS:
        try:
            SHEETS[title] = sh.worksheet(title)
        except gspread.exceptions.WorksheetNotFound:
            log.warning("–ù–µ –Ω–∞–π–¥–µ–Ω –∫–∞—Ç–µ–≥–æ—Ä–∏–π–Ω—ã–π –ª–∏—Å—Ç: %s (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –Ω–µ —Å–æ–∑–¥–∞—ë–º)", title)

    if not SHEETS:
        raise RuntimeError("–ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π–Ω–æ–≥–æ –ª–∏—Å—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–∑–≤–∞–Ω–∏—è –∏ —Ä–µ–≥–∏—Å—Ç—Ä.")

    log.info("Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω—ã. –î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–∏—Å—Ç—ã: %s", ", ".join(SHEETS.keys()))

connect_sheets()

TASKS_HEADERS = ["–î–∞—Ç–∞","–ö–∞—Ç–µ–≥–æ—Ä–∏—è","–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è","–ó–∞–¥–∞—á–∞","–î–µ–¥–ª–∞–π–Ω","User ID","–°—Ç–∞—Ç—É—Å","–ü–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å","–ò—Å—Ç–æ—á–Ω–∏–∫"]
PAGE_SIZE = 7

# ===================== –£–¢–ò–õ–ò–¢–´ –î–ê–¢/ID =====================
WEEKDAYS_RU = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫","–≤—Ç–æ—Ä–Ω–∏–∫","—Å—Ä–µ–¥–∞","—á–µ—Ç–≤–µ—Ä–≥","–ø—è—Ç–Ω–∏—Ü–∞","—Å—É–±–±–æ—Ç–∞","–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]

def now_local(): return datetime.now(LOCAL_TZ)
def today_str(dt=None):
    if dt is None: dt = now_local()
    return dt.strftime("%d.%m.%Y")
def weekday_ru(dt: datetime) -> str:
    return ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫","–í—Ç–æ—Ä–Ω–∏–∫","–°—Ä–µ–¥–∞","–ß–µ—Ç–≤–µ—Ä–≥","–ü—è—Ç–Ω–∏—Ü–∞","–°—É–±–±–æ—Ç–∞","–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"][dt.weekday()]

def parse_ru_date(s: str) -> date | None:
    s = (s or "").strip()
    if not s: return None
    try: return datetime.strptime(s, "%d.%m.%Y").date()
    except: return None

def parse_time(s: str) -> Tuple[int,int] | None:
    if not s: return None
    m = re.fullmatch(r"(\d{1,2}):(\d{2})", s.strip())
    if not m: return None
    hh = int(m.group(1)); mm = int(m.group(2))
    if 0 <= hh <= 23 and 0 <= mm <= 59: return hh, mm
    return None

def sha_task_id(row: Dict) -> str:
    key = "|".join([str(row.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è","")), str(row.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è","")), str(row.get("–ó–∞–¥–∞—á–∞","")),
                    str(row.get("–î–µ–¥–ª–∞–π–Ω","")), str(row.get("User ID","")), str(row.get("–ò—Å—Ç–æ—á–Ω–∏–∫",""))])
    return hashlib.sha1(key.encode("utf-8")).hexdigest()[:16]

def log_event(user_id, action, payload=""):
    try:
        ws_logs.append_row([datetime.utcnow().isoformat(), str(user_id), action, payload], value_input_option="USER_ENTERED")
    except Exception:
        pass

# ===================== –ß–¢–ï–ù–ò–ï / –ó–ê–ü–ò–°–¨ –ó–ê–î–ê–ß =====================
def get_all_rows() -> List[Tuple[str, Dict]]:
    """–í–µ—Ä–Ω—ë—Ç [(sheet_title, row_dict), ...] –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞."""
    acc = []
    for title, ws in SHEETS.items():
        try:
            rows = ws.get_all_records()
            for r in rows:
                # –ù–∞—Å–∏–ª—å–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤
                for h in TASKS_HEADERS:
                    r.setdefault(h, "")
                r["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] = r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è") or title
                acc.append((title, r))
        except Exception as e:
            log.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–∏—Å—Ç–∞ %s: %s", title, e)
    return acc

def append_to_sheet(category: str, row: List[str]):
    ws = SHEETS.get(category)
    if not ws:
        raise RuntimeError(f"–õ–∏—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{category}¬ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω).")
    ws.append_row(row, value_input_option="USER_ENTERED")

def update_cell_by_match(category: str, match_row: Dict, col_name: str, value: str) -> bool:
    """–û–±–Ω–æ–≤–∏—Ç –ø–µ—Ä–≤—É—é —Å–æ–≤–ø–∞–≤—à—É—é —Å—Ç—Ä–æ–∫—É –ø–æ –∑–∞–¥–∞—á–Ω–æ–º—É id (–±–µ–∑ –¥–∞—Ç—ã)"""
    ws = SHEETS.get(category); 
    if not ws: return False
    rows = ws.get_all_records()
    for i, r in enumerate(rows, start=2):
        probe = {"–ö–∞—Ç–µ–≥–æ—Ä–∏—è":category, **r}
        if sha_task_id(probe) == sha_task_id(match_row):
            j = TASKS_HEADERS.index(col_name) + 1
            ws.update_cell(i, j, value)
            return True
    return False

# ===================== –ü–†–ê–í–ò–õ–ê –ü–û–°–¢–ê–í–©–ò–ö–û–í =====================
SUPPLIER_RULES: Dict[str, Dict] = {}  # lower -> rule

def load_supplier_rules_from_sheet():
    SUPPLIER_RULES.clear()
    try:
        rows = ws_suppliers.get_all_records()
        for r in rows:
            name = str(r.get("–ü–æ—Å—Ç–∞–≤—â–∏–∫") or "").strip()
            if not name: continue
            key = name.lower()
            rule = {
                "domain": str(r.get("–ü—Ä–∞–≤–∏–ª–æ") or "").strip().lower(),  # ¬´–∫–æ—Ñ–µ–π–Ω—è¬ª/¬´—Ç–∞–±–∞—á–∫–∞¬ª ‚Ä¶
                "order_deadline": str(r.get("–î–µ–¥–ª–∞–π–Ω–ó–∞–∫–∞–∑–∞") or r.get("–î–µ–¥–ª–∞–π–Ω") or "14:00").strip(),
                "delivery_offset_days": int(r.get("DeliveryOffsetDays") or 1),
                "storage_hours": int(r.get("–•—Ä–∞–Ω–µ–Ω–∏–µ (–¥–Ω–∏)") or r.get("–•—Ä–∞–Ω–µ–Ω–∏–µ_–¥–Ω–µ–π") or 0) * 24,
                "start_cycle": str(r.get("–°—Ç–∞—Ä—Ç_—Ü–∏–∫–ª–∞") or "").strip(),
                "auto": str(r.get("–ê–≤—Ç–æ") or "").strip(),
                "active": str(r.get("–ê–∫—Ç–∏–≤–µ–Ω") or "").strip(),
                "emoji": str(r.get("Emoji") or "üì¶").strip(),
                "weekly": str(r.get("–î–µ–¥–ª–∞–π–Ω–ó–∞–∫–∞–∑–∞ –ï–º–æ–¥–∑–∏") or r.get("–î–µ–¥–ª–∞–π–Ω–ó–∞–∫–∞–∑–∞–°–ø–∏—Å–∫–æ–º") or "").strip(),  # –Ω–µ–æ–±—è–∑.
                "areas": str(r.get("–î–µ–¥–ª–∞–π–Ω–ó–∞–∫–∞–∑–∞ –ö–∞—Ç–µ–≥–æ—Ä–∏—è–ó–∞–∫–∞–∑–∞") or r.get("–î–µ–¥–ª–∞–π–Ω–ó–∞–∫–∞–∑–∞") or r.get("–î–µ–¥–ª–∞–π–Ω–ó–∞–∫–∞–∑–∞–ö–∞—Ç–µ–≥–æ—Ä–∏—è") or "").strip()
            }
            SUPPLIER_RULES[key] = rule
    except Exception as e:
        log.warning("–ù–µ —Å–º–æ–≥ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: %s", e)

load_supplier_rules_from_sheet()

def is_order_task(text: str) -> bool:
    t = (text or "").lower()
    return any(k in t for k in ["–∑–∞–∫–∞–∑","–∑–∞–∫–∞–∑–∞—Ç—å","–∑–∞–∫–∞–∑–∏–∫"])

def guess_supplier(text: str) -> str:
    t = (text or "").lower()
    keys = {
        "–∫-—ç–∫—Å–ø—Ä–æ":"–ö-–≠–∫—Å–ø—Ä–æ",
        "–∫ —ç–∫—Å–ø—Ä–æ":"–ö-–≠–∫—Å–ø—Ä–æ",
        "–≤—ã–ª–µ–≥–∂–∞–Ω":"–ò–ü –í—ã–ª–µ–≥–∂–∞–Ω–∏–Ω–∞",
        "—Ä–µ–∞–ª":"–†–µ–∞–ª",
        "–±–∞—Ç—á":"–ë–∞—Ç—á",
        "–ª–æ–±–∞–Ω–æ–≤":"–ò–ü –õ–æ–±–∞–Ω–æ–≤",
        "–∞–≤–∞–Ω—Ç–∞–∂":"–ê–≤–∞–Ω—Ç–∞–∂",
        "—Ñ–µ–¥—è":"–§–µ–¥—è"
    }
    for k,v in keys.items():
        if k in t: return v
    return ""

def normalize_tt_from_subcat(s: str) -> str:
    s = (s or "").lower()
    if "—Ü–µ–Ω—Ç—Ä" in s: return "–¶–µ–Ω—Ç—Ä"
    if "–ø–æ–ª–µ—Ç" in s or "–ø–æ–ª—ë—Ç" in s: return "–ü–æ–ª–µ—Ç"
    if "–∫–ª–∏–º" in s: return "–ö–ª–∏–º–æ–≤–æ"
    return s.capitalize() if s else ""

# ===================== –ü–û–í–¢–û–†–Ø–ï–ú–û–°–¢–¨: —Ä–∞–∑–±–æ—Ä –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è =====================
def parse_repeat(rep: str):
    """
    –ü–æ–¥–¥–µ—Ä–∂–∫–∞:
    - –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏: '–≤—Ç–æ—Ä–Ω–∏–∫', '—á–µ—Ç–≤–µ—Ä–≥', '—Å—Ä–µ–¥–∞' ...
    - '–∫–∞–∂–¥—ã–µ N –¥–Ω–µ–π'
    - '72 —á–∞—Å–∞' (—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç –∫–∞–∂–¥—ã–µ 3 –¥–Ω—è)
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict –≤–∏–¥–∞ {'type':'weekly','days':[1,3]} –∏–ª–∏ {'type':'every_n','n':2}
    """
    s = (rep or "").strip().lower()
    if not s: return None
    for i, w in enumerate(WEEKDAYS_RU):
        if w in s:
            days = [j for j, name in enumerate(WEEKDAYS_RU) if name in s]
            return {"type":"weekly","days":days or [i]}
    m = re.search(r"–∫–∞–∂–¥—ã–µ?\s+(\d+)\s*–¥", s)
    if m:
        return {"type":"every_n","n":max(1,int(m.group(1)))}
    m = re.search(r"(\d+)\s*—á–∞—Å", s)
    if m:
        n = int(m.group(1))
        return {"type":"every_n","n":max(1, n//24 or 1)}
    return None

def expand_rows_for_range(rows: List[Tuple[str,Dict]], start: date, days: int, uid: str) -> List[Tuple[str,Dict]]:
    """
    –ù–∞ –ª–µ—Ç—É —Å–æ–∑–¥–∞—ë—Ç –∏–Ω—Å—Ç–∞–Ω—Å—ã –∑–∞–¥–∞—á –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª [start; start+days).
    –ë–µ—Ä—ë—Ç –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏ —Å —è–≤–Ω–æ–π –¥–∞—Ç–æ–π, —Ç–∞–∫ –∏ —à–∞–±–ª–æ–Ω—ã —Å –ü–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å.
    """
    end = start + timedelta(days=days)
    out = []
    for cat, r in rows:
        # —Ñ–∏–ª—å—Ç—Ä –ø–æ –≤–ª–∞–¥–µ–ª—å—Ü—É
        if str(r.get("User ID") or "").strip() and str(r.get("User ID")).strip() != str(uid):
            continue
        ds = parse_ru_date(r.get("–î–∞—Ç–∞"))
        if ds:
            if start <= ds < end:
                out.append((cat, r))
            continue

        # –±–µ–∑ –¥–∞—Ç—ã: —ç—Ç–æ ¬´—à–∞–±–ª–æ–Ω¬ª —Å –ø–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å—é
        rep = parse_repeat(r.get("–ü–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å"))
        if not rep: 
            continue

        # —Å—Ç–∞—Ä—Ç —Ü–∏–∫–ª–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ò—Å—Ç–æ—á–Ω–∏–∫–µ: start:–î–î.–ú–ú.–ì–ì–ì–ì
        m = re.search(r"start:(\d{2}\.\d{2}\.\d{4})", str(r.get("–ò—Å—Ç–æ—á–Ω–∏–∫","")))
        start_cycle = parse_ru_date(m.group(1)) if m else start

        if rep["type"] == "weekly":
            for i in range(days):
                d = start + timedelta(days=i)
                if d.weekday() in rep["days"]:
                    inst = dict(r)
                    inst["–î–∞—Ç–∞"] = d.strftime("%d.%m.%Y")
                    out.append((cat, inst))
        elif rep["type"] == "every_n":
            # —à–∞–≥ –æ—Ç start_cycle
            n = rep["n"]
            # –Ω–∞–π–¥—ë–º –ø–µ—Ä–≤–æ–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
            cur = start_cycle
            while cur < start:
                cur += timedelta(days=n)
            while cur < end:
                inst = dict(r)
                inst["–î–∞—Ç–∞"] = cur.strftime("%d.%m.%Y")
                out.append((cat, inst))
                cur += timedelta(days=n)
    return out

# ===================== –§–û–†–ú–ê–¢–´ / UI =====================
def build_task_line(r, i=None):
    dl = r.get("–î–µ–¥–ª–∞–π–Ω") or "‚Äî"
    prefix = f"{i}. " if i else ""
    return f"{prefix}{r.get('–ö–∞—Ç–µ–≥–æ—Ä–∏—è','‚Äî')}/{r.get('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è','‚Äî')}: {r.get('–ó–∞–¥–∞—á–∞','')[:40]}‚Ä¶ (–¥–æ {dl})"

def format_grouped(tasks, header_date=None):
    if not tasks: return "–ó–∞–¥–∞—á –Ω–µ—Ç."
    def k(r):
        dl = r.get("–î–µ–¥–ª–∞–π–Ω") or ""
        try: dlk = datetime.strptime(dl, "%H:%M").time()
        except: dlk = datetime.min.time()
        return (r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), dlk, r.get("–ó–∞–¥–∞—á–∞",""))
    tasks = sorted(tasks, key=k)
    out = []
    if header_date:
        dt = datetime.strptime(header_date, "%d.%m.%Y")
        out.append(f"‚Ä¢ {weekday_ru(dt)} ‚Äî {header_date}\n")
    cur_cat = cur_sub = None
    for r in tasks:
        cat = r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è","") or "‚Äî"
        sub = r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è","") or "‚Äî"
        txt = r.get("–ó–∞–¥–∞—á–∞","")
        dl  = r.get("–î–µ–¥–ª–∞–π–Ω","")
        st  = (r.get("–°—Ç–∞—Ç—É—Å","") or "").lower()
        rep = (r.get("–ü–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å","") or "").strip()
        icon = "‚úÖ" if st == "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ" else ("üîÅ" if rep else "‚¨ú")
        if cat != cur_cat:
            out.append(f"üìÇ <b>{cat}</b>"); cur_cat = cat; cur_sub = None
        if sub != cur_sub:
            out.append(f"  ‚îî <b>{sub}</b>"); cur_sub = sub
        line = f"    ‚îî {icon} {txt}"
        if dl: line += f"  <i>(–¥–æ {dl})</i>"
        out.append(line)
    return "\n".join(out)

def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üìÖ –°–µ–≥–æ–¥–Ω—è","üìÜ –ù–µ–¥–µ–ª—è")
    kb.row("‚ûï –î–æ–±–∞–≤–∏—Ç—å","üîé –ù–∞–π—Ç–∏","‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å")
    kb.row("üß† –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç","üìä –û—Ç—á—ë—Ç","‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    return kb

def mk_cb(action, **kwargs):
    payload = {"a": action, **kwargs}
    s = json.dumps(payload, ensure_ascii=False)
    sig = hmac.new(b"cb-key", s.encode("utf-8"), hashlib.sha1).hexdigest()[:6]
    return f"{sig}|{s}"
def parse_cb(data):
    try:
        sig, s = data.split("|", 1)
        check = hmac.new(b"cb-key", s.encode("utf-8"), hashlib.sha1).hexdigest()[:6]
        if sig != check: return None
        return json.loads(s)
    except Exception: return None

def page_buttons(items, page, total_pages, prefix_action):
    kb = types.InlineKeyboardMarkup()
    for it in items:
        kb.add(types.InlineKeyboardButton(it[0], callback_data=mk_cb(prefix_action, id=it[1])))
    nav = []
    if page > 1: nav.append(types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=mk_cb("page", p=page-1, pa=prefix_action)))
    nav.append(types.InlineKeyboardButton(f"{page}/{total_pages}", callback_data="noop"))
    if page < total_pages: nav.append(types.InlineKeyboardButton("‚û°Ô∏è", callback_data=mk_cb("page", p=page+1, pa=prefix_action)))
    if nav: kb.row(*nav)
    return kb

# ===================== GPT (NLP + –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç) =====================
def ai_parse_to_suggest(text):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å-–ø–æ–¥—Å–∫–∞–∑–∫—É: category, subcategory, supplier, date, time, repeat
    """
    suggestion = {"category":"","subcategory":"","supplier":"","date":"","time":"","repeat":""}
    tl = text.lower()
    suggestion["supplier"] = guess_supplier(text)
    if "–∫–æ—Ñ–µ–π–Ω" in tl or suggestion["supplier"] in ["–ö-–≠–∫—Å–ø—Ä–æ","–ò–ü –í—ã–ª–µ–≥–∂–∞–Ω–∏–Ω–∞","–†–µ–∞–ª","–ë–∞—Ç—á","–ò–ü –õ–æ–±–∞–Ω–æ–≤","–ê–≤–∞–Ω—Ç–∞–∂"]:
        suggestion["category"] = "–ö–æ—Ñ–µ–π–Ω—è"
    elif "—Ç–∞–±–∞—á" in tl or suggestion["supplier"] == "–§–µ–¥—è":
        suggestion["category"] = "–¢–∞–±–∞—á–∫–∞"
    m = re.search(r"(—Ü–µ–Ω—Ç—Ä|–ø–æ–ª[–µ—ë]—Ç|–∫–ª–∏–º–æ–≤–æ)", tl)
    if m: suggestion["subcategory"] = normalize_tt_from_subcat(m.group(1))
    m = re.search(r"(\d{1,2}:\d{2})", text)
    if m: suggestion["time"] = m.group(1)
    if any(w in tl for w in ["—Å–µ–≥–æ–¥–Ω—è","today"]): suggestion["date"] = today_str()
    elif any(w in tl for w in ["–∑–∞–≤—Ç—Ä–∞","tomorrow"]): suggestion["date"] = today_str(now_local()+timedelta(days=1))
    m = re.search(r"(\d{2}\.\d{2}\.\d{4})", text); 
    if m: suggestion["date"] = m.group(1)
    # repeat
    for w in WEEKDAYS_RU:
        if w in tl: suggestion["repeat"] = w
    m = re.search(r"–∫–∞–∂–¥—ã–µ?\s+\d+\s*–¥", tl)
    if m: suggestion["repeat"] = m.group(0)
    m = re.search(r"\d+\s*—á–∞—Å", tl)
    if m: suggestion["repeat"] = m.group(0)

    # –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ OPENAI ‚Äî —É—Ç–æ—á–Ω–µ–Ω–∏–µ (–±–µ–∑ —Ñ–ª—É–¥–∞)
    if OPENAI_API_KEY:
        try:
            from openai import OpenAI
            client = OpenAI(api_key=OPENAI_API_KEY)
            sys = ("–¢—ã –ø–∞—Ä—Å–µ—Ä –∑–∞–¥–∞—á. –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON —Å –ø–æ–ª—è–º–∏: "
                   "category, subcategory, supplier, date(–î–î.–ú–ú.–ì–ì–ì–ì|''), time(–ß–ß:–ú–ú|''), repeat(''|—Å—Ç—Ä–æ–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è).")
            resp = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role":"system","content":sys},{"role":"user","content":text}],
                temperature=0.1
            )
            raw = resp.choices[0].message.content.strip()
            ai = json.loads(raw)
            for k in suggestion.keys():
                if ai.get(k): suggestion[k] = ai[k]
        except Exception as e:
            log.warning("AI parse hint failed: %s", e)
    return suggestion

def ai_assist_answer(query, user_id):
    try:
        # –∫–æ–Ω—Ç–µ–∫—Å—Ç ‚Äî –Ω–µ–¥–µ–ª—è –≤–ø–µ—Ä—ë–¥
        start = now_local().date()
        rows = get_all_rows()
        expanded = expand_rows_for_range(rows, start, 7, str(user_id))
        brief = []
        for _, r in sorted(expanded, key=lambda x: (datetime.strptime(x[1]["–î–∞—Ç–∞"], "%d.%m.%Y"), x[1].get("–î–µ–¥–ª–∞–π–Ω","") or "", x[1].get("–ó–∞–¥–∞—á–∞","") or "")):
            brief.append(f"{r['–î–∞—Ç–∞']} ‚Ä¢ {r['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']}/{r['–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è'] or '‚Äî'} ‚Äî {r['–ó–∞–¥–∞—á–∞']} (–¥–æ {r['–î–µ–¥–ª–∞–π–Ω'] or '‚Äî'}) [{r.get('–°—Ç–∞—Ç—É—Å','')}]")
        context = "\n".join(brief)[:4000]
        if not OPENAI_API_KEY:
            return "–°–æ–≤–µ—Ç: —Å–Ω–∞—á–∞–ª–∞ —Å—Ä–æ—á–Ω—ã–µ/–≤–∞–∂–Ω—ã–µ, –∑–∞—Ç–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –ø–æ–±–µ–¥—ã. –ë–ª–æ–∫–∏—Ä—É–π –≤—Ä–µ–º—è –ø–æ–¥ –ø–æ—Å—Ç–∞–≤–∫–∏ –∏ –∑–∞–∫–∞–∑—ã."
        from openai import OpenAI
        client = OpenAI(api_key=OPENAI_API_KEY)
        sys = "–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∑–∞–¥–∞—á–∞–º. –°—É–º–º–∏—Ä—É–π —á—ë—Ç–∫–æ –∏ –∫—Ä–∞—Ç–∫–æ, –ø—É–Ω–∫—Ç–∞–º–∏, –Ω–∞ —Ä—É—Å—Å–∫–æ–º."
        prompt = f"–ó–∞–ø—Ä–æ—Å: {query}\n\n–ó–∞–¥–∞—á–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é:\n{context}\n\n–°—Ñ–æ—Ä–º–∏—Ä—É–π –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ 2-3 –∞–≤—Ç–æ–¥–æ–±–∞–≤–ª–µ–Ω–∏—è."
        resp = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role":"system","content":sys},{"role":"user","content":prompt}],
            temperature=0.3
        )
        return resp.choices[0].message.content.strip()
    except Exception as e:
        log.error("AI assistant error: %s", e)
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."

# ===================== –î–û–ë–ê–í–õ–ï–ù–ò–ï –ó–ê–î–ê–ß (–º–∞—Å—Ç–µ—Ä –ø–æ –∫–Ω–æ–ø–∫–∞–º) =====================
ADD_WIZARD: Dict[int, Dict] = {}  # uid -> {title, category, subcategory, date, time, repeat}

def start_add_wizard(uid, title):
    hint = ai_parse_to_suggest(title)
    ADD_WIZARD[uid] = {"title": title, **hint}

def add_wizard_kb(uid):
    st = ADD_WIZARD.get(uid, {})
    kb = types.InlineKeyboardMarkup()
    # 1) –ö–∞—Ç–µ–≥–æ—Ä–∏—è
    row = []
    for cat in CATEGORY_SHEETS:
        if cat in SHEETS:
            label = "‚úÖ "+cat if st.get("category")==cat else cat
            row.append(types.InlineKeyboardButton(label, callback_data=mk_cb("w_cat", v=cat)))
    if row: kb.row(*row)
    # 2) –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è
    for chunk in [["–¶–µ–Ω—Ç—Ä","–ü–æ–ª–µ—Ç","–ö–ª–∏–º–æ–≤–æ"],["‚Äî"]]:
        row=[]
        for sub in chunk:
            sel = normalize_tt_from_subcat(sub) if sub!="‚Äî" else ""
            label = ("‚úÖ "+(sel or "‚Äî")) if (st.get("subcategory") or "")==sel else (sel or "‚Äî")
            row.append(types.InlineKeyboardButton(label, callback_data=mk_cb("w_sub", v=sel)))
        kb.row(*row)
    # 3) –î–∞—Ç–∞
    today = now_local().date()
    row=[]
    for d,cap in [(today,"–°–µ–≥–æ–¥–Ω—è"),(today+timedelta(days=1),"–ó–∞–≤—Ç—Ä–∞"),(today+timedelta(days=2),"+2"),(today+timedelta(days=7),"+7")]:
        ds = d.strftime("%d.%m.%Y")
        label = "‚úÖ "+cap if st.get("date")==ds else cap
        row.append(types.InlineKeyboardButton(label, callback_data=mk_cb("w_date", v=ds)))
    kb.row(*row)
    kb.row(types.InlineKeyboardButton("üìÖ –í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É", callback_data=mk_cb("w_date_manual")))
    # 4) –í—Ä–µ–º—è
    row=[]
    for t in ["10:00","12:00","14:00","16:00"]:
        label = "‚úÖ "+t if st.get("time")==t else t
        row.append(types.InlineKeyboardButton(label, callback_data=mk_cb("w_time", v=t)))
    kb.row(*row)
    kb.row(types.InlineKeyboardButton("‚è∞ –í–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è", callback_data=mk_cb("w_time_manual")))
    # 5) –ü–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å
    row=[]
    for r in ["","–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫","–≤—Ç–æ—Ä–Ω–∏–∫","—Å—Ä–µ–¥–∞","—á–µ—Ç–≤–µ—Ä–≥","–ø—è—Ç–Ω–∏—Ü–∞","—Å—É–±–±–æ—Ç–∞","–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ","–∫–∞–∂–¥—ã–µ 2 –¥–Ω—è","–∫–∞–∂–¥—ã–µ 3 –¥–Ω—è"]:
        label = "üîÅ "+(r or "–Ω–µ—Ç") if st.get("repeat")==r else (r or "–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–∞")
        row.append(types.InlineKeyboardButton(label, callback_data=mk_cb("w_rep", v=r)))
        if len(row)==3: kb.row(*row); row=[]
    if row: kb.row(*row)
    # 6) –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
    kb.row(types.InlineKeyboardButton("‚úÖ –î–æ–±–∞–≤–∏—Ç—å", callback_data=mk_cb("w_save")))
    kb.row(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=mk_cb("w_cancel")))
    return kb

def finish_wizard(uid):
    st = ADD_WIZARD.get(uid, {})
    cat = st.get("category") or "–õ–∏—á–Ω–æ–µ"
    sub = st.get("subcategory") or ""
    title = st.get("title") or ""
    date_s = st.get("date") or today_str()
    time_s = st.get("time") or ""
    repeat = st.get("repeat") or ""
    row = [date_s, cat, sub, title, time_s, str(uid), "", repeat, "wizard"]
    append_to_sheet(cat, row)
    if is_order_task(title):
        # –ø—Ä–µ–¥–ª–æ–∂–∏–º ¬´–ü—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É¬ª
        supplier = guess_supplier(title) or "–ü–æ—Å—Ç–∞–≤–∫–∞"
        # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –∑–∞–≤—Ç—Ä–∞ 10:00
        ds = parse_ru_date(date_s) or now_local().date()
        accept_day = (ds + timedelta(days=1)).strftime("%d.%m.%Y")
        sub_row = [accept_day, cat, sub,
                   f"üöö –ü—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É {supplier} ({normalize_tt_from_subcat(sub) or '‚Äî'})",
                   "10:00", str(uid), "", "", f"subtask:{sha_task_id({'–ö–∞—Ç–µ–≥–æ—Ä–∏—è':cat,'–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è':sub,'–ó–∞–¥–∞—á–∞':title,'–î–µ–¥–ª–∞–π–Ω':time_s,'User ID':uid})}"]
        append_to_sheet(cat, sub_row)
    return cat

# ===================== –•–ï–ù–î–õ–ï–†–´ =====================
@bot.message_handler(commands=["start"])
def cmd_start(m):
    bot.send_message(m.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤. –í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å")
def handle_add(m):
    uid = m.chat.id
    bot.send_message(uid, "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π. –Ø –ø–æ–¥—Å–∫–∞–∂—É –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –¥–∞–º –∫–Ω–æ–ø–∫–∏.")
    bot.register_next_step_handler(m, add_step_title)

def add_step_title(m):
    uid = m.chat.id
    title = m.text.strip()
    start_add_wizard(uid, title)
    st = ADD_WIZARD[uid]
    bot.send_message(uid, f"–ó–∞–¥–∞—á–∞: <b>{st['title']}</b>\n–í—ã–±–µ—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã üëá", reply_markup=add_wizard_kb(uid))

@bot.callback_query_handler(func=lambda c: parse_cb(c.data) and parse_cb(c.data).get("a","").startswith("w_"))
def wizard_callbacks(c):
    uid = c.message.chat.id
    data = parse_cb(c.data)
    a = data.get("a"); v = data.get("v","")
    st = ADD_WIZARD.get(uid, {})
    if not st: 
        bot.answer_callback_query(c.id,"–ú–∞—Å—Ç–µ—Ä –∑–∞–∫—Ä—ã—Ç"); return
    if a == "w_cat": st["category"] = v
    elif a == "w_sub": st["subcategory"] = v
    elif a == "w_date": st["date"] = v
    elif a == "w_time": st["time"] = v
    elif a == "w_rep": st["repeat"] = v
    elif a == "w_date_manual":
        bot.answer_callback_query(c.id); bot.send_message(uid,"–í–≤–µ–¥–∏ –¥–∞—Ç—É –î–î.–ú–ú.–ì–ì–ì–ì:")
        bot.register_next_step_handler(c.message, wizard_date_manual); return
    elif a == "w_time_manual":
        bot.answer_callback_query(c.id); bot.send_message(uid,"–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –ß–ß:–ú–ú:")
        bot.register_next_step_handler(c.message, wizard_time_manual); return
    elif a == "w_save":
        cat = finish_wizard(uid)
        ADD_WIZARD.pop(uid, None)
        bot.answer_callback_query(c.id,"–î–æ–±–∞–≤–∏–ª!")
        bot.edit_message_text("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.", uid, c.message.message_id)
        log_event(uid, "add_task_wizard", st.get("title",""))
        return
    elif a == "w_cancel":
        ADD_WIZARD.pop(uid, None)
        bot.answer_callback_query(c.id,"–û—Ç–º–µ–Ω–µ–Ω–æ")
        bot.edit_message_text("–û—Ç–º–µ–Ω–∞.", uid, c.message.message_id)
        return
    ADD_WIZARD[uid] = st
    try:
        bot.edit_message_reply_markup(uid, c.message.message_id, reply_markup=add_wizard_kb(uid))
    except Exception:
        pass
    bot.answer_callback_query(c.id)

def wizard_date_manual(m):
    uid = m.chat.id
    ds = m.text.strip()
    try: datetime.strptime(ds, "%d.%m.%Y")
    except: bot.send_message(uid,"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞."); return
    ADD_WIZARD.setdefault(uid, {})["date"] = ds
    bot.send_message(uid,"–û–∫. –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤—ã–±–æ—Ä –∫–Ω–æ–ø–∫–∞–º–∏.", reply_markup=add_wizard_kb(uid))

def wizard_time_manual(m):
    uid = m.chat.id
    ts = m.text.strip()
    if not re.fullmatch(r"\d{1,2}:\d{2}", ts):
        bot.send_message(uid,"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è."); return
    ADD_WIZARD.setdefault(uid, {})["time"] = ts
    bot.send_message(uid,"–û–∫. –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤—ã–±–æ—Ä –∫–Ω–æ–ø–∫–∞–º–∏.", reply_markup=add_wizard_kb(uid))

@bot.message_handler(func=lambda msg: msg.text == "üìÖ –°–µ–≥–æ–¥–Ω—è")
def handle_today(m):
    uid = m.chat.id
    start = now_local().date()
    rows = get_all_rows()
    expanded = expand_rows_for_range(rows, start, 1, str(uid))
    tasks = [r for _, r in expanded if r["–î–∞—Ç–∞"] == start.strftime("%d.%m.%Y")]
    if not tasks:
        bot.send_message(uid, f"–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞—á –Ω–µ—Ç.", reply_markup=main_menu()); return
    by_cat = {}
    for r in tasks:
        by_cat.setdefault(r["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"], []).append(r)
    parts=[]
    for dcat in by_cat:
        parts.append(format_grouped(by_cat[dcat], header_date=today_str()))
        parts.append("")
    bot.send_message(uid, "\n".join(parts), reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "üìÜ –ù–µ–¥–µ–ª—è")
def handle_week(m):
    uid = m.chat.id
    start = now_local().date()
    rows = get_all_rows()
    expanded = expand_rows_for_range(rows, start, 7, str(uid))
    if not expanded:
        bot.send_message(uid, "–ù–∞ –Ω–µ–¥–µ–ª—é –∑–∞–¥–∞—á –Ω–µ—Ç.", reply_markup=main_menu()); return
    by_day: Dict[str, List[Dict]] = {}
    for _, r in expanded:
        by_day.setdefault(r["–î–∞—Ç–∞"], []).append(r)
    parts=[]
    for d in sorted(by_day.keys(), key=lambda s: datetime.strptime(s, "%d.%m.%Y")):
        parts.append(format_grouped(by_day[d], header_date=d)); parts.append("")
    bot.send_message(uid, "\n".join(parts), reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "üîé –ù–∞–π—Ç–∏")
def handle_search(m):
    uid = m.chat.id
    bot.send_message(uid,"–ß—Ç–æ –∏—â–µ–º? –í–≤–µ–¥–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è/–∫–∞—Ç–µ–≥–æ—Ä–∏–∏/–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏/–¥–∞—Ç—ã.")
    bot.register_next_step_handler(m, search_query)

def search_query(m):
    uid = m.chat.id
    q = m.text.strip().lower()
    rows = get_all_rows()
    found=[]
    for cat, r in rows:
        if str(r.get("User ID") or "").strip() and str(r["User ID"]) != str(uid):
            continue
        hay = " ".join([str(r.get(k,"")) for k in TASKS_HEADERS]).lower()
        if q in hay:
            tid = sha_task_id({"–ö–∞—Ç–µ–≥–æ—Ä–∏—è":cat, **r})
            found.append((build_task_line(r), tid))
    if not found:
        bot.send_message(uid, "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=main_menu()); return
    total_pages = (len(found)+PAGE_SIZE-1)//PAGE_SIZE
    page = 1
    slice_items = found[(page-1)*PAGE_SIZE:page*PAGE_SIZE]
    kb = page_buttons(slice_items, page, total_pages, prefix_action="open")
    bot.send_message(uid, "–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:", reply_markup=kb)

@bot.message_handler(func=lambda msg: msg.text == "‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å")
def handle_done_prompt(m):
    uid = m.chat.id
    bot.send_message(uid, "–ù–∞–ø–∏—à–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è/–ø–æ—Å—Ç–∞–≤—â–∏–∫–∞. –Ø –ø—Ä–µ–¥–ª–æ–∂—É –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
    bot.register_next_step_handler(m, done_text)

def done_text(m):
    uid = m.chat.id
    q = m.text.strip().lower()
    start = now_local().date()
    rows = get_all_rows()
    today_tasks = [r for _, r in expand_rows_for_range(rows, start, 1, str(uid))]
    cand=[]
    for cat, r in today_tasks:
        if r.get("–°—Ç–∞—Ç—É—Å","").lower()=="–≤—ã–ø–æ–ª–Ω–µ–Ω–æ": continue
        hay = " ".join([r.get("–ó–∞–¥–∞—á–∞",""), r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ò—Å—Ç–æ—á–Ω–∏–∫","")]).lower()
        if q in hay:
            cand.append((cat, r))
    if not cand:
        bot.send_message(uid,"–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")
        return
    kb = types.InlineKeyboardMarkup()
    for i,(cat, r) in enumerate(cand, start=1):
        tid = sha_task_id({"–ö–∞—Ç–µ–≥–æ—Ä–∏—è":cat, **r})
        kb.add(types.InlineKeyboardButton(build_task_line(r,i), callback_data=mk_cb("done", id=tid)))
    bot.send_message(uid, "–ß—Ç–æ –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º?", reply_markup=kb)

@bot.message_handler(func=lambda msg: msg.text == "üß† –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç")
def handle_ai(m):
    uid = m.chat.id
    bot.send_message(uid, "–ß—Ç–æ –Ω—É–∂–Ω–æ? (—Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–µ–Ω—å, –≤—ã–¥–µ–ª–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã, —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ —Ç.–¥.)")
    bot.register_next_step_handler(m, assistant_text)

def assistant_text(m):
    uid = m.chat.id
    answer = ai_assist_answer(m.text.strip(), uid)
    bot.send_message(uid, f"üß† {answer}", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "üìä –û—Ç—á—ë—Ç")
def handle_report(m):
    uid = m.chat.id
    start = now_local().date()
    rows = get_all_rows()
    expanded = expand_rows_for_range(rows, start - timedelta(days=7), 14, str(uid))
    total = len(expanded)
    done = sum(1 for _,r in expanded if (r.get("–°—Ç–∞—Ç—É—Å","").lower()=="–≤—ã–ø–æ–ª–Ω–µ–Ω–æ"))
    bot.send_message(uid, f"–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –Ω–µ–¥–µ–ª–∏:\n–í—Å–µ–≥–æ: {total}\n–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {done}\n–û—Ç–∫—Ä—ã—Ç–æ: {total-done}")

@bot.message_handler(func=lambda msg: msg.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
def handle_settings(m):
    bot.send_message(m.chat.id, f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: <b>{TZ_NAME}</b>\n–£—Ç—Ä–µ–Ω–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç: <b>08:00</b>", reply_markup=main_menu())

# ===================== CALLBACKS: –æ—Ç–∫—Ä—ã—Ç—å/–≤—ã–ø–æ–ª–Ω–∏—Ç—å/–ø–æ–¥–∑–∞–¥–∞—á–∏/–ø–∞–≥–∏–Ω–∞—Ü–∏—è =====================
def find_row_by_tid(tid) -> Tuple[str, Dict] | None:
    rows = get_all_rows()
    for cat, r in rows:
        if sha_task_id({"–ö–∞—Ç–µ–≥–æ—Ä–∏—è":cat, **r}) == tid:
            return cat, r
    return None

def render_task_card(cat, r):
    date_s = r.get("–î–∞—Ç–∞") or "‚Äî"
    header = (f"<b>{r.get('–ó–∞–¥–∞—á–∞','')}</b>\n"
              f"üìÖ {date_s if date_s=='‚Äî' else (weekday_ru(datetime.strptime(date_s,'%d.%m.%Y'))+' ‚Äî '+date_s)}\n"
              f"üìÅ {r.get('–ö–∞—Ç–µ–≥–æ—Ä–∏—è','‚Äî')} / {r.get('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è','‚Äî')}\n"
              f"‚è∞ –î–µ–¥–ª–∞–π–Ω: {r.get('–î–µ–¥–ª–∞–π–Ω') or '‚Äî'}\n"
              f"üìù –°—Ç–∞—Ç—É—Å: {r.get('–°—Ç–∞—Ç—É—Å') or '‚Äî'}\n"
              f"üîÅ –ü–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å: {r.get('–ü–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å') or '‚Äî'}")
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å", callback_data=mk_cb("done", id=sha_task_id({"–ö–∞—Ç–µ–≥–æ—Ä–∏—è":cat, **r}))))
    if is_order_task(r.get("–ó–∞–¥–∞—á–∞","")):
        kb.add(types.InlineKeyboardButton("üöö –ü—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É", callback_data=mk_cb("accept_delivery", id=sha_task_id({"–ö–∞—Ç–µ–≥–æ—Ä–∏—è":cat, **r}))))
    kb.add(types.InlineKeyboardButton("‚ûï –ü–æ–¥–∑–∞–¥–∞—á–∞", callback_data=mk_cb("add_sub", id=sha_task_id({"–ö–∞—Ç–µ–≥–æ—Ä–∏—è":cat, **r}))))
    kb.add(types.InlineKeyboardButton("‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data=mk_cb("remind_set", id=sha_task_id({"–ö–∞—Ç–µ–≥–æ—Ä–∏—è":cat, **r}))))
    kb.add(types.InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data=mk_cb("close_card")))
    return header, kb

@bot.callback_query_handler(func=lambda c: True)
def callbacks(c):
    uid = c.message.chat.id
    data = parse_cb(c.data) if c.data and c.data!="noop" else None
    if not data: 
        bot.answer_callback_query(c.id); return
    a = data.get("a")

    if a == "page":
        # –í —ç—Ç–æ–º —Ä–µ–ª–∏–∑–µ –ø–∞–≥–∏–Ω–∞—Ü–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è (–ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –Ω–µ –±—É–¥–µ–º)
        bot.answer_callback_query(c.id); return

    if a == "open":
        tid = data.get("id")
        found = find_row_by_tid(tid)
        bot.answer_callback_query(c.id)
        if not found:
            bot.send_message(uid,"–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."); return
        cat, r = found
        text, kb = render_task_card(cat, r)
        bot.send_message(uid, text, reply_markup=kb)
        return

    if a == "close_card":
        bot.answer_callback_query(c.id, "–ó–∞–∫—Ä—ã—Ç–æ")
        try: bot.delete_message(uid, c.message.message_id)
        except Exception: pass
        return

    if a == "done":
        tid = data.get("id")
        found = find_row_by_tid(tid)
        if not found:
            bot.answer_callback_query(c.id,"–ù–µ –Ω–∞—à—ë–ª", show_alert=True); return
        cat, r = found
        ok = update_cell_by_match(cat, r, "–°—Ç–∞—Ç—É—Å", "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
        if not ok:
            bot.answer_callback_query(c.id,"–ù–µ —Å–º–æ–≥ –æ–±–Ω–æ–≤–∏—Ç—å", show_alert=True); return
        msg = "‚úÖ –ì–æ—Ç–æ–≤–æ."
        supplier = guess_supplier(r.get("–ó–∞–¥–∞—á–∞",""))
        if supplier:
            # –∞–≤—Ç–æ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø—Ä–æ—Å—Ç–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π: –ø—Ä–∏–µ–º–∫–∞ –∑–∞–≤—Ç—Ä–∞, –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ 2-3 –¥–Ω—è –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É)
            ds = parse_ru_date(r.get("–î–∞—Ç–∞")) or now_local().date()
            accept_day = (ds + timedelta(days=1)).strftime("%d.%m.%Y")
            add_row = [accept_day, cat, r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""),
                       f"üöö –ü—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É {supplier} ({normalize_tt_from_subcat(r.get('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è','')) or '‚Äî'})",
                       "10:00", str(uid), "", "", f"auto:delivery:{supplier}"]
            append_to_sheet(cat, add_row)
            msg += " –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∏–µ–º–∫–∞."
        bot.answer_callback_query(c.id, msg, show_alert=True)
        return

    if a == "accept_delivery":
        tid = data.get("id")
        found = find_row_by_tid(tid)
        if not found:
            bot.answer_callback_query(c.id,"–ù–µ –Ω–∞—à—ë–ª", show_alert=True); return
        cat, r = found
        kb = types.InlineKeyboardMarkup()
        kb.row(
            types.InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data=mk_cb("accept_delivery_date", id=tid, d="today")),
            types.InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞", callback_data=mk_cb("accept_delivery_date", id=tid, d="tomorrow")),
        )
        kb.row(types.InlineKeyboardButton("üìÖ –î—Ä—É–≥–∞—è –¥–∞—Ç–∞", callback_data=mk_cb("accept_delivery_pick", id=tid)))
        bot.answer_callback_query(c.id)
        bot.send_message(uid, "–ö–æ–≥–¥–∞ –ø—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É?", reply_markup=kb)
        return

    if a == "accept_delivery_pick":
        set_state(uid, "pick_delivery_date", {"task_id": data.get("id")})
        bot.answer_callback_query(c.id)
        bot.send_message(uid, "–í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return

    if a == "accept_delivery_date":
        tid = data.get("id"); when = data.get("d")
        found = find_row_by_tid(tid)
        if not found:
            bot.answer_callback_query(c.id,"–ù–µ –Ω–∞—à—ë–ª", show_alert=True); return
        cat, r = found
        ds = today_str() if when=="today" else today_str(now_local()+timedelta(days=1))
        supplier = guess_supplier(r.get("–ó–∞–¥–∞—á–∞","")) or "–ü–æ—Å—Ç–∞–≤–∫–∞"
        append_to_sheet(cat, [ds, cat, r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""),
                              f"üöö –ü—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É {supplier} ({normalize_tt_from_subcat(r.get('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è','')) or '‚Äî'})",
                              "10:00", str(uid), "", "", f"subtask:{tid}"])
        bot.answer_callback_query(c.id, f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –Ω–∞ {ds}", show_alert=True)
        return

    if a == "add_sub":
        set_state(uid, "add_subtask_text", {"task_id": data.get("id")})
        bot.answer_callback_query(c.id)
        bot.send_message(uid, "–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –ø–æ–¥–∑–∞–¥–∞—á–∏:")
        return

    if a == "remind_set":
        set_state(uid, "set_reminder", {"task_id": data.get("id")})
        bot.answer_callback_query(c.id)
        bot.send_message(uid, "–ö–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å? –ß–ß:–ú–ú (—Å–µ–≥–æ–¥–Ω—è, –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è).")
        return

# ======= –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–¥–∑–∞–¥–∞—á/–¥–∞—Ç/–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π =======
USER_STATE: Dict[int,str] = {}
USER_DATA: Dict[int,Dict] = {}
def set_state(uid, state, data=None):
    USER_STATE[uid] = state
    if data is not None: USER_DATA[uid] = data
def get_state(uid): return USER_STATE.get(uid)
def get_data(uid): return USER_DATA.get(uid, {})
def clear_state(uid): USER_STATE.pop(uid, None); USER_DATA.pop(uid, None)

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "add_subtask_text")
def add_subtask_text(m):
    uid = m.chat.id
    data = get_data(uid); tid = data.get("task_id")
    found = find_row_by_tid(tid)
    if not found:
        bot.send_message(uid,"–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."); clear_state(uid); return
    cat, parent = found
    append_to_sheet(cat, [parent.get("–î–∞—Ç–∞",""), cat, parent.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""),
                          f"‚Ä¢ {m.text.strip()}", parent.get("–î–µ–¥–ª–∞–π–Ω",""), str(uid), "", "", f"subtask:{tid}"])
    bot.send_message(uid,"–ü–æ–¥–∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.", reply_markup=main_menu()); clear_state(uid)

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "pick_delivery_date")
def pick_delivery_date(m):
    uid = m.chat.id
    data = get_data(uid); tid = data.get("task_id")
    ds = m.text.strip()
    try: datetime.strptime(ds, "%d.%m.%Y")
    except: bot.send_message(uid,"–î–∞—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞."); clear_state(uid); return
    found = find_row_by_tid(tid)
    if not found: bot.send_message(uid,"–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."); clear_state(uid); return
    cat, r = found
    supplier = guess_supplier(r.get("–ó–∞–¥–∞—á–∞","")) or "–ü–æ—Å—Ç–∞–≤–∫–∞"
    append_to_sheet(cat, [ds, cat, r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""),
                          f"üöö –ü—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É {supplier} ({normalize_tt_from_subcat(r.get('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è','')) or '‚Äî'})",
                          "10:00", str(uid), "", "", f"subtask:{tid}"])
    bot.send_message(uid, f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –Ω–∞ {ds}.", reply_markup=main_menu()); clear_state(uid)

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "set_reminder")
def set_reminder(m):
    uid = m.chat.id
    data = get_data(uid); tid = data.get("task_id")
    t = m.text.strip()
    if not re.fullmatch(r"\d{1,2}:\d{2}", t):
        bot.send_message(uid, "–ù—É–∂–µ–Ω —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú.", reply_markup=main_menu()); clear_state(uid); return
    found = find_row_by_tid(tid)
    if not found: bot.send_message(uid,"–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."); clear_state(uid); return
    cat, r = found
    cur_source = r.get("–ò—Å—Ç–æ—á–Ω–∏–∫","") or ""
    new_source = (cur_source + "; " if cur_source else "") + f"remind:{t}"
    update_cell_by_match(cat, r, "–ò—Å—Ç–æ—á–Ω–∏–∫", new_source)
    bot.send_message(uid, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {t}.", reply_markup=main_menu()); clear_state(uid)

# ===================== –î–ê–ô–î–ñ–ï–°–¢/–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø =====================
NOTIFIED = set()

def job_daily_digest():
    try:
        users = ws_users.get_all_records()
        today = today_str()
        for u in users:
            uid = str(u.get("Telegram ID") or "").strip()
            if not uid: continue
            start = now_local().date()
            rows = get_all_rows()
            expanded = expand_rows_for_range(rows, start, 1, uid)
            tasks = [r for _, r in expanded if r["–î–∞—Ç–∞"] == today]
            if not tasks: continue
            text = f"üìÖ –ü–ª–∞–Ω –Ω–∞ {today}\n\n" + format_grouped(tasks, header_date=today)
            try: bot.send_message(uid, text)
            except Exception as e: log.error("send digest error %s", e)
    except Exception as e:
        log.error("job_daily_digest error %s", e)

def job_reminders():
    try:
        today = today_str()
        rows = get_all_rows()
        for cat, r in rows:
            if r.get("–î–∞—Ç–∞") != today: continue
            src = (r.get("–ò—Å—Ç–æ—á–Ω–∏–∫") or "")
            if "remind:" not in src: continue
            matches = re.findall(r"remind:(\d{1,2}:\d{2})", src)
            for tm in matches:
                key = sha_task_id({"–ö–∞—Ç–µ–≥–æ—Ä–∏—è":cat, **r}) + "|" + today + "|" + tm
                if key in NOTIFIED: continue
                try:
                    hh, mm = map(int, tm.split(":"))
                    nowt = now_local().time()
                    if (nowt.hour, nowt.minute) >= (hh, mm):
                        bot.send_message(r.get("User ID"), f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {r.get('–ö–∞—Ç–µ–≥–æ—Ä–∏—è','')}/{r.get('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è','')} ‚Äî {r.get('–ó–∞–¥–∞—á–∞','')} (–¥–æ {r.get('–î–µ–¥–ª–∞–π–Ω') or '‚Äî'})")
                        NOTIFIED.add(key)
                except Exception: pass
    except Exception as e:
        log.error("job_reminders error %s", e)

def scheduler_thread():
    schedule.clear()
    schedule.every().day.at("08:00").do(job_daily_digest)
    schedule.every(1).minutes.do(job_reminders)
    while True:
        schedule.run_pending(); time.sleep(1)

# ===================== WEBHOOK / RUN =====================
app = Flask(__name__)

@app.route("/" + API_TOKEN, methods=["POST"])
def webhook():
    try:
        update = request.get_data().decode("utf-8")
        upd = types.Update.de_json(update)
        bot.process_new_updates([upd])
    except Exception as e:
        log.error("Webhook error: %s", e)
    return "OK", 200

@app.route("/")
def home():
    return "Bot is running!"

if __name__ == "__main__":
    if not API_TOKEN or not WEBHOOK_URL:
        raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω—ã TELEGRAM_TOKEN –∏–ª–∏ WEBHOOK_BASE")

    try: bot.remove_webhook()
    except Exception: pass
    time.sleep(0.5)
    bot.set_webhook(url=WEBHOOK_URL)

    threading.Thread(target=scheduler_thread, daemon=True).start()
    app.run(host="0.0.0.0", port=int(os.getenv("PORT","5000")))
