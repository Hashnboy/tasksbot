# tasks_bot.py
# -*- coding: utf-8 -*-
import os
import re
import json
import time
import pytz
import hmac
import hashlib
import logging
import schedule
import threading
from datetime import datetime, timedelta

import gspread
from flask import Flask, request
from telebot import TeleBot, types

# ===================== –û–ö–†–£–ñ–ï–ù–ò–ï =====================
API_TOKEN        = os.getenv("TELEGRAM_TOKEN")
TABLE_URL        = os.getenv("GOOGLE_SHEETS_URL")
CREDENTIALS_FILE = os.getenv("GOOGLE_CREDENTIALS_JSON", "/etc/secrets/credentials.json")
WEBHOOK_BASE     = os.getenv("WEBHOOK_BASE")  # https://<app>.onrender.com
OPENAI_API_KEY   = os.getenv("OPENAI_API_KEY")
TZ_NAME          = os.getenv("TZ", "Europe/Moscow")
WEBHOOK_URL      = f"{WEBHOOK_BASE}/{API_TOKEN}" if API_TOKEN and WEBHOOK_BASE else None

LOCAL_TZ = pytz.timezone(TZ_NAME)

logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
log = logging.getLogger("tasksbot")

REQUIRED_ENVS = ["TELEGRAM_TOKEN", "GOOGLE_SHEETS_URL"]
missing = [v for v in REQUIRED_ENVS if not os.getenv(v)]
if missing:
    log.warning("–ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: %s", ", ".join(missing))

# ===================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê / SHEETS =====================
bot = TeleBot(API_TOKEN, parse_mode="HTML")

SHEET_TASK_HEADERS = [
    "–î–∞—Ç–∞","–ö–∞—Ç–µ–≥–æ—Ä–∏—è","–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è","–ó–∞–¥–∞—á–∞","–î–µ–¥–ª–∞–π–Ω",
    "User ID","–°—Ç–∞—Ç—É—Å","–ü–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å","–ò—Å—Ç–æ—á–Ω–∏–∫"
]

# –º–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π ‚Üí –ª–∏—Å—Ç–æ–≤
CATEGORY_TO_SHEET = {
    "–ö–æ—Ñ–µ–π–Ω—è": "–ö–æ—Ñ–µ–π–Ω—è",
    "–¢–∞–±–∞—á–∫–∞": "–¢–∞–±–∞—á–∫–∞",
    "–õ–∏—á–Ω–æ–µ": "–õ–∏—á–Ω–æ–µ",
    "WB": "WB",
}
TASK_SHEETS = list(CATEGORY_TO_SHEET.values())  # –ª–∏—Å—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏
SYSTEM_SHEETS = ["–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "–õ–æ–≥–∏"]

def ensure_headers(ws, headers):
    first_row = ws.row_values(1)
    if [h.strip() for h in first_row] != headers:
        ws.resize(rows=max(1, ws.row_count))
        ws.update("A1", [headers])

def open_or_create_worksheet(sh, title, headers=None):
    try:
        ws = sh.worksheet(title)
    except gspread.exceptions.WorksheetNotFound:
        ws = sh.add_worksheet(title=title, rows=1000, cols=12)
    if headers:
        ensure_headers(ws, headers)
    return ws

try:
    gc = gspread.service_account(filename=CREDENTIALS_FILE)
    sh = gc.open_by_url(TABLE_URL)

    # –æ—Ç–∫—Ä–æ–µ–º/—Å–æ–∑–¥–∞–¥–∏–º –≤—Å–µ –ª–∏—Å—Ç—ã –∑–∞–¥–∞—á
    ws_by_title = {}
    for t in TASK_SHEETS:
        ws_by_title[t] = open_or_create_worksheet(sh, t, SHEET_TASK_HEADERS)

    # —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ª–∏—Å—Ç—ã
    ws_suppliers = open_or_create_worksheet(sh, "–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏", ["–ü–æ—Å—Ç–∞–≤—â–∏–∫","–ü—Ä–∞–≤–∏–ª–æ","–î–µ–¥–ª–∞–π–Ω–ó–∞–∫–∞–∑–∞","Emoji","DeliveryOffsetDays"])
    ws_users     = open_or_create_worksheet(sh, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", ["–ò–º—è","Telegram ID"])
    ws_logs      = open_or_create_worksheet(sh, "–õ–æ–≥–∏", ["ts","user_id","action","payload"])

    log.info("Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω—ã.")
except Exception:
    log.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets", exc_info=True)
    raise

# ===================== –£–¢–ò–õ–ò–¢–´ =====================
PAGE_SIZE = 7

def now_local():
    return datetime.now(LOCAL_TZ)

def today_str(dt=None):
    if dt is None:
        dt = now_local()
    return dt.strftime("%d.%m.%Y")

def weekday_ru(dt: datetime) -> str:
    names = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫","–í—Ç–æ—Ä–Ω–∏–∫","–°—Ä–µ–¥–∞","–ß–µ—Ç–≤–µ—Ä–≥","–ü—è—Ç–Ω–∏—Ü–∞","–°—É–±–±–æ—Ç–∞","–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    return names[dt.weekday()]

def log_event(user_id, action, payload=""):
    try:
        ws_logs.append_row([datetime.utcnow().isoformat(), str(user_id), action, payload], value_input_option="USER_ENTERED")
    except Exception:
        pass

def row_to_dict_list(ws):
    return ws.get_all_records()

def sha_task_id(sheet_title, user_id, date_s, cat, subcat, text, deadline):
    key = f"{sheet_title}|{user_id}|{date_s}|{cat}|{subcat}|{text}|{deadline}"
    return hashlib.sha1(key.encode("utf-8")).hexdigest()[:16]

def find_row_index_by_id(task_id):
    # –∏—â–µ–º –ø–æ –≤—Å–µ–º –ª–∏—Å—Ç–∞–º –∑–∞–¥–∞—á
    for sheet_title, ws in ws_by_title.items():
        rows = row_to_dict_list(ws)
        for i, r in enumerate(rows, start=2):
            rid = sha_task_id(sheet_title, str(r.get("User ID")), r.get("–î–∞—Ç–∞",""), r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""),
                              r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ó–∞–¥–∞—á–∞",""), r.get("–î–µ–¥–ª–∞–π–Ω",""))
            if rid == task_id:
                return sheet_title, ws, i, r
    return None, None, None, None

def infer_category_from_text(text: str) -> str:
    t = (text or "").lower()
    if "—Ç–∞–±–∞—á" in t or "—Å–∏–≥–∞—Ä" in t: return "–¢–∞–±–∞—á–∫–∞"
    if "–∫–æ—Ñ–µ" in t or "–∫-—ç–∫—Å–ø—Ä–æ" in t or "–≤—ã–ª–µ–≥–∂–∞–Ω" in t: return "–ö–æ—Ñ–µ–π–Ω—è"
    if "wb" in t or "wildberries" in t: return "WB"
    return "–õ–∏—á–Ω–æ–µ"

def normalize_subcat_hint(subcat: str) -> str:
    s = (subcat or "").strip().lower()
    if "—Ü–µ–Ω—Ç—Ä" in s: return "–¶–µ–Ω—Ç—Ä"
    if "–ø–æ–ª–µ—Ç" in s or "–ø–æ–ª—ë—Ç" in s: return "–ü–æ–ª–µ—Ç"
    if "–∫–ª–∏–º" in s: return "–ö–ª–∏–º–æ–≤–æ"
    return subcat or ""

def add_task(date_s, category, subcategory, text, deadline, user_id, status="", repeat="", source=""):
    cat = category or infer_category_from_text(text)
    sheet_title = CATEGORY_TO_SHEET.get(cat, "–õ–∏—á–Ω–æ–µ")
    ws = ws_by_title[sheet_title]
    row = [date_s, cat, subcategory, text, deadline, str(user_id), status, repeat, source]
    ws.append_row(row, value_input_option="USER_ENTERED")
    return sheet_title

def mark_done_by_id(task_id, user_id):
    sheet_title, ws, idx, r = find_row_index_by_id(task_id)
    if not idx: return False, None
    if str(r.get("User ID")) != str(user_id): return False, None
    ws.update_cell(idx, SHEET_TASK_HEADERS.index("–°—Ç–∞—Ç—É—Å")+1, "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
    return True, {"sheet": sheet_title, **r}

def read_all_tasks_for_user(user_id):
    res = []
    for sheet_title, ws in ws_by_title.items():
        for r in row_to_dict_list(ws):
            if str(r.get("User ID")) == str(user_id):
                rid = sha_task_id(sheet_title, str(r.get("User ID")), r.get("–î–∞—Ç–∞",""), r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""),
                                  r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ó–∞–¥–∞—á–∞",""), r.get("–î–µ–¥–ª–∞–π–Ω",""))
                r["_sheet"] = sheet_title
                r["_id"] = rid
                res.append(r)
    return res

def tasks_on_date(user_id, date_s):
    return [r for r in read_all_tasks_for_user(user_id) if r.get("–î–∞—Ç–∞")==date_s]

def tasks_between(user_id, start_dt, days=7):
    dates = {(start_dt + timedelta(days=i)).strftime("%d.%m.%Y") for i in range(days)}
    return [r for r in read_all_tasks_for_user(user_id) if r.get("–î–∞—Ç–∞") in dates]

def is_order_task(text: str) -> bool:
    t = (text or "").lower()
    return "–∑–∞–∫–∞–∑" in t or "–∑–∞–∫–∞–∑–∞—Ç—å" in t

def guess_supplier(text: str) -> str:
    t = (text or "").lower()
    if "–∫-—ç–∫—Å–ø—Ä–æ" in t or "–∫ —ç–∫—Å–ø—Ä–æ" in t or "k-exp" in t: return "–ö-–≠–∫—Å–ø—Ä–æ"
    if "–≤—ã–ª–µ–≥–∂–∞–Ω" in t: return "–ò–ü –í—ã–ª–µ–≥–∂–∞–Ω–∏–Ω–∞"
    return ""

def ensure_user_in_sheet(uid: int, name: str):
    try:
        rows = row_to_dict_list(ws_users)
        for r in rows:
            if str(r.get("Telegram ID")) == str(uid):
                return
        ws_users.append_row([name or "‚Äî", str(uid)], value_input_option="USER_ENTERED")
    except Exception as e:
        log.warning("–ù–µ —Å–º–æ–≥ –∑–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s", e)

def list_registered_users():
    try:
        return [int(str(r.get("Telegram ID")).strip()) for r in row_to_dict_list(ws_users) if str(r.get("Telegram ID")).strip().isdigit()]
    except Exception:
        return []

# ===================== –ü–†–ê–í–ò–õ–ê –ü–û–°–¢–ê–í–©–ò–ö–û–í =====================
SUPPLIER_RULES = {
    "–∫-—ç–∫—Å–ø—Ä–æ": {
        "kind": "cycle_every_n_days",
        "order_every_days": 2,
        "delivery_offset_days": 1,
        "order_deadline": "14:00",
        "emoji": "üì¶",
    },
    "–∏–ø –≤—ã–ª–µ–≥–∂–∞–Ω–∏–Ω–∞": {
        "kind": "delivery_shelf_then_order",
        "delivery_offset_days": 1,
        "shelf_hours": 72,
        "order_deadline": "14:00",
        "emoji": "ü•ò",
    },
}

def load_supplier_rules_from_sheet():
    try:
        rows = row_to_dict_list(ws_suppliers)
        for r in rows:
            name = (r.get("–ü–æ—Å—Ç–∞–≤—â–∏–∫") or "").strip().lower()
            if not name: continue
            kind = (r.get("–ü—Ä–∞–≤–∏–ª–æ") or "").strip().lower()
            emoji = (r.get("Emoji") or "üì¶").strip()
            d_off = int(str(r.get("DeliveryOffsetDays") or 1))
            deadline = (r.get("–î–µ–¥–ª–∞–π–Ω–ó–∞–∫–∞–∑–∞") or "14:00").strip()
            if "–∫–∞–∂–¥—ã–µ" in kind:
                n = int(re.findall(r"\d+", kind)[0]) if re.findall(r"\d+", kind) else 2
                SUPPLIER_RULES[name] = {
                    "kind":"cycle_every_n_days","order_every_days":n,
                    "delivery_offset_days": d_off, "order_deadline":deadline,"emoji":emoji
                }
            elif "shelf" in kind or "72" in kind or "—á–∞—Å" in kind:
                shelf = int(re.findall(r"\d+", kind)[0]) if re.findall(r"\d+", kind) else 72
                SUPPLIER_RULES[name] = {
                    "kind":"delivery_shelf_then_order","delivery_offset_days":d_off,
                    "shelf_hours":shelf,"order_deadline":deadline,"emoji":emoji
                }
    except Exception as e:
        log.warning("–ù–µ —Å–º–æ–≥ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: %s", e)

load_supplier_rules_from_sheet()

def plan_next_by_supplier_rule(user_id, supplier_name, category, subcategory, base_task_text):
    key = (supplier_name or "").strip().lower()
    rule = SUPPLIER_RULES.get(key)
    if not rule: return []
    created = []
    today = now_local().date()
    cat = category or "–ö–æ—Ñ–µ–π–Ω—è"
    sub = normalize_subcat_hint(subcategory)

    if rule["kind"] == "cycle_every_n_days":
        delivery_day = today + timedelta(days=rule["delivery_offset_days"])
        next_order_day = today + timedelta(days=rule["order_every_days"])
        add_task(delivery_day.strftime("%d.%m.%Y"), cat, sub,
                 f"{rule['emoji']} –ü—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É {supplier_name} ({sub or '‚Äî'})",
                 "10:00", user_id, source=f"auto:delivery:{supplier_name}")
        add_task(next_order_day.strftime("%d.%m.%Y"), cat, sub,
                 f"{rule['emoji']} –ó–∞–∫–∞–∑–∞—Ç—å {supplier_name} ({sub or '‚Äî'})",
                 rule["order_deadline"], user_id, source=f"auto:order:{supplier_name}")
        created.append((delivery_day, next_order_day))

    elif rule["kind"] == "delivery_shelf_then_order":
        delivery_day = today + timedelta(days=rule["delivery_offset_days"])
        next_order_day = delivery_day + timedelta(days=2)  # ~72—á
        add_task(delivery_day.strftime("%d.%m.%Y"), cat, sub,
                 f"{rule['emoji']} –ü—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É {supplier_name} ({sub or '‚Äî'})",
                 "11:00", user_id, source=f"auto:delivery:{supplier_name}")
        add_task(next_order_day.strftime("%d.%m.%Y"), cat, sub,
                 f"{rule['emoji']} –ó–∞–∫–∞–∑–∞—Ç—å {supplier_name} ({sub or '‚Äî'})",
                 rule["order_deadline"], user_id, source=f"auto:order:{supplier_name}")
        created.append((delivery_day, next_order_day))
    return created

# ===================== –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï =====================
def format_grouped(tasks, header_date=None):
    if not tasks: return "–ó–∞–¥–∞—á –Ω–µ—Ç."
    def k(r):
        dl = r.get("–î–µ–¥–ª–∞–π–Ω") or ""
        try:
            dlk = datetime.strptime(dl, "%H:%M").time()
        except:
            dlk = datetime.min.time()
        return (r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), dlk, r.get("–ó–∞–¥–∞—á–∞",""))
    tasks = sorted(tasks, key=k)
    out = []
    if header_date:
        dt = datetime.strptime(header_date, "%d.%m.%Y")
        out.append(f"‚Ä¢ {weekday_ru(dt)} ‚Äî {header_date}\n")
    cur_cat = cur_sub = None
    for r in tasks:
        cat = r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è","") or "‚Äî"
        sub = r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è","") or "‚Äî"
        txt = r.get("–ó–∞–¥–∞—á–∞","")
        dl  = r.get("–î–µ–¥–ª–∞–π–Ω","")
        st  = (r.get("–°—Ç–∞—Ç—É—Å","") or "").lower()
        rep = (r.get("–ü–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å","") or "").strip()
        icon = "‚úÖ" if st == "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ" else ("üîÅ" if rep else "‚¨ú")
        if cat != cur_cat:
            out.append(f"üìÇ <b>{cat}</b>"); cur_cat = cat; cur_sub = None
        if sub != cur_sub:
            out.append(f"  ‚îî <b>{sub}</b>"); cur_sub = sub
        line = f"    ‚îî {icon} {txt}"
        if dl: line += f"  <i>(–¥–æ {dl})</i>"
        out.append(line)
    return "\n".join(out)

def build_task_line(r, i=None):
    dl = r.get("–î–µ–¥–ª–∞–π–Ω") or "‚Äî"
    pref = f"{i}. " if i is not None else ""
    return f"{pref}{r.get('–ö–∞—Ç–µ–≥–æ—Ä–∏—è','‚Äî')}/{r.get('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è','‚Äî')}: {r.get('–ó–∞–¥–∞—á–∞','')[:40]}‚Ä¶ (–¥–æ {dl})"

# ===================== INLINE-–ü–û–õ–ï–ó–ù–û–ï =====================
def mk_cb(action, **kwargs):
    payload = {"a": action, **kwargs}
    s = json.dumps(payload, ensure_ascii=False)
    sig = hmac.new(b"cb-key", s.encode("utf-8"), hashlib.sha1).hexdigest()[:6]
    return f"{sig}|{s}"

def parse_cb(data):
    try:
        sig, s = data.split("|", 1)
        check = hmac.new(b"cb-key", s.encode("utf-8"), hashlib.sha1).hexdigest()[:6]
        if sig != check: return None
        return json.loads(s)
    except Exception:
        return None

def page_buttons(items, page, total_pages, prefix_action):
    kb = types.InlineKeyboardMarkup()
    for it in items:
        kb.add(types.InlineKeyboardButton(it[0], callback_data=mk_cb(prefix_action, id=it[1])))
    nav = []
    if page > 1: nav.append(types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=mk_cb("page", p=page-1, pa=prefix_action)))
    nav.append(types.InlineKeyboardButton(f"{page}/{total_pages}", callback_data="noop"))
    if page < total_pages: nav.append(types.InlineKeyboardButton("‚û°Ô∏è", callback_data=mk_cb("page", p=page+1, pa=prefix_action)))
    if nav: kb.row(*nav)
    return kb

# ===================== –ú–ï–ù–Æ =====================
def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üìÖ –°–µ–≥–æ–¥–Ω—è","üìÜ –ù–µ–¥–µ–ª—è")
    kb.row("‚ûï –î–æ–±–∞–≤–∏—Ç—å","üîé –ù–∞–π—Ç–∏","‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å")
    kb.row("üöö –ü–æ—Å—Ç–∞–≤–∫–∞","üß† AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç","ü§ñ AI –∫–æ–º–∞–Ω–¥—ã","‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    return kb

def supply_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üÜï –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞","üì¶ –ó–∞–∫–∞–∑—ã —Å–µ–≥–æ–¥–Ω—è")
    kb.row("‚¨Ö –ù–∞–∑–∞–¥")
    return kb

# ===================== GPT: –ü–ê–†–°–ò–ù–ì –ò –ö–û–ú–ê–ù–î–´ =====================
def ai_parse_to_tasks(text, fallback_user_id):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ dict {date, category, subcategory, task, deadline, user_id, repeat, source}
    """
    items = []
    used_ai = False
    if OPENAI_API_KEY:
        try:
            from openai import OpenAI
            client = OpenAI(api_key=OPENAI_API_KEY)
            sys = (
                "–¢—ã –ø–∞—Ä—Å–µ—Ä –∑–∞–¥–∞—á. –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON-–º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤.\n"
                "–û–±—ä–µ–∫—Ç: {date:'–î–î.–ú–ú.–ì–ì–ì–ì'|'', time:'–ß–ß:–ú–ú'|'', category:'–ö–æ—Ñ–µ–π–Ω—è'|'–¢–∞–±–∞—á–∫–∞'|'–õ–∏—á–Ω–æ–µ'|'WB'|'', "
                "subcategory:'', task:'', repeat:'', supplier:''}."
            )
            resp = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role":"system","content":sys},{"role":"user","content":text}],
                temperature=0.1
            )
            raw = resp.choices[0].message.content.strip()
            parsed = json.loads(raw)
            if isinstance(parsed, dict): parsed = [parsed]
            for it in parsed:
                items.append({
                    "date": it.get("date") or "",
                    "category": it.get("category") or infer_category_from_text(text),
                    "subcategory": normalize_subcat_hint(it.get("subcategory") or ""),
                    "task": it.get("task") or text.strip(),
                    "deadline": it.get("time") or "",
                    "user_id": fallback_user_id,
                    "repeat": it.get("repeat") or "",
                    "source": (it.get("supplier") or "")
                })
            used_ai = True
        except Exception as e:
            log.error("AI parse failed: %s", e)

    if not used_ai:
        tl = text.lower()
        cat = infer_category_from_text(text)
        sub = "–¶–µ–Ω—Ç—Ä" if "—Ü–µ–Ω—Ç—Ä" in tl else ("–ü–æ–ª–µ—Ç" if ("–ø–æ–ª–µ—Ç" in tl or "–ø–æ–ª—ë—Ç" in tl) else "")
        dl = re.search(r"(\d{1,2}:\d{2})", text)
        deadline = dl.group(1) if dl else ""
        d = ""
        if "—Å–µ–≥–æ–¥–Ω—è" in tl: d = today_str()
        elif "–∑–∞–≤—Ç—Ä–∞" in tl: d = today_str(now_local()+timedelta(days=1))
        else:
            m = re.search(r"(\d{2}\.\d{2}\.\d{4})", text)
            d = m.group(1) if m else ""
        items = [{
            "date": d, "category": cat, "subcategory": sub,
            "task": text.strip(), "deadline": deadline,
            "user_id": fallback_user_id, "repeat":"", "source":""
        }]
    return items

ALLOWED_OPS = {"add","done","move","delete","subtask","remind"}

def ai_command_mode(user_text, user_id):
    """
    GPT –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏, –º—ã –∏—Ö –∏—Å–ø–æ–ª–Ω—è–µ–º.
    –ü—Ä–∏–º–µ—Ä—ã –¥–µ–π—Å—Ç–≤–∏–π:
    {"op":"add","date":"–î–î.–ú–ú.–ì–ì–ì–ì","time":"–ß–ß:–ú–ú","category":"–ö–æ—Ñ–µ–π–Ω—è","subcategory":"–¶–µ–Ω—Ç—Ä","text":"..."}
    {"op":"done","match":"–∫-—ç–∫—Å–ø—Ä–æ —Ü–µ–Ω—Ç—Ä"}  # –æ—Ç–º–µ—Ç–∏–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –±–ª–∏–∂–∞–π—à—É—é –ø–æ–¥—Ö–æ–¥—è—â—É—é
    {"op":"move","match":"–æ–ø–ª–∞—Ç–∏—Ç—å —Å–≤–µ—Ç","date":"14.08.2025"}
    {"op":"delete","match":"–≤—Å—Ç—Ä–µ—á–∞"}
    {"op":"subtask","match":"–∑–∞–∫–∞–∑ –∫-—ç–∫—Å–ø—Ä–æ","text":"–ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—á—ë—Ç"}
    {"op":"remind","match":"–∑–∞–∫–∞–∑","time":"13:30"}
    """
    summary = []
    used_ai = False
    if OPENAI_API_KEY:
        try:
            all_tasks = read_all_tasks_for_user(user_id)
            ctx = []
            for r in sorted(all_tasks, key=lambda x: (datetime.strptime(x["–î–∞—Ç–∞"], "%d.%m.%Y"), x.get("–î–µ–¥–ª–∞–π–Ω") or "")):
                ctx.append(f"{r['–î–∞—Ç–∞']}|{r['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']}/{r['–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è'] or '‚Äî'}|{r['–ó–∞–¥–∞—á–∞']}|{r.get('–î–µ–¥–ª–∞–π–Ω') or '‚Äî'}")
            ctx = "\n".join(ctx)[:6000]

            from openai import OpenAI
            client = OpenAI(api_key=OPENAI_API_KEY)
            sys = (
                "–¢—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥ –¥–ª—è ToDo. –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON-–º–∞—Å—Å–∏–≤ –¥–µ–π—Å—Ç–≤–∏–π (ALLOWED_OPS: add,done,move,delete,subtask,remind).\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–ª—è, –æ–ø–∏—Å–∞–Ω–Ω—ã–µ –≤ docstring. 'match' ‚Äî –ø–æ–¥—Å—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–¥–∞—á–∏."
            )
            resp = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role":"system","content":sys},
                    {"role":"user","content":f"–¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏:\n{ctx}\n\n–ö–æ–º–∞–Ω–¥–∞:\n{user_text}"}
                ],
                temperature=0.2
            )
            raw = resp.choices[0].message.content.strip()
            actions = json.loads(raw)
            if isinstance(actions, dict): actions = [actions]
            used_ai = True
        except Exception as e:
            log.error("AI command parse failed: %s", e)
            actions = []
    else:
        actions = []

    # –∏—Å–ø–æ–ª–Ω—è–µ–º
    def find_first_by_match(match):
        m = (match or "").lower()
        if not m: return None
        for r in read_all_tasks_for_user(user_id):
            line = " ".join([str(r.get(k,"")) for k in SHEET_TASK_HEADERS]).lower()
            if m in line: return r
        return None

    for a in actions:
        op = (a.get("op") or "").lower()
        if op not in ALLOWED_OPS: continue

        if op == "add":
            ds = a.get("date") or today_str()
            tm = a.get("time") or ""
            cat = a.get("category") or "–õ–∏—á–Ω–æ–µ"
            sub = a.get("subcategory") or ""
            txt = a.get("text") or ""
            add_task(ds, cat, sub, txt, tm, user_id, source="ai:add")
            summary.append(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞: {ds} {cat}/{sub} ‚Äî {txt}")

        elif op == "done":
            r = find_first_by_match(a.get("match"))
            if not r:
                summary.append("‚ö†Ô∏è –ù–µ –Ω–∞—à—ë–ª –∑–∞–¥–∞—á—É –¥–ª—è done")
                continue
            tid = r["_id"]
            ok, r2 = mark_done_by_id(tid, user_id)
            if ok:
                summary.append(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {r['–ó–∞–¥–∞—á–∞']}")
                sup = guess_supplier(r['–ó–∞–¥–∞—á–∞'])
                if sup:
                    plan_next_by_supplier_rule(user_id, sup, r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è","–ö–æ—Ñ–µ–π–Ω—è"), r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), r['–ó–∞–¥–∞—á–∞'])
            else:
                summary.append("‚ö†Ô∏è –ù–µ —Å–º–æ–≥ –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π")

        elif op == "move":
            r = find_first_by_match(a.get("match"))
            if not r:
                summary.append("‚ö†Ô∏è –ù–µ –Ω–∞—à—ë–ª –∑–∞–¥–∞—á—É –¥–ª—è move")
                continue
            new_date = a.get("date") or today_str()
            sheet_title, ws, idx, _ = find_row_index_by_id(r["_id"])
            ws.update_cell(idx, SHEET_TASK_HEADERS.index("–î–∞—Ç–∞")+1, new_date)
            summary.append(f"üìÖ –ü–µ—Ä–µ–Ω—ë—Å: {r['–ó–∞–¥–∞—á–∞']} ‚Üí {new_date}")

        elif op == "delete":
            r = find_first_by_match(a.get("match"))
            if not r:
                summary.append("‚ö†Ô∏è –ù–µ –Ω–∞—à—ë–ª –∑–∞–¥–∞—á—É –¥–ª—è delete")
                continue
            sheet_title, ws, idx, _ = find_row_index_by_id(r["_id"])
            ws.delete_rows(idx)
            summary.append(f"üóë –£–¥–∞–ª–∏–ª: {r['–ó–∞–¥–∞—á–∞']}")

        elif op == "subtask":
            r = find_first_by_match(a.get("match"))
            if not r:
                summary.append("‚ö†Ô∏è –ù–µ –Ω–∞—à—ë–ª —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –∑–∞–¥–∞—á—É –¥–ª—è subtask")
                continue
            add_task(r["–î–∞—Ç–∞"], r["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"], r["–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è"], f"‚Ä¢ {a.get('text')}", r.get("–î–µ–¥–ª–∞–π–Ω") or "", user_id, source=f"subtask:{r['_id']}")
            summary.append(f"‚ûï –ü–æ–¥–∑–∞–¥–∞—á–∞ –∫ ¬´{r['–ó–∞–¥–∞—á–∞']}¬ª")

        elif op == "remind":
            r = find_first_by_match(a.get("match"))
            if not r:
                summary.append("‚ö†Ô∏è –ù–µ –Ω–∞—à—ë–ª –∑–∞–¥–∞—á—É –¥–ª—è remind")
                continue
            tm = a.get("time") or ""
            if not re.fullmatch(r"\d{1,2}:\d{2}", tm):
                summary.append("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è remind")
                continue
            sheet_title, ws, idx, _ = find_row_index_by_id(r["_id"])
            cur_source = (r.get("–ò—Å—Ç–æ—á–Ω–∏–∫") or "")
            new_source = (cur_source + "; " if cur_source else "") + f"remind:{tm}"
            ws.update_cell(idx, SHEET_TASK_HEADERS.index("–ò—Å—Ç–æ—á–Ω–∏–∫")+1, new_source)
            summary.append(f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {tm} –¥–ª—è ¬´{r['–ó–∞–¥–∞—á–∞']}¬ª")

    if not used_ai and not actions:
        return "AI-–∫–æ–º–∞–Ω–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã (–Ω–µ—Ç OPENAI_API_KEY)."
    return "\n".join(summary) if summary else "–ö–æ–º–∞–Ω–¥—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã, –Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ."

# ===================== –°–û–°–¢–û–Ø–ù–ò–Ø =====================
USER_STATE = {}
USER_DATA  = {}

def set_state(uid, state, data=None):
    USER_STATE[uid] = state
    if data is not None:
        USER_DATA[uid] = data

def get_state(uid): return USER_STATE.get(uid)
def get_data(uid):  return USER_DATA.get(uid, {})
def clear_state(uid):
    USER_STATE.pop(uid, None); USER_DATA.pop(uid, None)

# ===================== –•–ï–ù–î–õ–ï–†–´ =====================
@bot.message_handler(commands=["start"])
def cmd_start(m):
    ensure_user_in_sheet(m.chat.id, m.from_user.full_name if m.from_user else "")
    bot.send_message(m.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∑–∞–¥–∞—á–∞–º. –ß—Ç–æ –¥–µ–ª–∞–µ–º?", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "üìÖ –°–µ–≥–æ–¥–Ω—è")
def handle_today(m):
    uid = m.chat.id
    date_s = today_str()
    rows = tasks_on_date(uid, date_s)
    if not rows:
        bot.send_message(uid, f"üìÖ –ó–∞–¥–∞—á–∏ –Ω–∞ {date_s}\n\n–ó–∞–¥–∞—á –Ω–µ—Ç.", reply_markup=main_menu()); return
    items = []
    for r in rows:
        tid = r["_id"]
        items.append((build_task_line(r), tid))
    page = 1
    total_pages = (len(items)+PAGE_SIZE-1)//PAGE_SIZE
    slice_items = items[(page-1)*PAGE_SIZE:page*PAGE_SIZE]
    kb = page_buttons(slice_items, page, total_pages, prefix_action="open")
    header = f"üìÖ –ó–∞–¥–∞—á–∏ –Ω–∞ {date_s}\n\n" + format_grouped(rows, header_date=date_s)
    bot.send_message(uid, header+"\n\n–û—Ç–∫—Ä–æ–π –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞–¥–∞—á–∏:", reply_markup=kb)

@bot.message_handler(func=lambda msg: msg.text == "üìÜ –ù–µ–¥–µ–ª—è")
def handle_week(m):
    uid = m.chat.id
    ts = tasks_between(uid, now_local().date(), 7)
    if not ts:
        bot.send_message(uid, "–ù–∞ –Ω–µ–¥–µ–ª—é –∑–∞–¥–∞—á –Ω–µ—Ç.", reply_markup=main_menu()); return
    by_day = {}
    for r in ts:
        by_day.setdefault(r["–î–∞—Ç–∞"], []).append(r)
    parts = []
    for d in sorted(by_day.keys(), key=lambda s: datetime.strptime(s, "%d.%m.%Y")):
        parts.append(format_grouped(by_day[d], header_date=d))
        parts.append("")
    bot.send_message(uid, "\n".join(parts), reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å")
def handle_add(m):
    uid = m.chat.id
    set_state(uid, "adding_text")
    bot.send_message(uid, "–û–ø–∏—à–∏ –∑–∞–¥–∞—á—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (—è —Ä–∞—Å–ø–∞—Ä—à—É –¥–∞—Ç—É/–≤—Ä–µ–º—è/–∫–∞—Ç–µ–≥–æ—Ä–∏—é).")

@bot.message_handler(func=lambda msg: msg.text == "üîé –ù–∞–π—Ç–∏")
def handle_search(m):
    uid = m.chat.id
    set_state(uid, "search_text")
    bot.send_message(uid, "–ß—Ç–æ –∏—â–µ–º? –í–≤–µ–¥–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è/–∫–∞—Ç–µ–≥–æ—Ä–∏–∏/–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏/–¥–∞—Ç—ã.")

@bot.message_handler(func=lambda msg: msg.text == "‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å")
def handle_done_menu(m):
    uid = m.chat.id
    set_state(uid, "done_text")
    bot.send_message(uid, "–ù–∞–ø–∏—à–∏, —á—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ. –ü—Ä–∏–º–µ—Ä: ¬´—Å–¥–µ–ª–∞–ª –∑–∞–∫–∞–∑ –∫-—ç–∫—Å–ø—Ä–æ —Ü–µ–Ω—Ç—Ä¬ª.")

@bot.message_handler(func=lambda msg: msg.text == "üöö –ü–æ—Å—Ç–∞–≤–∫–∞")
def handle_supply(m):
    bot.send_message(m.chat.id, "–ú–µ–Ω—é –ø–æ—Å—Ç–∞–≤–æ–∫:", reply_markup=supply_menu())

@bot.message_handler(func=lambda msg: msg.text == "üÜï –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")
def handle_add_supplier(m):
    uid = m.chat.id
    set_state(uid, "add_supplier")
    bot.send_message(uid, "–§–æ—Ä–º–∞—Ç: <b>–ù–∞–∑–≤–∞–Ω–∏–µ; –ü—Ä–∞–≤–∏–ª–æ; –î–µ–¥–ª–∞–π–Ω(–æ–ø—Ü.); Emoji(–æ–ø—Ü.); DeliveryOffsetDays(–æ–ø—Ü.)</b>\n"
                          "–ü—Ä–∏–º–µ—Ä—ã:\n–ö-–≠–∫—Å–ø—Ä–æ; –∫–∞–∂–¥—ã–µ 2 –¥–Ω—è; 14:00; üì¶; 1\n–ò–ü –í—ã–ª–µ–≥–∂–∞–Ω–∏–Ω–∞; shelf 72h; 14:00; ü•ò; 1")

@bot.message_handler(func=lambda msg: msg.text == "üì¶ –ó–∞–∫–∞–∑—ã —Å–µ–≥–æ–¥–Ω—è")
def handle_today_orders(m):
    uid = m.chat.id
    date_s = today_str()
    rows = tasks_on_date(uid, date_s)
    orders = [r for r in rows if is_order_task(r.get("–ó–∞–¥–∞—á–∞",""))]
    if not orders:
        bot.send_message(uid, "–°–µ–≥–æ–¥–Ω—è –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç.", reply_markup=supply_menu()); return
    kb = types.InlineKeyboardMarkup()
    for i,r in enumerate(orders, start=1):
        kb.add(types.InlineKeyboardButton(build_task_line(r, i), callback_data=mk_cb("open", id=r["_id"])))
    bot.send_message(uid, "–ó–∞–∫–∞–∑—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:", reply_markup=kb)

@bot.message_handler(func=lambda msg: msg.text == "üß† AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç")
def handle_ai(m):
    uid = m.chat.id
    tasks = tasks_between(uid, now_local().date(), 7)
    brief = []
    for r in sorted(tasks, key=lambda x: (datetime.strptime(x["–î–∞—Ç–∞"], "%d.%–º.%Y"), x.get("–î–µ–¥–ª–∞–π–Ω","") or "", x.get("–ó–∞–¥–∞—á–∞","") or "")):
        brief.append(f"{r['–î–∞—Ç–∞']} ‚Ä¢ {r['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']}/{r['–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è'] or '‚Äî'} ‚Äî {r['–ó–∞–¥–∞—á–∞']} (–¥–æ {r['–î–µ–¥–ª–∞–π–Ω'] or '‚Äî'}) [{r.get('–°—Ç–∞—Ç—É—Å','')}]")
    context = "\n".join(brief)[:4000]
    if not OPENAI_API_KEY:
        bot.send_message(uid, "–°–æ–≤–µ—Ç: –Ω–∞—á–Ω–∏ —Å –∑–∞–¥–∞—á —Å –±–ª–∏–∂–∞–π—à–∏–º –¥–µ–¥–ª–∞–π–Ω–æ–º. –ö—Ä—É–ø–Ω—ã–µ ‚Äî —Ä–∞–∑–±–µ–π –Ω–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏.", reply_markup=main_menu()); return
    try:
        from openai import OpenAI
        client = OpenAI(api_key=OPENAI_API_KEY)
        sys = "–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é. –ö—Ä–∞—Ç–∫–æ, –ø–æ –¥–µ–ª—É, –±—É–ª–ª–µ—Ç–∞–º–∏, –Ω–∞ —Ä—É—Å—Å–∫–æ–º."
        prompt = f"–°–æ—Å—Ç–∞–≤—å –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –±–ª–∏–∂–∞–π—à–∏–µ 2 –¥–Ω—è. –£—á—Ç–∏ –¥–µ–¥–ª–∞–π–Ω—ã. –ó–∞–¥–∞—á–∏:\n{context}"
        resp = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role":"system","content":sys},{"role":"user","content":prompt}],
            temperature=0.3
        )
        bot.send_message(uid, f"üß† {resp.choices[0].message.content.strip()}", reply_markup=main_menu())
    except Exception as e:
        log.error("AI assistant error: %s", e)
        bot.send_message(uid, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "ü§ñ AI –∫–æ–º–∞–Ω–¥—ã")
def handle_ai_cmd(m):
    uid = m.chat.id
    set_state(uid, "ai_cmd")
    bot.send_message(uid, "–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∫–æ–º–∞–Ω–¥—É: ¬´–ø–µ—Ä–µ–Ω–µ—Å–∏ –∑–∞–∫–∞–∑ –∫-—ç–∫—Å–ø—Ä–æ –Ω–∞ –∑–∞–≤—Ç—Ä–∞¬ª, ¬´–¥–æ–±–∞–≤—å –≤—Å—Ç—Ä–µ—á—É –∑–∞–≤—Ç—Ä–∞ 15:00 –≤ –ª–∏—á–Ω–æ–µ¬ª, ¬´–∑–∞–∫—Ä–æ–π –∑–∞–∫–∞–∑ –≤—ã–ª–µ–≥–∂–∞–Ω–∏–Ω–∞ —Ü–µ–Ω—Ç—Ä¬ª –∏ —Ç.–ø.")

@bot.message_handler(func=lambda msg: msg.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
def handle_settings(m):
    bot.send_message(m.chat.id, f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: <b>{TZ_NAME}</b>\n–£—Ç—Ä–µ–Ω–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç: <b>08:00</b>", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "‚¨Ö –ù–∞–∑–∞–¥")
def handle_back(m):
    clear_state(m.chat.id)
    bot.send_message(m.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

# ===================== –¢–ï–ö–°–¢–û–í–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø =====================
@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "adding_text")
def adding_text(m):
    uid = m.chat.id
    txt = m.text.strip()
    try:
        items = ai_parse_to_tasks(txt, uid)
        created = 0
        for it in items:
            date_s   = it["date"] or today_str()
            category = it["category"]
            subcat   = it["subcategory"]
            task     = it["task"]
            deadline = it["deadline"]
            repeat   = it["repeat"]
            source   = it["source"]
            add_task(date_s, category, subcat, task, deadline, uid, status="", repeat=repeat, source=source)
            created += 1
        bot.send_message(uid, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–¥–∞—á: {created}", reply_markup=main_menu())
        log_event(uid, "add_task_nlp", txt)
    except Exception as e:
        log.error("adding_text error: %s", e)
        bot.send_message(uid, "–ù–µ —Å–º–æ–≥ –¥–æ–±–∞–≤–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –∏–Ω–∞—á–µ.", reply_markup=main_menu())
    finally:
        clear_state(uid)

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "search_text")
def search_text(m):
    uid = m.chat.id
    q = m.text.strip().lower()
    found = []
    for r in read_all_tasks_for_user(uid):
        hay = " ".join([str(r.get(k,"")) for k in SHEET_TASK_HEADERS]).lower()
        if q in hay:
            found.append((build_task_line(r), r["_id"]))
    if not found:
        bot.send_message(uid, "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=main_menu()); clear_state(uid); return
    total_pages = (len(found)+PAGE_SIZE-1)//PAGE_SIZE
    page = 1
    slice_items = found[(page-1)*PAGE_SIZE:page*PAGE_SIZE]
    kb = page_buttons(slice_items, page, total_pages, prefix_action="open")
    bot.send_message(uid, "–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:", reply_markup=kb)
    clear_state(uid)

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "done_text")
def done_text(m):
    uid = m.chat.id
    txt = m.text.strip().lower()
    supplier = guess_supplier(txt)
    rows = tasks_on_date(uid, today_str())
    changed = 0
    last_closed = None
    for r in rows:
        if (r.get("–°—Ç–∞—Ç—É—Å","") or "").lower() == "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ": continue
        t = (r.get("–ó–∞–¥–∞—á–∞","") or "").lower()
        if supplier and supplier.lower() not in t: continue
        if not supplier and not any(w in t for w in ["–∫-—ç–∫—Å–ø—Ä–æ","–≤—ã–ª–µ–≥–∂–∞–Ω","–∑–∞–∫–∞–∑","—Å–¥–µ–ª–∞–ª","—Å–¥–µ–ª–∞–ª–∏"]): continue
        ok, _ = mark_done_by_id(r["_id"], uid)
        if ok:
            changed += 1
            last_closed = r
    msg = f"‚úÖ –û—Ç–º–µ—á–µ–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º: {changed}."
    if changed and last_closed and supplier:
        created = plan_next_by_supplier_rule(uid, supplier, last_closed.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è","–ö–æ—Ñ–µ–π–Ω—è"), last_closed.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), last_closed.get("–ó–∞–¥–∞—á–∞",""))
        if created:
            msg += "\nüîÆ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ: " + ", ".join([f"–ø—Ä–∏–µ–º–∫–∞ {d1.strftime('%d.%m')} ‚Üí –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ {d2.strftime('%d.%m')}" for d1,d2 in created])
    bot.send_message(uid, msg, reply_markup=main_menu())
    clear_state(uid)

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "ai_cmd")
def ai_cmd_text(m):
    uid = m.chat.id
    res = ai_command_mode(m.text.strip(), uid)
    bot.send_message(uid, f"ü§ñ {res}", reply_markup=main_menu())
    clear_state(uid)

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "add_supplier")
def add_supplier_text(m):
    uid = m.chat.id
    txt = m.text.strip()
    try:
        parts = [p.strip() for p in txt.split(";")]
        name = parts[0]
        rule = parts[1] if len(parts) > 1 else ""
        deadline = parts[2] if len(parts) > 2 else "14:00"
        emoji = parts[3] if len(parts) > 3 else "üì¶"
        d_off = int(parts[4]) if len(parts) > 4 and parts[4].isdigit() else 1
        ws_suppliers.append_row([name, rule, deadline, emoji, d_off], value_input_option="USER_ENTERED")
        load_supplier_rules_from_sheet()
        bot.send_message(uid, f"‚úÖ –ü–æ—Å—Ç–∞–≤—â–∏–∫ ¬´{name}¬ª –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=supply_menu())
    except Exception as e:
        log.error("add_supplier error: %s", e)
        bot.send_message(uid, "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞.", reply_markup=supply_menu())
    finally:
        clear_state(uid)

# ===================== –ö–ê–†–¢–û–ß–ö–ò / CALLBACKS =====================
def render_task_card(task_id):
    sheet_title, ws, idx, r = find_row_index_by_id(task_id)
    if not idx: return "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", None
    date_s = r.get("–î–∞—Ç–∞","")
    header = (
        f"<b>{r.get('–ó–∞–¥–∞—á–∞','')}</b>\n"
        f"üìÖ {weekday_ru(datetime.strptime(date_s,'%d.%m.%Y'))} ‚Äî {date_s}\n"
        f"üìÅ {r.get('–ö–∞—Ç–µ–≥–æ—Ä–∏—è','‚Äî')} / {r.get('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è','‚Äî')}  [{sheet_title}]\n"
        f"‚è∞ –î–µ–¥–ª–∞–π–Ω: {r.get('–î–µ–¥–ª–∞–π–Ω') or '‚Äî'}\n"
        f"üìù –°—Ç–∞—Ç—É—Å: {r.get('–°—Ç–∞—Ç—É—Å') or '‚Äî'}"
    )
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å", callback_data=mk_cb("done", id=task_id)))
    if is_order_task(r.get("–ó–∞–¥–∞—á–∞","")):
        kb.add(types.InlineKeyboardButton("üöö –ü—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É", callback_data=mk_cb("accept_delivery", id=task_id)))
    kb.add(types.InlineKeyboardButton("‚ûï –ü–æ–¥–∑–∞–¥–∞—á–∞", callback_data=mk_cb("add_sub", id=task_id)))
    kb.add(types.InlineKeyboardButton("‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data=mk_cb("remind_set", id=task_id)))
    kb.add(types.InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data=mk_cb("close_card")))
    return header, kb

@bot.callback_query_handler(func=lambda c: True)
def callbacks(c):
    uid = c.message.chat.id
    data = parse_cb(c.data) if c.data and c.data != "noop" else None
    if not data:
        bot.answer_callback_query(c.id); return
    a = data.get("a")

    if a == "page":
        page = int(data.get("p", 1))
        date_s = today_str()
        rows = tasks_on_date(uid, date_s)
        items = [(build_task_line(r), r["_id"]) for r in rows]
        total_pages = (len(items)+PAGE_SIZE-1)//PAGE_SIZE
        page = max(1, min(page, total_pages))
        slice_items = items[(page-1)*PAGE_SIZE:page*PAGE_SIZE]
        kb = page_buttons(slice_items, page, total_pages, prefix_action="open")
        try:
            bot.edit_message_reply_markup(uid, c.message.message_id, reply_markup=kb)
        except Exception:
            pass
        bot.answer_callback_query(c.id); return

    if a == "open":
        task_id = data.get("id")
        text, kb = render_task_card(task_id)
        bot.answer_callback_query(c.id)
        bot.send_message(uid, text, reply_markup=kb)
        return

    if a == "close_card":
        bot.answer_callback_query(c.id, "–ó–∞–∫—Ä—ã—Ç–æ")
        try:
            bot.delete_message(uid, c.message.message_id)
        except Exception:
            pass
        return

    if a == "done":
        task_id = data.get("id")
        ok, r = mark_done_by_id(task_id, uid)
        if not ok:
            bot.answer_callback_query(c.id, "–ù–µ —Å–º–æ–≥ –æ—Ç–º–µ—Ç–∏—Ç—å", show_alert=True); return
        supplier = guess_supplier(r.get("–ó–∞–¥–∞—á–∞",""))
        msg = "‚úÖ –ì–æ—Ç–æ–≤–æ."
        if supplier:
            created = plan_next_by_supplier_rule(uid, supplier, r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è","–ö–æ—Ñ–µ–π–Ω—è"), r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ó–∞–¥–∞—á–∞",""))
            if created:
                msg += " –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∏–µ–º–∫–∞/—Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑."
        bot.answer_callback_query(c.id, msg, show_alert=True)
        text, kb = render_task_card(task_id)
        bot.edit_message_text(text, uid, c.message.message_id, reply_markup=kb)
        return

    if a == "accept_delivery":
        task_id = data.get("id")
        kb = types.InlineKeyboardMarkup()
        kb.row(
            types.InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data=mk_cb("accept_delivery_date", id=task_id, d="today")),
            types.InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞", callback_data=mk_cb("accept_delivery_date", id=task_id, d="tomorrow")),
        )
        kb.row(types.InlineKeyboardButton("üìÖ –î—Ä—É–≥–∞—è –¥–∞—Ç–∞", callback_data=mk_cb("accept_delivery_pick", id=task_id)))
        bot.answer_callback_query(c.id)
        bot.send_message(uid, "–ö–æ–≥–¥–∞ –ø—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É?", reply_markup=kb)
        return

    if a == "accept_delivery_pick":
        task_id = data.get("id")
        set_state(uid, "pick_delivery_date", {"task_id": task_id})
        bot.answer_callback_query(c.id)
        bot.send_message(uid, "–í–≤–µ–¥–∏ –¥–∞—Ç—É –î–î.–ú–ú.–ì–ì–ì–ì:")
        return

    if a == "accept_delivery_date":
        task_id = data.get("id")
        when = data.get("d")
        sheet_title, ws, idx, r = find_row_index_by_id(task_id)
        if not idx:
            bot.answer_callback_query(c.id, "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True); return
        date_s = today_str() if when=="today" else today_str(now_local()+timedelta(days=1))
        supplier = guess_supplier(r.get("–ó–∞–¥–∞—á–∞","")) or "–ü–æ—Å—Ç–∞–≤–∫–∞"
        add_task(date_s, r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""),
                 f"üöö –ü—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É {supplier} ({normalize_subcat_hint(r.get('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è','')) or '‚Äî'})",
                 "10:00", uid, source=f"subtask:{task_id}")
        bot.answer_callback_query(c.id, f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –Ω–∞ {date_s}", show_alert=True)
        return

    if a == "add_sub":
        task_id = data.get("id")
        set_state(uid, "add_subtask_text", {"task_id": task_id})
        bot.answer_callback_query(c.id)
        bot.send_message(uid, "–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –ø–æ–¥–∑–∞–¥–∞—á–∏:")
        return

    if a == "remind_set":
        task_id = data.get("id")
        set_state(uid, "set_reminder", {"task_id": task_id})
        bot.answer_callback_query(c.id)
        bot.send_message(uid, "–ö–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å? –ß–ß:–ú–ú")
        return

# ===================== –¢–ï–ö–°–¢: –ø–æ–¥–∑–∞–¥–∞—á–∏/–¥–∞—Ç—ã/–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è =====================
@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "add_subtask_text")
def add_subtask_text(m):
    uid = m.chat.id
    data = get_data(uid); task_id = data.get("task_id")
    text = m.text.strip()
    sheet_title, ws, idx, parent = find_row_index_by_id(task_id)
    if not idx:
        bot.send_message(uid, "–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_menu()); clear_state(uid); return
    add_task(parent.get("–î–∞—Ç–∞",""), parent.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""), parent.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""),
             f"‚Ä¢ {text}", parent.get("–î–µ–¥–ª–∞–π–Ω",""), uid, source=f"subtask:{task_id}")
    bot.send_message(uid, "–ü–æ–¥–∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.", reply_markup=main_menu())
    clear_state(uid)

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "pick_delivery_date")
def pick_delivery_date(m):
    uid = m.chat.id
    data = get_data(uid); task_id = data.get("task_id")
    ds = m.text.strip()
    try:
        datetime.strptime(ds, "%d.%m.%Y")
    except Exception:
        bot.send_message(uid, "–î–∞—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞. –ù—É–∂–µ–Ω —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì.", reply_markup=main_menu()); clear_state(uid); return
    sheet_title, ws, idx, r = find_row_index_by_id(task_id)
    if not idx:
        bot.send_message(uid, "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_menu()); clear_state(uid); return
    supplier = guess_supplier(r.get("–ó–∞–¥–∞—á–∞","")) or "–ü–æ—Å—Ç–∞–≤–∫–∞"
    add_task(ds, r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""),
             f"üöö –ü—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É {supplier} ({normalize_subcat_hint(r.get('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è','')) or '‚Äî'})",
             "10:00", uid, source=f"subtask:{task_id}")
    bot.send_message(uid, f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –Ω–∞ {ds}.", reply_markup=main_menu())
    clear_state(uid)

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "set_reminder")
def set_reminder(m):
    uid = m.chat.id
    data = get_data(uid); task_id = data.get("task_id")
    t = m.text.strip()
    if not re.fullmatch(r"\d{1,2}:\d{2}", t):
        bot.send_message(uid, "–ù—É–∂–µ–Ω —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú.", reply_markup=main_menu()); clear_state(uid); return
    sheet_title, ws, idx, r = find_row_index_by_id(task_id)
    if not idx:
        bot.send_message(uid, "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_menu()); clear_state(uid); return
    cur_source = r.get("–ò—Å—Ç–æ—á–Ω–∏–∫","") or ""
    new_source = (cur_source + "; " if cur_source else "") + f"remind:{t}"
    ws.update_cell(idx, SHEET_TASK_HEADERS.index("–ò—Å—Ç–æ—á–Ω–∏–∫")+1, new_source)
    bot.send_message(uid, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {t}.", reply_markup=main_menu())
    clear_state(uid)

# ===================== –û–ë–†–ê–ë–û–¢–ö–ê –°–´–†–û–ì–û –¢–ï–ö–°–¢–ê (–µ—Å–ª–∏ –Ω–µ –ø–æ–ø–∞–ª–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è) =====================
@bot.message_handler(func=lambda msg: True)
def fallback_text(m):
    uid = m.chat.id
    st = get_state(uid)
    if st: 
        return  # —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤—ã—à–µ

    text = (m.text or "").strip()
    if not text:
        bot.send_message(uid, "–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ù–∞–ø–∏—à–∏ –∑–∞–¥–∞—á—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é.", reply_markup=main_menu())
        return

    # 1) –µ—Å–ª–∏ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ‚Äî –æ—Ç–¥–∞—Ç—å –≤ AI-–∫–æ–º–∞–Ω–¥—ã
    heur = any(w in text.lower() for w in [
        "–ø–µ—Ä–µ–Ω–µ—Å", "–ø–µ—Ä–µ–Ω–µ—Å–∏", "–ø–µ—Ä–µ–Ω–µ—Å—Ç–∏", "–ø–µ—Ä–µ–º–µ—Å—Ç–∏", "–ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å",
        "–∑–∞–∫—Ä–æ–π", "–∑–∞–∫—Ä—ã—Ç—å", "—É–¥–∞–ª–∏", "—É–¥–∞–ª–∏—Ç—å", "—Å–¥–µ–ª–∞–π", "–¥–æ–±–∞–≤—å", "–Ω–∞–ø–æ–º–Ω–∏",
        "move", "done", "delete", "remind"
    ])
    if heur and OPENAI_API_KEY:
        res = ai_command_mode(text, uid)
        bot.send_message(uid, f"ü§ñ {res}", reply_markup=main_menu())
        return

    # 2) –∏–Ω–∞—á–µ ‚Äî –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏(-–∑–∞–¥–∞—á)
    try:
        items = ai_parse_to_tasks(text, uid)
        if not items:
            bot.send_message(uid, "–ù–µ –ø–æ–Ω—è–ª. –ù–∞–∂–º–∏ ¬´–ú–µ–Ω—é¬ª –∏–ª–∏ –æ–ø–∏—à–∏ –∑–∞–¥–∞—á—É –ø—Ä–æ—â–µ.", reply_markup=main_menu())
            return
        for it in items:
            add_task(
                it["date"] or today_str(),
                it["category"],
                it["subcategory"],
                it["task"],
                it["deadline"],
                uid,
                repeat=it["repeat"],
                source=it["source"]
            )
        bot.send_message(uid, f"üìù –î–æ–±–∞–≤–∏–ª {len(items)}.", reply_markup=main_menu())
        log_event(uid, "free_text_add", text)
    except Exception as e:
        log.error("fallback_text error: %s", e)
        bot.send_message(uid, "–ù–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å. –ü–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ ¬´‚ûï –î–æ–±–∞–≤–∏—Ç—å¬ª.", reply_markup=main_menu())

# ===================== –î–ê–ô–î–ñ–ï–°–¢–´ –ò –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø =====================
def build_daily_digest(uid: int) -> str:
    date_s = today_str()
    rows = tasks_on_date(uid, date_s)
    head = f"üåÖ –£—Ç—Ä–µ–Ω–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç ‚Äî {weekday_ru(datetime.strptime(date_s,'%d.%m.%Y'))}, {date_s}\n"
    if not rows:
        return head + "\n–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞—á –Ω–µ—Ç."
    return head + "\n" + format_grouped(rows, header_date=date_s)

def job_morning_digest():
    for uid in list_registered_users():
        try:
            bot.send_message(uid, build_daily_digest(uid), reply_markup=main_menu())
        except Exception as e:
            log.warning("digest send fail user %s: %s", uid, e)

def job_reminders_tick():
    now = now_local()
    tnow = now.strftime("%H:%M")
    date_s = today_str(now)
    ymd = now.strftime("%Y%m%d")
    for uid in list_registered_users():
        try:
            rows = tasks_on_date(uid, date_s)
            for r in rows:
                src = (r.get("–ò—Å—Ç–æ—á–Ω–∏–∫") or "")
                if f"remind:{tnow}" in src and f"reminded:{tnow}:{ymd}" not in src:
                    # –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                    try:
                        kb = types.InlineKeyboardMarkup()
                        kb.add(types.InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å", callback_data=mk_cb("open", id=r["_id"])))
                        bot.send_message(uid, f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {r.get('–ó–∞–¥–∞—á–∞','')} (–¥–æ {r.get('–î–µ–¥–ª–∞–π–Ω') or '‚Äî'})", reply_markup=kb)
                    except Exception as e:
                        log.warning("remind send fail %s: %s", uid, e)
                    # –ø–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
                    sheet_title, ws, idx, rfull = find_row_index_by_id(r["_id"])
                    if idx:
                        new_source = src + ( "; " if src else "" ) + f"reminded:{tnow}:{ymd}"
                        try:
                            ws.update_cell(idx, SHEET_TASK_HEADERS.index("–ò—Å—Ç–æ—á–Ω–∏–∫")+1, new_source)
                        except Exception:
                            pass
        except Exception as e:
            log.warning("reminder loop fail user %s: %s", uid, e)

def scheduler_loop():
    # –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –≤ 08:00
    schedule.every().day.at("08:00").do(job_morning_digest)
    # –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    schedule.every().minute.do(job_reminders_tick)
    log.info("Scheduler started: digest 08:00; reminders every minute")
    while True:
        try:
            schedule.run_pending()
        except Exception as e:
            log.error("schedule error: %s", e)
        time.sleep(1)

def start_scheduler_thread():
    t = threading.Thread(target=scheduler_loop, daemon=True)
    t.start()
    return t

# ===================== FLASK –í–ï–ë–•–£–ö / –ü–û–õ–õ–ò–ù–ì =====================
app = Flask(__name__)

@app.route("/healthz", methods=["GET"])
def healthz():
    return "ok"

@app.route(f"/{API_TOKEN}", methods=["POST"])
def telegram_webhook():
    try:
        json_str = request.get_data(as_text=True)
        update = types.Update.de_json(json_str)
        bot.process_new_updates([update])
    except Exception as e:
        log.error("webhook error: %s", e)
    return "ok"

def setup_webhook():
    if not WEBHOOK_URL:
        return False
    try:
        bot.remove_webhook()
        time.sleep(1)
        bot.set_webhook(url=WEBHOOK_URL, drop_pending_updates=True)
        log.info("Webhook set to %s", WEBHOOK_URL)
        return True
    except Exception as e:
        log.error("Failed to set webhook: %s", e)
        return False

# ===================== MAIN =====================
if __name__ == "__main__":
    start_scheduler_thread()
    if setup_webhook():
        # –ó–∞–ø—É—Å–∫ Flask –≤ –≤–µ–±-—Å—Ä–µ–¥–µ
        port = int(os.getenv("PORT", "8080"))
        app.run(host="0.0.0.0", port=port, debug=False)
    else:
        # –õ–æ–∫–∞–ª—å–Ω–æ/–±–µ–∑ –≤–µ–±—Ö—É–∫–∞ ‚Äî polling
        log.info("Starting polling‚Ä¶")
        ensure_user_in_sheet  # no-op hint for linter
        bot.infinity_polling(timeout=60, skip_pending=True)
