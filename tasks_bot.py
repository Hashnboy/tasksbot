# tasks_bot.py
# -*- coding: utf-8 -*-
import os
import re
import json
import time
import pytz
import hmac
import hashlib
import logging
import schedule
import threading
from datetime import datetime, timedelta

import gspread
from flask import Flask, request
from telebot import TeleBot, types

# ========= –û–ö–†–£–ñ–ï–ù–ò–ï =========
API_TOKEN        = os.getenv("TELEGRAM_TOKEN")
TABLE_URL        = os.getenv("GOOGLE_SHEETS_URL")
CREDENTIALS_FILE = os.getenv("GOOGLE_CREDENTIALS_JSON", "/etc/secrets/credentials.json")
WEBHOOK_BASE     = os.getenv("WEBHOOK_BASE")  # https://<your-app>.onrender.com
OPENAI_API_KEY   = os.getenv("OPENAI_API_KEY", "")
TZ_NAME          = os.getenv("TZ", "Europe/Moscow")
WEBHOOK_URL      = f"{WEBHOOK_BASE}/{API_TOKEN}" if API_TOKEN and WEBHOOK_BASE else None

LOCAL_TZ = pytz.timezone(TZ_NAME)

logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
log = logging.getLogger("tasksbot")

REQUIRED_ENVS = ["TELEGRAM_TOKEN", "GOOGLE_SHEETS_URL", "WEBHOOK_BASE"]
missing = [v for v in REQUIRED_ENVS if not os.getenv(v)]
if missing:
    log.warning("–ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: %s", ", ".join(missing))

# ========= –ò–ù–ò–¢ –ë–û–¢–ê / SHEETS =========
bot = TeleBot(API_TOKEN, parse_mode="HTML")

try:
    gc = gspread.service_account(filename=CREDENTIALS_FILE)
    sh = gc.open_by_url(TABLE_URL)
    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ª–∏—Å—Ç—ã
    WS_NAMES = {
        "–ö–æ—Ñ–µ–π–Ω—è": None,
        "–¢–∞–±–∞—á–∫–∞": None,
        "WB": None,
        "–õ–∏—á–Ω–æ–µ": None,
        "–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏": None,
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏": None,
        "–õ–æ–≥–∏": None,
    }
    for name in WS_NAMES.keys():
        WS_NAMES[name] = sh.worksheet(name)
    ws_suppliers = WS_NAMES["–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏"]
    ws_users     = WS_NAMES["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"]
    ws_logs      = WS_NAMES["–õ–æ–≥–∏"]
    log.info("Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω—ã.")
except Exception:
    log.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets", exc_info=True)
    raise

# –ï–¥–∏–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Ä–∞–±–æ—á–∏—Ö –ª–∏—Å—Ç–æ–≤ —Å –∑–∞–¥–∞—á–∞–º–∏
TASKS_HEADERS = ["–î–∞—Ç–∞","–ö–∞—Ç–µ–≥–æ—Ä–∏—è","–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è","–ó–∞–¥–∞—á–∞","–î–µ–¥–ª–∞–π–Ω","User ID","–°—Ç–∞—Ç—É—Å","–ü–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å","–ò—Å—Ç–æ—á–Ω–∏–∫"]

# ========= –£–¢–ò–õ–ò–¢–´ –í–†–ï–ú–ï–ù–ò =========
def now_local():
    # –í—Å–µ–≥–¥–∞ –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–µ–º—Å—è –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π TZ, –∫–∞–∫ —Ç—ã –ø—Ä–æ—Å–∏–ª
    return datetime.now(LOCAL_TZ)

def today_str(dt=None):
    if dt is None: dt = now_local()
    return dt.strftime("%d.%m.%Y")

def weekday_ru(dt: datetime) -> str:
    names = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫","–í—Ç–æ—Ä–Ω–∏–∫","–°—Ä–µ–¥–∞","–ß–µ—Ç–≤–µ—Ä–≥","–ü—è—Ç–Ω–∏—Ü–∞","–°—É–±–±–æ—Ç–∞","–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    return names[dt.weekday()]

# ========= –ü–†–û–ß–ï–ï =========
PAGE_SIZE = 7  # –ø–∞–≥–∏–Ω–∞—Ü–∏—è —Å–ø–∏—Å–∫–æ–≤

def log_event(user_id, action, payload=""):
    try:
        ws_logs.append_row([datetime.utcnow().isoformat(), str(user_id), action, payload], value_input_option="USER_ENTERED")
    except Exception:
        pass

def row_to_dict_list(ws):
    return ws.get_all_records()

def ensure_headers(ws):
    # –º—è–≥–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî –µ—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—É—Å—Ç—ã–µ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
    try:
        head = ws.row_values(1)
        if not head or len(head) < len(TASKS_HEADERS):
            ws.update("A1:I1", [TASKS_HEADERS])
    except Exception:
        pass

for nm, ws in WS_NAMES.items():
    if nm in ("–ö–æ—Ñ–µ–π–Ω—è","–¢–∞–±–∞—á–∫–∞","WB","–õ–∏—á–Ω–æ–µ"):
        ensure_headers(ws)

def sha_task_id(user_id, date_s, cat, subcat, text, deadline):
    key = f"{user_id}|{date_s}|{cat}|{subcat}|{text}|{deadline}"
    return hashlib.sha1(key.encode("utf-8")).hexdigest()[:16]

def find_row_index_by_id(ws, task_id, rows):
    for i, r in enumerate(rows, start=2):  # –¥–∞–Ω–Ω—ã–µ —Å 2-–π —Å—Ç—Ä–æ–∫–∏
        rid = sha_task_id(str(r.get("User ID")), r.get("–î–∞—Ç–∞",""), r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ó–∞–¥–∞—á–∞",""), r.get("–î–µ–¥–ª–∞–π–Ω",""))
        if rid == task_id:
            return i
    return None

def add_task_to_ws(ws, date_s, category, subcategory, text, deadline, user_id, status="", repeat="", source=""):
    ws.append_row([date_s, category, subcategory, text, deadline, str(user_id), status, repeat, source], value_input_option="USER_ENTERED")

def mark_done_by_id(ws, task_id, user_id):
    rows = row_to_dict_list(ws)
    idx = find_row_index_by_id(ws, task_id, rows)
    if not idx:
        return False, None
    r = rows[idx-2]
    if str(r.get("User ID")) != str(user_id):
        return False, None
    ws.update_cell(idx, TASKS_HEADERS.index("–°—Ç–∞—Ç—É—Å")+1, "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
    return True, r

def is_order_task(text: str) -> bool:
    t = (text or "").lower()
    return any(x in t for x in ["–∑–∞–∫–∞–∑", "–∑–∞–∫–∞–∑–∞—Ç—å"])

def guess_supplier(text: str) -> str:
    t = (text or "").lower()
    if any(x in t for x in ["–∫-—ç–∫—Å–ø—Ä–æ","–∫ —ç–∫—Å–ø—Ä–æ","k-exp","k exp"]): return "–ö-–≠–∫—Å–ø—Ä–æ"
    if "–≤—ã–ª–µ–≥–∂–∞–Ω" in t: return "–ò–ü –í—ã–ª–µ–≥–∂–∞–Ω–∏–Ω–∞"
    if "–ª–æ–±–∞–Ω–æ–≤" in t: return "–õ–æ–±–∞–Ω–æ–≤"
    if "–∞–≤–∞–Ω—Ç–∞" in t: return "–ê–≤–∞–Ω—Ç–∞–∂"
    return ""

def normalize_tt_from_subcat(subcat: str) -> str:
    s = (subcat or "").strip().lower()
    if "—Ü–µ–Ω—Ç—Ä" in s: return "–¶–µ–Ω—Ç—Ä"
    if "–ø–æ–ª–µ—Ç" in s or "–ø–æ–ª—ë—Ç" in s: return "–ü–æ–ª–µ—Ç"
    if "–∫–ª–∏–º–æ–≤" in s: return "–ö–ª–∏–º–æ–≤–æ"
    return subcat or ""

# ========= –ü–†–ê–í–ò–õ–ê –ü–û–°–¢–ê–í–©–ò–ö–û–í =========
SUPPLIER_RULES = {
    "–∫-—ç–∫—Å–ø—Ä–æ": {
        "kind": "cycle_every_n_days",
        "order_every_days": 2,
        "delivery_offset_days": 1,
        "order_deadline": "14:00",
        "emoji": "üì¶",
    },
    "–∏–ø –≤—ã–ª–µ–≥–∂–∞–Ω–∏–Ω–∞": {
        "kind": "delivery_shelf_then_order",
        "delivery_offset_days": 1,
        "shelf_hours": 72,
        "order_deadline": "14:00",
        "emoji": "ü•ò",
    },
    "–ª–æ–±–∞–Ω–æ–≤": {
        "kind": "cycle_every_n_days",
        "order_every_days": 2,
        "delivery_offset_days": 1,
        "order_deadline": "12:00",
        "emoji": "üßã",
    },
    "–∞–≤–∞–Ω—Ç–∞–∂": {
        "kind": "cycle_every_n_days",
        "order_every_days": 3,
        "delivery_offset_days": 1,
        "order_deadline": "12:00",
        "emoji": "ü•ê",
    },
}

def load_supplier_rules_from_sheet():
    try:
        rows = row_to_dict_list(ws_suppliers)
        for r in rows:
            name = (r.get("–ü–æ—Å—Ç–∞–≤—â–∏–∫") or r.get("–ù–∞–∑–≤–∞–Ω–∏–µ") or "").strip().lower()
            if not name: continue
            kind_raw = (r.get("–ü—Ä–∞–≤–∏–ª–æ") or r.get("Rule") or "").strip().lower()
            if not kind_raw: continue
            d_off = int(str(r.get("DeliveryOffsetDays") or r.get("–°–º–µ—â–µ–Ω–∏–µ–ü–æ—Å—Ç–∞–≤–∫–∏–î–Ω–µ–π") or 1))
            deadline = (r.get("–î–µ–¥–ª–∞–π–Ω–ó–∞–∫–∞–∑–∞") or "14:00").strip()
            emoji = (r.get("Emoji") or "üì¶").strip()

            if "–∫–∞–∂–¥—ã–µ" in kind_raw:
                n = int(re.findall(r"\d+", kind_raw)[0]) if re.findall(r"\d+", kind_raw) else 2
                SUPPLIER_RULES[name] = {
                    "kind": "cycle_every_n_days",
                    "order_every_days": n,
                    "delivery_offset_days": d_off,
                    "order_deadline": deadline,
                    "emoji": emoji
                }
            elif "shelf" in kind_raw or "—Ö—Ä–∞–Ω" in kind_raw or "72" in kind_raw:
                shelf = int(re.findall(r"\d+", kind_raw)[0]) if re.findall(r"\d+", kind_raw) else 72
                SUPPLIER_RULES[name] = {
                    "kind": "delivery_shelf_then_order",
                    "delivery_offset_days": d_off,
                    "shelf_hours": shelf,
                    "order_deadline": deadline,
                    "emoji": emoji
                }
    except Exception as e:
        log.warning("–ù–µ —Å–º–æ–≥ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: %s", e)

load_supplier_rules_from_sheet()

def plan_next_by_supplier_rule(user_id, supplier_name, category, subcategory, base_task_text):
    key = (supplier_name or "").strip().lower()
    rule = SUPPLIER_RULES.get(key)
    if not rule:
        return []
    created = []
    today = now_local().date()

    # –∫—É–¥–∞ –ø–∏—à–µ–º (–∫–∞—Ç–µ–≥–æ—Ä–∏—è ‚Üí –ª–∏—Å—Ç)
    ws = WS_NAMES.get(category) or WS_NAMES["–ö–æ—Ñ–µ–π–Ω—è"]

    if rule["kind"] == "cycle_every_n_days":
        delivery_day = today + timedelta(days=rule["delivery_offset_days"])
        next_order_day = today + timedelta(days=rule["order_every_days"])
        add_task_to_ws(ws, delivery_day.strftime("%d.%m.%Y"), category, subcategory,
                       f"{rule['emoji']} –ü—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É {supplier_name} ({normalize_tt_from_subcat(subcategory) or '‚Äî'})",
                       "10:00", user_id, status="", repeat="", source=f"auto:delivery:{supplier_name}")
        add_task_to_ws(ws, next_order_day.strftime("%d.%m.%Y"), category, subcategory,
                       f"{rule['emoji']} –ó–∞–∫–∞–∑–∞—Ç—å {supplier_name} ({normalize_tt_from_subcat(subcategory) or '‚Äî'})",
                       rule["order_deadline"], user_id, status="", repeat="", source=f"auto:order:{supplier_name}")
        created.append((delivery_day, next_order_day))

    elif rule["kind"] == "delivery_shelf_then_order":
        delivery_day = today + timedelta(days=rule["delivery_offset_days"])
        next_order_day = delivery_day + timedelta(days=2)  # ~72—á
        add_task_to_ws(ws, delivery_day.strftime("%d.%m.%Y"), category, subcategory,
                       f"{rule['emoji']} –ü—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É {supplier_name} ({normalize_tt_from_subcat(subcategory) or '‚Äî'})",
                       "11:00", user_id, status="", repeat="", source=f"auto:delivery:{supplier_name}")
        add_task_to_ws(ws, next_order_day.strftime("%d.%m.%Y"), category, subcategory,
                       f"{rule['emoji']} –ó–∞–∫–∞–∑–∞—Ç—å {supplier_name} ({normalize_tt_from_subcat(subcategory) or '‚Äî'})",
                       rule["order_deadline"], user_id, status="", repeat="", source=f"auto:order:{supplier_name}")
        created.append((delivery_day, next_order_day))
    return created

# ========= –ß–¢–ï–ù–ò–ï –ó–ê–î–ê–ß (–ø–æ –≤—Å–µ–º –ª–∏—Å—Ç–∞–º) =========
CATEGORY_SHEETS = ["–ö–æ—Ñ–µ–π–Ω—è","–¢–∞–±–∞—á–∫–∞","WB","–õ–∏—á–Ω–æ–µ"]

def get_all_user_tasks_for_date(user_id, date_s):
    tasks = []
    for name in CATEGORY_SHEETS:
        ws = WS_NAMES[name]
        rows = row_to_dict_list(ws)
        for r in rows:
            if str(r.get("User ID")) == str(user_id) and (r.get("–î–∞—Ç–∞") == date_s):
                r["_ws_name"] = name
                tasks.append(r)
    return tasks

def get_all_user_tasks_between(user_id, start_dt, days=7):
    date_set = {(start_dt + timedelta(days=i)).strftime("%d.%–º.%Y") for i in range(days)}
    tasks = []
    for name in CATEGORY_SHEETS:
        ws = WS_NAMES[name]
        rows = row_to_dict_list(ws)
        for r in rows:
            if str(r.get("User ID")) == str(user_id) and (r.get("–î–∞—Ç–∞") in date_set):
                r["_ws_name"] = name
                tasks.append(r)
    return tasks

# ========= –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï =========
def format_grouped(tasks, header_date=None):
    if not tasks:
        return "–ó–∞–¥–∞—á –Ω–µ—Ç."
    def k(r):
        dl = r.get("–î–µ–¥–ª–∞–π–Ω") or ""
        try:
            dlk = datetime.strptime(dl, "%H:%M").time()
        except:
            dlk = datetime.min.time()
        return (r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), dlk, r.get("–ó–∞–¥–∞—á–∞",""))
    tasks = sorted(tasks, key=k)
    out = []
    if header_date:
        dt = datetime.strptime(header_date, "%d.%m.%Y")
        out.append(f"‚Ä¢ {weekday_ru(dt)} ‚Äî {header_date}\n")
    cur_cat = cur_sub = None
    for r in tasks:
        cat = r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è","") or "‚Äî"
        sub = r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è","") or "‚Äî"
        txt = r.get("–ó–∞–¥–∞—á–∞","")
        dl  = r.get("–î–µ–¥–ª–∞–π–Ω","")
        st  = (r.get("–°—Ç–∞—Ç—É—Å","") or "").lower()
        rep = (r.get("–ü–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å","") or "").strip()
        icon = "‚úÖ" if st == "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ" else ("üîÅ" if rep else "‚¨ú")
        if cat != cur_cat:
            out.append(f"üìÇ <b>{cat}</b>"); cur_cat = cat; cur_sub = None
        if sub != cur_sub:
            out.append(f"  ‚îî <b>{sub}</b>"); cur_sub = sub
        line = f"    ‚îî {icon} {txt}"
        if dl: line += f"  <i>(–¥–æ {dl})</i>"
        out.append(line)
    return "\n".join(out)

def build_task_line(r, i=None):
    dl = r.get("–î–µ–¥–ª–∞–π–Ω") or "‚Äî"
    prefix = f"{i}. " if i is not None else ""
    return f"{prefix}{r.get('–ö–∞—Ç–µ–≥–æ—Ä–∏—è','‚Äî')}/{r.get('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è','‚Äî')}: {r.get('–ó–∞–¥–∞—á–∞','')[:40]}‚Ä¶ (–¥–æ {dl})"

# ========= –ö–õ–ê–í–ò–ê–¢–£–†–´ =========
def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üìÖ –°–µ–≥–æ–¥–Ω—è","üìÜ –ù–µ–¥–µ–ª—è")
    kb.row("‚ûï –î–æ–±–∞–≤–∏—Ç—å","üîé –ù–∞–π—Ç–∏","‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å")
    kb.row("üöö –ü–æ—Å—Ç–∞–≤–∫–∞","üß† –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç","‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    return kb

def supply_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üÜï –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞","üì¶ –ó–∞–∫–∞–∑—ã —Å–µ–≥–æ–¥–Ω—è")
    kb.row("‚¨Ö –ù–∞–∑–∞–¥")
    return kb

# ========= INLINE-PAYLOAD =========
def mk_cb(action, **kwargs):
    payload = {"a": action, **kwargs}
    s = json.dumps(payload, ensure_ascii=False)
    sig = hmac.new(b"cb-key", s.encode("utf-8"), hashlib.sha1).hexdigest()[:6]
    return f"{sig}|{s}"

def parse_cb(data):
    try:
        sig, s = data.split("|", 1)
        check = hmac.new(b"cb-key", s.encode("utf-8"), hashlib.sha1).hexdigest()[:6]
        if sig != check: return None
        return json.loads(s)
    except Exception:
        return None

def page_buttons(items, page, total_pages, prefix_action):
    kb = types.InlineKeyboardMarkup()
    for it in items:
        kb.add(types.InlineKeyboardButton(it[0], callback_data=mk_cb(prefix_action, id=it[1])))
    nav = []
    if page > 1: nav.append(types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=mk_cb("page", p=page-1, pa=prefix_action)))
    nav.append(types.InlineKeyboardButton(f"{page}/{total_pages}", callback_data="noop"))
    if page < total_pages: nav.append(types.InlineKeyboardButton("‚û°Ô∏è", callback_data=mk_cb("page", p=page+1, pa=prefix_action)))
    if nav:
        kb.row(*nav)
    return kb

# ========= GPT (NLP) =========
def ai_parse_to_tasks(text, fallback_user_id):
    items = []
    used_ai = False
    if OPENAI_API_KEY:
        try:
            from openai import OpenAI
            client = OpenAI(api_key=OPENAI_API_KEY)
            sys = (
                "–¢—ã –ø–∞—Ä—Å–µ—Ä –∑–∞–¥–∞—á. –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON-–º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤. "
                "–°—Ö–µ–º–∞: {date:'–î–î.–ú–ú.–ì–ì–ì–ì'|'', time:'–ß–ß:–ú–ú'|'', category, subcategory, task, repeat:'', supplier:''}. "
                "–ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ ¬´—Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞/–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞¬ª, –ø—Ä–∏–≤–µ–¥–∏ –∫ –¥–∞—Ç–µ. "
                "–ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è ¬´–ö-–≠–∫—Å–ø—Ä–æ/–í—ã–ª–µ–≥–∂–∞–Ω–∏–Ω–∞/–õ–æ–±–∞–Ω–æ–≤/–ê–≤–∞–Ω—Ç–∞–∂¬ª ‚Äî —ç—Ç–æ –∑–∞–∫–∞–∑; category=–ö–æ—Ñ–µ–π–Ω—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é; "
                "subcategory ('–¶–µ–Ω—Ç—Ä','–ü–æ–ª–µ—Ç','–ö–ª–∏–º–æ–≤–æ') ‚Äî –µ—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –≤ —Ç–µ–∫—Å—Ç–µ."
            )
            resp = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role":"system","content":sys},{"role":"user","content":text}],
                temperature=0.1
            )
            raw = resp.choices[0].message.content.strip()
            parsed = json.loads(raw)
            if isinstance(parsed, dict): parsed = [parsed]
            for it in parsed:
                items.append({
                    "date": it.get("date") or "",
                    "category": it.get("category") or "–õ–∏—á–Ω–æ–µ",
                    "subcategory": it.get("subcategory") or "",
                    "task": it.get("task") or "",
                    "deadline": it.get("time") or "",
                    "user_id": fallback_user_id,
                    "repeat": it.get("repeat") or "",
                    "source": (it.get("supplier") or "")
                })
            used_ai = True
        except Exception as e:
            log.error("AI parse failed: %s", e)

    if not used_ai:
        tl = text.lower()
        cat = "–ö–æ—Ñ–µ–π–Ω—è" if any(x in tl for x in ["–∫–æ—Ñ–µ–π–Ω","–∫-—ç–∫—Å–ø—Ä–æ","–≤—ã–ª–µ–≥–∂–∞–Ω","–ª–æ–±–∞–Ω–æ–≤","–∞–≤–∞–Ω—Ç–∞"]) else ("–¢–∞–±–∞—á–∫–∞" if "—Ç–∞–±–∞—á" in tl else "–õ–∏—á–Ω–æ–µ")
        sub = "–¶–µ–Ω—Ç—Ä" if "—Ü–µ–Ω—Ç—Ä" in tl else ("–ü–æ–ª–µ—Ç" if ("–ø–æ–ª–µ—Ç" in tl or "–ø–æ–ª—ë—Ç" in tl) else ("–ö–ª–∏–º–æ–≤–æ" if "–∫–ª–∏–º–æ–≤" in tl else ""))
        dl = re.search(r"(\d{1,2}:\d{2})", text)
        deadline = dl.group(1) if dl else ""
        d = ""
        if "—Å–µ–≥–æ–¥–Ω—è" in tl: d = today_str()
        elif "–∑–∞–≤—Ç—Ä–∞" in tl: d = today_str(now_local()+timedelta(days=1))
        elif "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞" in tl: d = today_str(now_local()+timedelta(days=2))
        else:
            m = re.search(r"(\d{2}\.\d{2}\.\d{4})", text); d = m.group(1) if m else ""
        items = [{
            "date": d, "category": cat, "subcategory": sub,
            "task": text.strip(), "deadline": deadline,
            "user_id": fallback_user_id, "repeat":"", "source":""
        }]
    return items

def ai_assist_answer(query, user_id):
    try:
        rows = get_all_user_tasks_between(user_id, now_local().date(), 7)
        brief = []
        for r in sorted(rows, key=lambda x: (datetime.strptime(x["–î–∞—Ç–∞"], "%d.%m.%Y"), x.get("–î–µ–¥–ª–∞–π–Ω","") or "", x.get("–ó–∞–¥–∞—á–∞","") or "")):
            brief.append(f"{r['–î–∞—Ç–∞']} ‚Ä¢ {r['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']}/{r['–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è'] or '‚Äî'} ‚Äî {r['–ó–∞–¥–∞—á–∞']} (–¥–æ {r['–î–µ–¥–ª–∞–π–Ω'] or '‚Äî'}) [{r.get('–°—Ç–∞—Ç—É—Å','')}]")
        context = "\n".join(brief)[:4000]
        if not OPENAI_API_KEY:
            return "–°–æ–≤–µ—Ç: –Ω–∞—á–Ω–∏ —Å –∑–∞–¥–∞—á —Å –±–ª–∏–∂–∞–π—à–∏–º –¥–µ–¥–ª–∞–π–Ω–æ–º. –†–∞–∑–±–µ–π –∫—Ä—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ 2‚Äì3 –ø–æ–¥–∑–∞–¥–∞—á–∏ –∏ —Ä–∞—Å—Å—Ç–∞–≤—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."
        from openai import OpenAI
        client = OpenAI(api_key=OPENAI_API_KEY)
        sys = "–¢—ã –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–∞–¥–∞—á. –ö–æ—Ä–æ—Ç–∫–æ, –ø–æ –¥–µ–ª—É, –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –±—É–ª–ª–µ—Ç–∞–º–∏. –ú–æ–∂–µ—à—å –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–Ω—è–º."
        prompt = f"–ó–∞–ø—Ä–æ—Å: {query}\n\n–ú–æ–∏ –∑–∞–¥–∞—á–∏ (7 –¥–Ω–µ–π):\n{context}"
        resp = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role":"system","content":sys},{"role":"user","content":prompt}],
            temperature=0.3
        )
        return resp.choices[0].message.content.strip()
    except Exception as e:
        log.error("AI assistant error: %s", e)
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."

# ========= –°–û–°–¢–û–Ø–ù–ò–Ø =========
USER_STATE = {}     # uid -> state
USER_DATA  = {}     # uid -> payload dict

def set_state(uid, state, data=None):
    USER_STATE[uid] = state
    if data is not None: USER_DATA[uid] = data

def get_state(uid): return USER_STATE.get(uid)
def get_data(uid):  return USER_DATA.get(uid, {})
def clear_state(uid):
    USER_STATE.pop(uid, None)
    USER_DATA.pop(uid, None)

# ========= –ú–ï–ù–Æ –ò –•–ï–ù–î–õ–ï–†–´ =========
@bot.message_handler(commands=["start"])
def cmd_start(m):
    bot.send_message(m.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤. –ß—Ç–æ –¥–µ–ª–∞–µ–º?", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "üìÖ –°–µ–≥–æ–¥–Ω—è")
def handle_today(m):
    uid = m.chat.id
    date_s = today_str()
    rows = get_all_user_tasks_for_date(uid, date_s)
    if not rows:
        bot.send_message(uid, f"üìÖ –ó–∞–¥–∞—á–∏ –Ω–∞ {date_s}\n\n–ó–∞–¥–∞—á –Ω–µ—Ç.", reply_markup=main_menu()); return
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è/–∫–∞—Ä—Ç–æ—á–∫–∏
    items = []
    for r in rows:
        tid = sha_task_id(str(r.get("User ID")), r.get("–î–∞—Ç–∞",""), r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ó–∞–¥–∞—á–∞",""), r.get("–î–µ–¥–ª–∞–π–Ω",""))
        items.append((build_task_line(r), tid))
    page = 1
    total_pages = (len(items)+PAGE_SIZE-1)//PAGE_SIZE
    slice_items = items[(page-1)*PAGE_SIZE:page*PAGE_SIZE]
    kb = page_buttons(slice_items, page, total_pages, prefix_action="open")
    header = f"üìÖ –ó–∞–¥–∞—á–∏ –Ω–∞ {date_s}\n\n" + format_grouped(rows, header_date=date_s)
    bot.send_message(uid, header, reply_markup=main_menu())
    bot.send_message(uid, "–û—Ç–∫—Ä–æ–π –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞–¥–∞—á–∏:", reply_markup=kb)

@bot.message_handler(func=lambda msg: msg.text == "üìÜ –ù–µ–¥–µ–ª—è")
def handle_week(m):
    uid = m.chat.id
    tasks = get_all_user_tasks_between(uid, now_local().date(), 7)
    if not tasks:
        bot.send_message(uid, "–ù–∞ –Ω–µ–¥–µ–ª—é –∑–∞–¥–∞—á –Ω–µ—Ç.", reply_markup=main_menu()); return
    by_day = {}
    for r in tasks:
        by_day.setdefault(r["–î–∞—Ç–∞"], []).append(r)
    parts = []
    for d in sorted(by_day.keys(), key=lambda s: datetime.strptime(s, "%d.%m.%Y")):
        parts.append(format_grouped(by_day[d], header_date=d))
        parts.append("")
    bot.send_message(uid, "\n".join(parts), reply_markup=main_menu())

# === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á ¬´–ø–æ –∫–Ω–æ–ø–∫–∞–º¬ª: —Ç—ã –≤–≤–æ–¥–∏—à—å —Ç–æ–ª—å–∫–æ –ù–ê–ó–í–ê–ù–ò–ï ===
@bot.message_handler(func=lambda msg: msg.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å")
def handle_add(m):
    uid = m.chat.id
    set_state(uid, "add_title")
    bot.send_message(uid, "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç).")

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "add_title")
def add_title(m):
    uid = m.chat.id
    USER_DATA[uid] = {"title": m.text.strip()}
    # 1) –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    kb = types.InlineKeyboardMarkup()
    for name in CATEGORY_SHEETS:
        kb.add(types.InlineKeyboardButton(name, callback_data=mk_cb("pick_cat", cat=name)))
    bot.send_message(uid, "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: parse_cb(c.data) and parse_cb(c.data).get("a")=="pick_cat")
def cb_pick_cat(c):
    uid = c.message.chat.id
    data = parse_cb(c.data)
    cat = data.get("cat")
    d = get_data(uid); d["category"] = cat; set_state(uid, "add_title", d)
    # 2) –í—ã–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Ç–∏–ø–æ–≤—ã–µ)
    subs = ["–¶–µ–Ω—Ç—Ä","–ü–æ–ª–µ—Ç","–ö–ª–∏–º–æ–≤–æ","‚Äî"]
    kb = types.InlineKeyboardMarkup()
    for s in subs:
        kb.add(types.InlineKeyboardButton(s, callback_data=mk_cb("pick_sub", sub=s if s!="‚Äî" else "")))
    bot.answer_callback_query(c.id)
    bot.send_message(uid, "–í—ã–±–µ—Ä–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: parse_cb(c.data) and parse_cb(c.data).get("a")=="pick_sub")
def cb_pick_sub(c):
    uid = c.message.chat.id
    data = parse_cb(c.data)
    sub = data.get("sub","")
    d = get_data(uid); d["subcategory"] = sub; set_state(uid, "add_title", d)
    # 3) –í—ã–±–æ—Ä –¥–∞—Ç—ã: –°–µ–≥–æ–¥–Ω—è/–ó–∞–≤—Ç—Ä–∞/–î—Ä—É–≥–∞—è
    kb = types.InlineKeyboardMarkup()
    kb.row(
        types.InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data=mk_cb("pick_date", d="today")),
        types.InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞", callback_data=mk_cb("pick_date", d="tomorrow")),
    )
    kb.add(types.InlineKeyboardButton("üìÖ –î—Ä—É–≥–∞—è –¥–∞—Ç–∞", callback_data=mk_cb("pick_date_other")))
    bot.answer_callback_query(c.id)
    bot.send_message(uid, "–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É:", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: parse_cb(c.data) and parse_cb(c.data).get("a")=="pick_date_other")
def cb_pick_date_other(c):
    uid = c.message.chat.id
    set_state(uid, "add_pick_date")
    bot.answer_callback_query(c.id)
    bot.send_message(uid, "–í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "add_pick_date")
def add_pick_date(m):
    uid = m.chat.id
    ds = m.text.strip()
    try:
        datetime.strptime(ds, "%d.%m.%Y")
    except Exception:
        bot.send_message(uid, "–î–∞—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞. –ù—É–∂–µ–Ω —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì.", reply_markup=main_menu()); clear_state(uid); return
    d = get_data(uid); d["date"] = ds; set_state(uid, "add_title", d)
    # 4) –í—Ä–µ–º—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    bot.send_message(uid, "–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –¥–µ–¥–ª–∞–π–Ω–∞ (–ß–ß:–ú–ú) –∏–ª–∏ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.")
    set_state(uid, "add_pick_time")

@bot.callback_query_handler(func=lambda c: parse_cb(c.data) and parse_cb(c.data).get("a")=="pick_date")
def cb_pick_date(c):
    uid = c.message.chat.id
    data = parse_cb(c.data)
    when = data.get("d")
    ds = today_str() if when=="today" else today_str(now_local()+timedelta(days=1))
    d = get_data(uid); d["date"] = ds; set_state(uid, "add_title", d)
    bot.answer_callback_query(c.id)
    bot.send_message(uid, "–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –¥–µ–¥–ª–∞–π–Ω–∞ (–ß–ß:–ú–ú) –∏–ª–∏ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.")
    set_state(uid, "add_pick_time")

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "add_pick_time")
def add_pick_time(m):
    uid = m.chat.id
    t = m.text.strip()
    if t != "-" and not re.fullmatch(r"\d{1,2}:\d{2}", t):
        bot.send_message(uid, "–ù—É–∂–µ–Ω —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú –∏–ª–∏ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.", reply_markup=main_menu()); clear_state(uid); return
    d = get_data(uid)
    d["deadline"] = "" if t == "-" else t
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ª–∏—Å—Ç (–∫–∞—Ç–µ–≥–æ—Ä–∏—è = –ª–∏—Å—Ç)
    cat = d["category"]; ws = WS_NAMES.get(cat)
    title = d["title"]; sub = d.get("subcategory","")
    date_s = d["date"]; deadline = d.get("deadline","")
    add_task_to_ws(ws, date_s, cat, sub, title, deadline, uid, status="", repeat="", source="btn:add")
    clear_state(uid)
    bot.send_message(uid, f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {cat}/{sub or '‚Äî'} ‚Äî {title} –Ω–∞ {date_s} (–¥–æ {deadline or '‚Äî'})", reply_markup=main_menu())

# === –ü–æ–∏—Å–∫ / –í—ã–ø–æ–ª–Ω–∏—Ç—å ===
@bot.message_handler(func=lambda msg: msg.text == "üîé –ù–∞–π—Ç–∏")
def handle_search(m):
    uid = m.chat.id
    set_state(uid, "search_text")
    bot.send_message(uid, "–ß—Ç–æ –∏—â–µ–º? –í–≤–µ–¥–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è/–∫–∞—Ç–µ–≥–æ—Ä–∏–∏/–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏/–¥–∞—Ç—ã.")

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "search_text")
def search_text(m):
    uid = m.chat.id
    q = m.text.strip().lower()
    found = []
    for name in CATEGORY_SHEETS:
        ws = WS_NAMES[name]
        rows = row_to_dict_list(ws)
        for r in rows:
            if str(r.get("User ID")) != str(uid): continue
            hay = " ".join([str(r.get(k,"")) for k in TASKS_HEADERS]).lower()
            if q in hay:
                tid = sha_task_id(str(r.get("User ID")), r.get("–î–∞—Ç–∞",""), r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ó–∞–¥–∞—á–∞",""), r.get("–î–µ–¥–ª–∞–π–Ω",""))
                r["_ws_name"] = name
                found.append((build_task_line(r), tid, name))
    if not found:
        bot.send_message(uid, "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=main_menu()); clear_state(uid); return
    items = [(t, tid) for (t, tid, _) in found]
    total_pages = (len(items)+PAGE_SIZE-1)//PAGE_SIZE
    page = 1
    slice_items = items[(page-1)*PAGE_SIZE:page*PAGE_SIZE]
    kb = page_buttons(slice_items, page, total_pages, prefix_action="open")
    bot.send_message(uid, "–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:", reply_markup=kb)
    clear_state(uid)

@bot.message_handler(func=lambda msg: msg.text == "‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å")
def handle_done_menu(m):
    uid = m.chat.id
    set_state(uid, "done_text")
    bot.send_message(uid, "–ù–∞–ø–∏—à–∏, —á—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–∑–∞–∫—Ä—ã–ª –∑–∞–∫–∞–∑ –ö-–≠–∫—Å–ø—Ä–æ –¶–µ–Ω—Ç—Ä¬ª).")

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "done_text")
def done_text(m):
    uid = m.chat.id
    txt = m.text.strip().lower()
    supplier = guess_supplier(txt)
    date_s = today_str()
    changed = 0
    last_closed = None
    last_ws = None
    for name in CATEGORY_SHEETS:
        ws = WS_NAMES[name]
        rows = row_to_dict_list(ws)
        for r in rows:
            if r.get("–î–∞—Ç–∞") != date_s: continue
            if r.get("–°—Ç–∞—Ç—É—Å","").lower() == "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ": continue
            if str(r.get("User ID")) != str(uid): continue
            t = (r.get("–ó–∞–¥–∞—á–∞","") or "").lower()
            if supplier and supplier.lower() not in t and "–∑–∞–∫–∞–∑" not in t:
                continue
            if not supplier and not any(w in t for w in ["–∑–∞–∫–∞–∑","—Å–¥–µ–ª–∞–ª","–∑–∞–∫—Ä—ã–ª"]):
                continue
            tid = sha_task_id(str(r.get("User ID")), r.get("–î–∞—Ç–∞",""), r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ó–∞–¥–∞—á–∞",""), r.get("–î–µ–¥–ª–∞–π–Ω",""))
            ok, _ = mark_done_by_id(ws, tid, uid)
            if ok:
                changed += 1
                last_closed = r
                last_ws = ws
    msg = f"‚úÖ –û—Ç–º–µ—á–µ–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º: {changed}."
    if changed and last_closed and supplier:
        created = plan_next_by_supplier_rule(uid, supplier, last_closed.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è","–ö–æ—Ñ–µ–π–Ω—è"), last_closed.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), last_closed.get("–ó–∞–¥–∞—á–∞",""))
        if created:
            msg += "\nüîÆ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: " + ", ".join([f"–ø—Ä–∏–µ–º–∫–∞ {d1.strftime('%d.%m')} ‚Üí –∑–∞–∫–∞–∑ {d2.strftime('%d.%m')}" for d1,d2 in created])
    bot.send_message(uid, msg, reply_markup=main_menu())
    clear_state(uid)

# === –ü–æ—Å—Ç–∞–≤–∫–∏ ===
@bot.message_handler(func=lambda msg: msg.text == "üöö –ü–æ—Å—Ç–∞–≤–∫–∞")
def handle_supply(m):
    bot.send_message(m.chat.id, "–ú–µ–Ω—é –ø–æ—Å—Ç–∞–≤–æ–∫:", reply_markup=supply_menu())

@bot.message_handler(func=lambda msg: msg.text == "üÜï –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")
def handle_add_supplier(m):
    uid = m.chat.id
    set_state(uid, "add_supplier")
    bot.send_message(uid, "–§–æ—Ä–º–∞—Ç: <b>–ù–∞–∑–≤–∞–Ω–∏–µ; –ü—Ä–∞–≤–∏–ª–æ; –î–µ–¥–ª–∞–π–Ω(optional)</b>\n–ü—Ä–∏–º–µ—Ä—ã:\n–ö-–≠–∫—Å–ø—Ä–æ; –∫–∞–∂–¥—ã–µ 2 –¥–Ω—è; 14:00\n–ò–ü –í—ã–ª–µ–≥–∂–∞–Ω–∏–Ω–∞; shelf 72h; 14:00")

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "add_supplier")
def add_supplier_text(m):
    uid = m.chat.id
    txt = m.text.strip()
    try:
        parts = [p.strip() for p in txt.split(";")]
        name = parts[0]
        rule = parts[1] if len(parts) > 1 else ""
        deadline = parts[2] if len(parts) > 2 else "14:00"
        WS_NAMES["–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏"].append_row([name, rule, deadline], value_input_option="USER_ENTERED")
        load_supplier_rules_from_sheet()
        bot.send_message(uid, f"‚úÖ –ü–æ—Å—Ç–∞–≤—â–∏–∫ ¬´{name}¬ª –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=supply_menu())
    except Exception as e:
        log.error("add_supplier error: %s", e)
        bot.send_message(uid, "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞.", reply_markup=supply_menu())
    finally:
        clear_state(uid)

@bot.message_handler(func=lambda msg: msg.text == "üì¶ –ó–∞–∫–∞–∑—ã —Å–µ–≥–æ–¥–Ω—è")
def handle_today_orders(m):
    uid = m.chat.id
    date_s = today_str()
    orders = []
    for name in CATEGORY_SHEETS:
        ws = WS_NAMES[name]
        rows = row_to_dict_list(ws)
        for r in rows:
            if str(r.get("User ID")) == str(uid) and r.get("–î–∞—Ç–∞") == date_s and is_order_task(r.get("–ó–∞–¥–∞—á–∞","")):
                r["_ws_name"] = name
                orders.append(r)
    if not orders:
        bot.send_message(uid, "–°–µ–≥–æ–¥–Ω—è –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç.", reply_markup=supply_menu()); return
    kb = types.InlineKeyboardMarkup()
    for i,r in enumerate(orders, start=1):
        tid = sha_task_id(str(r.get("User ID")), r.get("–î–∞—Ç–∞",""), r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ó–∞–¥–∞—á–∞",""), r.get("–î–µ–¥–ª–∞–π–Ω",""))
        kb.add(types.InlineKeyboardButton(build_task_line(r, i), callback_data=mk_cb("open", id=tid)))
    bot.send_message(uid, "–ó–∞–∫–∞–∑—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:", reply_markup=kb)

# === –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç ===
@bot.message_handler(func=lambda msg: msg.text == "üß† –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç")
def handle_ai(m):
    uid = m.chat.id
    set_state(uid, "assistant_text")
    bot.send_message(uid, "–ß—Ç–æ –Ω—É–∂–Ω–æ? (—Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–µ–Ω—å, –≤—ã–¥–µ–ª–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã, —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ —Ç.–¥.)")

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "assistant_text")
def assistant_text(m):
    uid = m.chat.id
    answer = ai_assist_answer(m.text.strip(), uid)
    bot.send_message(uid, f"üß† {answer}", reply_markup=main_menu())
    clear_state(uid)

@bot.message_handler(func=lambda msg: msg.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
def handle_settings(m):
    bot.send_message(m.chat.id, f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: <b>{TZ_NAME}</b>\n–£—Ç—Ä–µ–Ω–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç: <b>08:00</b>", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "‚¨Ö –ù–∞–∑–∞–¥")
def handle_back(m):
    clear_state(m.chat.id)
    bot.send_message(m.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

# ========= –ö–ê–†–¢–û–ß–ö–ê / INLINE =========
def render_task_card(uid, task_id):
    # –ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –∑–∞–¥–∞—á—É –∏ –ª–∏—Å—Ç
    for name in CATEGORY_SHEETS:
        ws = WS_NAMES[name]
        rows = row_to_dict_list(ws)
        idx = find_row_index_by_id(ws, task_id, rows)
        if idx:
            r = rows[idx-2]
            date_s = r.get("–î–∞—Ç–∞","")
            header = (
                f"<b>{r.get('–ó–∞–¥–∞—á–∞','')}</b>\n"
                f"üìÖ {weekday_ru(datetime.strptime(date_s,'%d.%m.%Y'))} ‚Äî {date_s}\n"
                f"üìÅ {r.get('–ö–∞—Ç–µ–≥–æ—Ä–∏—è','‚Äî')} / {r.get('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è','‚Äî')}\n"
                f"‚è∞ –î–µ–¥–ª–∞–π–Ω: {r.get('–î–µ–¥–ª–∞–π–Ω') or '‚Äî'}\n"
                f"üìù –°—Ç–∞—Ç—É—Å: {r.get('–°—Ç–∞—Ç—É—Å') or '‚Äî'}"
            )
            kb = types.InlineKeyboardMarkup()
            kb.add(types.InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å", callback_data=mk_cb("done", id=task_id, ws=name)))
            if is_order_task(r.get("–ó–∞–¥–∞—á–∞","")):
                kb.add(types.InlineKeyboardButton("üöö –ü—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É", callback_data=mk_cb("accept_delivery", id=task_id, ws=name)))
            kb.add(types.InlineKeyboardButton("‚ûï –ü–æ–¥–∑–∞–¥–∞—á–∞", callback_data=mk_cb("add_sub", id=task_id, ws=name)))
            kb.add(types.InlineKeyboardButton("‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data=mk_cb("remind_set", id=task_id, ws=name)))
            kb.add(types.InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data=mk_cb("close_card")))
            return header, kb
    return "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", None

@bot.callback_query_handler(func=lambda c: True)
def callbacks(c):
    uid = c.message.chat.id
    data = parse_cb(c.data) if c.data and c.data != "noop" else None
    if not data:
        bot.answer_callback_query(c.id); return
    a = data.get("a")

    if a == "page":
        date_s = today_str()
        rows = get_all_user_tasks_for_date(uid, date_s)
        items = []
        for r in rows:
            tid = sha_task_id(str(r.get("User ID")), r.get("–î–∞—Ç–∞",""), r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ó–∞–¥–∞—á–∞",""), r.get("–î–µ–¥–ª–∞–π–Ω",""))
            items.append((build_task_line(r), tid))
        total_pages = (len(items)+PAGE_SIZE-1)//PAGE_SIZE
        page = max(1, min(int(data.get("p", 1)), total_pages))
        slice_items = items[(page-1)*PAGE_SIZE:page*PAGE_SIZE]
        kb = page_buttons(slice_items, page, total_pages, prefix_action="open")
        try:
            bot.edit_message_reply_markup(uid, c.message.message_id, reply_markup=kb)
        except Exception:
            pass
        bot.answer_callback_query(c.id); return

    if a == "open":
        task_id = data.get("id")
        text, kb = render_task_card(uid, task_id)
        bot.answer_callback_query(c.id)
        if kb: bot.send_message(uid, text, reply_markup=kb)
        else:  bot.send_message(uid, text)
        return

    if a == "close_card":
        bot.answer_callback_query(c.id, "–ó–∞–∫—Ä—ã—Ç–æ")
        try: bot.delete_message(uid, c.message.message_id)
        except Exception: pass
        return

    if a == "done":
        task_id = data.get("id")
        ws_name = data.get("ws")
        ws = WS_NAMES.get(ws_name)
        ok, r = mark_done_by_id(ws, task_id, uid)
        if not ok:
            bot.answer_callback_query(c.id, "–ù–µ —Å–º–æ–≥ –æ—Ç–º–µ—Ç–∏—Ç—å", show_alert=True); return
        supplier = guess_supplier(r.get("–ó–∞–¥–∞—á–∞",""))
        msg = "‚úÖ –ì–æ—Ç–æ–≤–æ."
        if supplier:
            created = plan_next_by_supplier_rule(uid, supplier, r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è","–ö–æ—Ñ–µ–π–Ω—è"), r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ó–∞–¥–∞—á–∞",""))
            if created:
                msg += " –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∏–µ–º–∫–∞/—Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑."
        bot.answer_callback_query(c.id, msg, show_alert=True)
        text, kb = render_task_card(uid, task_id)
        if kb: bot.edit_message_text(text, uid, c.message.message_id, reply_markup=kb)
        else:  bot.edit_message_text(text, uid, c.message.message_id)
        return

    if a == "accept_delivery":
        task_id = data.get("id"); ws_name = data.get("ws")
        kb = types.InlineKeyboardMarkup()
        kb.row(
            types.InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data=mk_cb("accept_delivery_date", id=task_id, ws=ws_name, d="today")),
            types.InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞",  callback_data=mk_cb("accept_delivery_date", id=task_id, ws=ws_name, d="tomorrow")),
        )
        kb.add(types.InlineKeyboardButton("üìÖ –î—Ä—É–≥–∞—è –¥–∞—Ç–∞", callback_data=mk_cb("accept_delivery_pick", id=task_id, ws=ws_name)))
        bot.answer_callback_query(c.id)
        bot.send_message(uid, "–ö–æ–≥–¥–∞ –ø—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É?", reply_markup=kb)
        return

    if a == "accept_delivery_pick":
        task_id = data.get("id"); ws_name = data.get("ws")
        set_state(uid, "pick_delivery_date", {"task_id": task_id, "ws": ws_name})
        bot.answer_callback_query(c.id)
        bot.send_message(uid, "–í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return

    if a == "accept_delivery_date":
        task_id = data.get("id"); ws_name = data.get("ws")
        when = data.get("d")
        ws = WS_NAMES.get(ws_name)
        rows = row_to_dict_list(ws)
        idx = find_row_index_by_id(ws, task_id, rows)
        if not idx:
            bot.answer_callback_query(c.id, "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True); return
        r = rows[idx-2]
        date_s = today_str() if when=="today" else today_str(now_local()+timedelta(days=1))
        supplier = guess_supplier(r.get("–ó–∞–¥–∞—á–∞","")) or "–ü–æ—Å—Ç–∞–≤–∫–∞"
        add_task_to_ws(ws, date_s, r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""),
                       f"üöö –ü—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É {supplier} ({normalize_tt_from_subcat(r.get('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è','')) or '‚Äî'})",
                       "10:00", uid, status="", repeat="", source=f"subtask:{task_id}")
        bot.answer_callback_query(c.id, f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –Ω–∞ {date_s}", show_alert=True)
        return

    if a == "add_sub":
        task_id = data.get("id"); ws_name = data.get("ws")
        set_state(uid, "add_subtask_text", {"task_id": task_id, "ws": ws_name})
        bot.answer_callback_query(c.id)
        bot.send_message(uid, "–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –ø–æ–¥–∑–∞–¥–∞—á–∏:")
        return

    if a == "remind_set":
        task_id = data.get("id"); ws_name = data.get("ws")
        set_state(uid, "set_reminder", {"task_id": task_id, "ws": ws_name})
        bot.answer_callback_query(c.id)
        bot.send_message(uid, "–ö–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å? –§–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (–ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è).")
        return

# === –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ ===
@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "add_subtask_text")
def add_subtask_text(m):
    uid = m.chat.id
    data = get_data(uid)
    task_id = data.get("task_id"); ws_name = data.get("ws")
    ws = WS_NAMES.get(ws_name)
    text = m.text.strip()
    rows = row_to_dict_list(ws)
    idx = find_row_index_by_id(ws, task_id, rows)
    if not idx:
        bot.send_message(uid, "–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_menu()); clear_state(uid); return
    parent = rows[idx-2]
    add_task_to_ws(ws, parent.get("–î–∞—Ç–∞",""), parent.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""), parent.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""),
                   f"‚Ä¢ {text}", parent.get("–î–µ–¥–ª–∞–π–Ω",""), uid, status="", repeat="", source=f"subtask:{task_id}")
    bot.send_message(uid, "–ü–æ–¥–∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.", reply_markup=main_menu())
    clear_state(uid)

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "pick_delivery_date")
def pick_delivery_date(m):
    uid = m.chat.id
    data = get_data(uid)
    task_id = data.get("task_id"); ws_name = data.get("ws")
    ws = WS_NAMES.get(ws_name)
    ds = m.text.strip()
    try:
        datetime.strptime(ds, "%d.%m.%Y")
    except Exception:
        bot.send_message(uid, "–î–∞—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞. –ù—É–∂–µ–Ω —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì.", reply_markup=main_menu()); clear_state(uid); return
    rows = row_to_dict_list(ws)
    idx = find_row_index_by_id(ws, task_id, rows)
    if not idx:
        bot.send_message(uid, "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_menu()); clear_state(uid); return
    r = rows[idx-2]
    supplier = guess_supplier(r.get("–ó–∞–¥–∞—á–∞","")) or "–ü–æ—Å—Ç–∞–≤–∫–∞"
    add_task_to_ws(ws, ds, r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""),
                   f"üöö –ü—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É {supplier} ({normalize_tt_from_subcat(r.get('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è','')) or '‚Äî'})",
                   "10:00", uid, status="", repeat="", source=f"subtask:{task_id}")
    bot.send_message(uid, f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –Ω–∞ {ds}.", reply_markup=main_menu())
    clear_state(uid)

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "set_reminder")
def set_reminder(m):
    uid = m.chat.id
    data = get_data(uid)
    task_id = data.get("task_id"); ws_name = data.get("ws")
    ws = WS_NAMES.get(ws_name)
    t = m.text.strip()
    if not re.fullmatch(r"\d{1,2}:\d{2}", t):
        bot.send_message(uid, "–ù—É–∂–µ–Ω —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú.", reply_markup=main_menu()); clear_state(uid); return
    rows = row_to_dict_list(ws)
    idx = find_row_index_by_id(ws, task_id, rows)
    if not idx:
        bot.send_message(uid, "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_menu()); clear_state(uid); return
    cur_source = rows[idx-2].get("–ò—Å—Ç–æ—á–Ω–∏–∫","") or ""
    new_source = (cur_source + "; " if cur_source else "") + f"remind:{t}"
    ws.update_cell(idx, TASKS_HEADERS.index("–ò—Å—Ç–æ—á–Ω–∏–∫")+1, new_source)
    bot.send_message(uid, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {t}.", reply_markup=main_menu())
    clear_state(uid)

# ========= –ï–ñ–ï–î–ù–ï–í–ù–´–ô –î–ê–ô–î–ñ–ï–°–¢ –ò –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø =========
NOTIFIED = set()  # taskId|date|time

def job_daily_digest():
    try:
        users = row_to_dict_list(ws_users)
        today = today_str()
        for u in users:
            uid = str(u.get("Telegram ID") or "").strip()
            if not uid: continue
            tasks = get_all_user_tasks_for_date(uid, today)
            if not tasks: continue
            text = f"üìÖ –ü–ª–∞–Ω –Ω–∞ {today}\n\n" + format_grouped(tasks, header_date=today)
            try:
                bot.send_message(uid, text)
            except Exception as e:
                log.error("send digest error %s", e)
    except Exception as e:
        log.error("job_daily_digest error %s", e)

def job_reminders():
    try:
        today = today_str()
        for name in CATEGORY_SHEETS:
            ws = WS_NAMES[name]
            rows = row_to_dict_list(ws)
            for r in rows:
                if r.get("–î–∞—Ç–∞") != today: continue
                src = (r.get("–ò—Å—Ç–æ—á–Ω–∏–∫") or "")
                if "remind:" not in src: continue
                matches = re.findall(r"remind:(\d{1,2}:\d{2})", src)
                for tm in matches:
                    key = sha_task_id(str(r.get("User ID")), r.get("–î–∞—Ç–∞",""), r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ó–∞–¥–∞—á–∞",""), r.get("–î–µ–¥–ª–∞–π–Ω","")) + "|" + today + "|" + tm
                    if key in NOTIFIED: continue
                    try:
                        hh, mm = map(int, tm.split(":"))
                        nowt = now_local().time()
                        if (nowt.hour, nowt.minute) >= (hh, mm):
                            bot.send_message(r.get("User ID"), f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {r.get('–ö–∞—Ç–µ–≥–æ—Ä–∏—è','')}/{r.get('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è','')} ‚Äî {r.get('–ó–∞–¥–∞—á–∞','')} (–¥–æ {r.get('–î–µ–¥–ª–∞–π–Ω') or '‚Äî'})")
                            NOTIFIED.add(key)
                    except Exception:
                        pass
    except Exception as e:
        log.error("job_reminders error %s", e)

def scheduler_thread():
    schedule.clear()
    schedule.every().day.at("08:00").do(job_daily_digest)   # —Ç–≤–æ–π —É—Ç—Ä–µ–Ω–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç
    schedule.every(1).minutes.do(job_reminders)             # –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    while True:
        schedule.run_pending()
        time.sleep(1)

# ========= FLASK / WEBHOOK =========
app = Flask(__name__)

@app.route("/" + API_TOKEN, methods=["POST"])
def webhook():
    try:
        update = request.get_data().decode("utf-8")
        upd = types.Update.de_json(update)
        bot.process_new_updates([upd])
    except Exception as e:
        log.error("Webhook error: %s", e)
    return "OK", 200

@app.route("/")
def home():
    return "Bot is running!"

# ========= START =========
if __name__ == "__main__":
    if not API_TOKEN or not WEBHOOK_URL:
        raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω—ã TELEGRAM_TOKEN –∏–ª–∏ WEBHOOK_BASE")

    try:
        bot.remove_webhook()
    except Exception:
        pass
    time.sleep(0.5)
    bot.set_webhook(url=WEBHOOK_URL)

    threading.Thread(target=scheduler_thread, daemon=True).start()
    app.run(host="0.0.0.0", port=int(os.getenv("PORT","5000")))
