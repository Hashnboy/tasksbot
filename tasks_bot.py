import telebot
import gspread
import schedule
import time
import threading
from datetime import datetime, timedelta
from flask import Flask
from telebot import types

# ====== –ù–ê–°–¢–†–û–ô–ö–ò ======
API_TOKEN = "7959600917:AAF7szpbvX8CoFObxjVb6y3aCiSceCi-Rt4"
TABLE_URL = "https://docs.google.com/spreadsheets/d/1lIV2kUx8sDHR1ynMB2di8j5n9rpj1ydhsmfjXJpRGeA/edit?usp=sharing"
CREDENTIALS_FILE = "/etc/secrets/credentials.json"

bot = telebot.TeleBot(API_TOKEN)
bot.remove_webhook()  # —É–±–∏—Ä–∞–µ–º webhook, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ 409

# ====== –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö GOOGLE SHEETS ======
gc = gspread.service_account(filename=CREDENTIALS_FILE)
sh = gc.open_by_url(TABLE_URL)

tasks_ws = sh.worksheet("–ó–∞–¥–∞—á–∏")
users_ws = sh.worksheet("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
repeat_ws = sh.worksheet("–ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–∞–¥–∞—á–∏")

# ====== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï ======
def get_users():
    users = []
    for row in users_ws.get_all_records():
        if row.get("Telegram ID"):
            cats = [c.strip() for c in (row.get("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–¥–∞—á") or "").split(",") if c.strip()]
            users.append({
                "name": row.get("–ò–º—è", ""),
                "id": str(row.get("Telegram ID")),
                "categories": cats
            })
    return users

def get_tasks_for_date(user_id, date_str):
    tasks = []
    user_info = next((u for u in get_users() if u["id"] == str(user_id)), None)
    for row in tasks_ws.get_all_records():
        if row.get("–î–∞—Ç–∞") == date_str and str(row.get("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID", "")) == str(user_id):
            if not user_info or not user_info["categories"] or row.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è") in user_info["categories"]:
                tasks.append(row)
    return tasks

def add_task(date, category, subcategory, task, deadline, status="", repeat="", user_id=""):
    tasks_ws.append_row([date, category, subcategory, task, deadline, status, repeat, user_id])

# ====== –û–ë–†–ê–ë–û–¢–ö–ê –ü–û–í–¢–û–†–Ø–Æ–©–ò–•–°–Ø ======
def process_repeating_tasks():
    today_str = datetime.now().strftime("%d.%m.%Y")
    today_rus = {
        "monday": "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "tuesday": "–≤—Ç–æ—Ä–Ω–∏–∫",
        "wednesday": "—Å—Ä–µ–¥–∞",
        "thursday": "—á–µ—Ç–≤–µ—Ä–≥",
        "friday": "–ø—è—Ç–Ω–∏—Ü–∞",
        "saturday": "—Å—É–±–±–æ—Ç–∞",
        "sunday": "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }[datetime.now().strftime("%A").lower()]

    existing = [t.get("–ó–∞–¥–∞—á–∞") for t in tasks_ws.get_all_records() if t.get("–î–∞—Ç–∞") == today_str]
    for row in repeat_ws.get_all_records():
        if (row.get("–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏") or "").strip().lower() == today_rus:
            if row.get("–ó–∞–¥–∞—á–∞") and row.get("–ó–∞–¥–∞—á–∞") not in existing:
                for user in get_users():
                    add_task(today_str, row.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", ""), row.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è", ""),
                             row.get("–ó–∞–¥–∞—á–∞", ""), row.get("–í—Ä–µ–º—è", ""), "", "–ø–æ–≤—Ç–æ—Ä", user["id"])

def schedule_next_repeat_tasks():
    wd = {"–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": 0, "–≤—Ç–æ—Ä–Ω–∏–∫": 1, "—Å—Ä–µ–¥–∞": 2, "—á–µ—Ç–≤–µ—Ä–≥": 3, "–ø—è—Ç–Ω–∏—Ü–∞": 4, "—Å—É–±–±–æ—Ç–∞": 5, "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": 6}
    today = datetime.now()
    for row in repeat_ws.get_all_records():
        d = (row.get("–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏") or "").strip().lower()
        if d not in wd: continue
        days_ahead = (wd[d] - today.weekday() + 7) % 7 or 7
        task_date = (today + timedelta(days=days_ahead)).strftime("%d.%m.%Y")
        existing = [t.get("–ó–∞–¥–∞—á–∞") for t in tasks_ws.get_all_records() if t.get("–î–∞—Ç–∞") == task_date]
        if row.get("–ó–∞–¥–∞—á–∞") and row.get("–ó–∞–¥–∞—á–∞") not in existing:
            for user in get_users():
                add_task(task_date, row.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", ""), row.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è", ""),
                         row.get("–ó–∞–¥–∞—á–∞", ""), row.get("–í—Ä–µ–º—è", ""), "", "–ø–æ–≤—Ç–æ—Ä", user["id"])

# ====== –û–¢–ü–†–ê–í–ö–ê –ü–õ–ê–ù–ê ======
def send_daily_plan():
    process_repeating_tasks()
    schedule_next_repeat_tasks()
    today = datetime.now().strftime("%d.%m.%Y")
    for user in get_users():
        tasks = get_tasks_for_date(user["id"], today)
        if tasks:
            text = f"üìÖ –ü–ª–∞–Ω –Ω–∞ {today}:\n\n"
            for i, t in enumerate(tasks, 1):
                status_icon = "‚úÖ" if (t.get("–°—Ç–∞—Ç—É—Å") or "").lower() == "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ" else "‚¨ú"
                text += f"{status_icon} {i}. [{t.get('–ö–∞—Ç–µ–≥–æ—Ä–∏—è','')} - {t.get('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è','')}] {t.get('–ó–∞–¥–∞—á–∞','')} (–¥–æ {t.get('–î–µ–¥–ª–∞–π–Ω','')})\n"
            bot.send_message(user["id"], text)

# ====== –ö–ù–û–ü–ö–ò ======
@bot.message_handler(commands=["start"])
def start_cmd(message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üìÖ –ú–æ–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", "üìÜ –ó–∞–¥–∞—á–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == "üìÖ –ú–æ–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
def today_tasks(message):
    today = datetime.now().strftime("%d.%m.%Y")
    tasks = get_tasks_for_date(message.chat.id, today)
    if not tasks:
        bot.send_message(message.chat.id, "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞—á –Ω–µ—Ç ‚úÖ")
    else:
        text = f"üìÖ –ü–ª–∞–Ω –Ω–∞ {today}:\n\n"
        for i, t in enumerate(tasks, 1):
            status_icon = "‚úÖ" if (t.get("–°—Ç–∞—Ç—É—Å") or "").lower() == "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ" else "‚¨ú"
            text += f"{status_icon} {i}. [{t.get('–ö–∞—Ç–µ–≥–æ—Ä–∏—è','')} - {t.get('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è','')}] {t.get('–ó–∞–¥–∞—á–∞','')} (–¥–æ {t.get('–î–µ–¥–ª–∞–π–Ω','')})\n"
        bot.send_message(message.chat.id, text)

@bot.message_handler(func=lambda m: m.text == "üìÜ –ó–∞–¥–∞—á–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é")
def week_tasks(message):
    kb = types.InlineKeyboardMarkup()
    today = datetime.now()
    days = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    for i, d in enumerate(days):
        date_str = (today + timedelta(days=(i - today.weekday()) % 7)).strftime("%d.%m.%Y")
        kb.add(types.InlineKeyboardButton(f"{d.capitalize()} ({date_str})", callback_data=f"day_{date_str}"))
    kb.add(types.InlineKeyboardButton("üìÖ –í—Å—è –Ω–µ–¥–µ–ª—è", callback_data="week_all"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:", reply_markup=kb)

@bot.callback_query_handler(func=lambda call: call.data.startswith("day_"))
def show_day_tasks(call):
    date_str = call.data.split("_")[1]
    tasks = get_tasks_for_date(call.message.chat.id, date_str)
    if not tasks:
        bot.send_message(call.message.chat.id, f"–ù–∞ {date_str} –∑–∞–¥–∞—á –Ω–µ—Ç ‚úÖ")
    else:
        text = f"üìÖ –ó–∞–¥–∞—á–∏ –Ω–∞ {date_str}:\n\n"
        for i, t in enumerate(tasks, 1):
            text += f"‚¨ú {i}. [{t.get('–ö–∞—Ç–µ–≥–æ—Ä–∏—è','')} - {t.get('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è','')}] {t.get('–ó–∞–¥–∞—á–∞','')} (–¥–æ {t.get('–î–µ–¥–ª–∞–π–Ω','')})\n"
        bot.send_message(call.message.chat.id, text)

@bot.callback_query_handler(func=lambda call: call.data == "week_all")
def show_week_tasks(call):
    today = datetime.now()
    text = "üìÖ –ó–∞–¥–∞—á–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é:\n\n"
    for i in range(7):
        date_str = (today + timedelta(days=i)).strftime("%d.%m.%Y")
        tasks = get_tasks_for_date(call.message.chat.id, date_str)
        if tasks:
            text += f"\nüóì {date_str}:\n"
            for j, t in enumerate(tasks, 1):
                text += f"‚¨ú {j}. [{t.get('–ö–∞—Ç–µ–≥–æ—Ä–∏—è','')} - {t.get('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è','')}] {t.get('–ó–∞–¥–∞—á–∞','')} (–¥–æ {t.get('–î–µ–¥–ª–∞–π–Ω','')})\n"
    bot.send_message(call.message.chat.id, text)

# ====== –°–¢–ê–†–¢ ======
def run_scheduler():
    schedule.every().day.at("09:00").do(send_daily_plan)
    while True:
        schedule.run_pending()
        time.sleep(1)

app = Flask(__name__)
@app.route("/")
def home():
    return "Bot is running!"

if __name__ == "__main__":
    threading.Thread(target=run_scheduler, daemon=True).start()
    threading.Thread(target=lambda: bot.polling(none_stop=True), daemon=True).start()
    app.run(host="0.0.0.0", port=5000)
