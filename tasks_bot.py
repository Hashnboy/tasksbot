# tasks_bot.py
# -*- coding: utf-8 -*-
import os
import re
import json
import time
import pytz
import hmac
import hashlib
import logging
import schedule
import threading
from datetime import datetime, timedelta

import gspread
from flask import Flask, request
from telebot import TeleBot, types

# ===================== –û–ö–†–£–ñ–ï–ù–ò–ï =====================
API_TOKEN        = os.getenv("TELEGRAM_TOKEN")
TABLE_URL        = os.getenv("GOOGLE_SHEETS_URL")
CREDENTIALS_FILE = os.getenv("GOOGLE_CREDENTIALS_JSON", "/etc/secrets/credentials.json")
WEBHOOK_BASE     = os.getenv("WEBHOOK_BASE")
OPENAI_API_KEY   = os.getenv("OPENAI_API_KEY")
TZ_NAME          = os.getenv("TZ", "Europe/Moscow")
WEBHOOK_URL      = f"{WEBHOOK_BASE}/{API_TOKEN}" if API_TOKEN and WEBHOOK_BASE else None
LOCAL_TZ         = pytz.timezone(TZ_NAME)

logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
log = logging.getLogger("tasksbot")

REQUIRED_ENVS = ["TELEGRAM_TOKEN", "GOOGLE_SHEETS_URL", "WEBHOOK_BASE"]
missing = [v for v in REQUIRED_ENVS if not os.getenv(v)]
if missing:
    log.warning("–ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: %s", ", ".join(missing))

# ===================== –ë–û–¢ / SHEETS =====================
bot = TeleBot(API_TOKEN, parse_mode="HTML")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ª–∏—Å—Ç–∞–º. –ù–ò–ß–ï–ì–û –ù–ï –°–û–ó–î–ê–Å–ú.
def must_get_ws(sh, title):
    try:
        return sh.worksheet(title)
    except Exception:
        log.error("–ù–µ –Ω–∞–π–¥–µ–Ω –ª–∏—Å—Ç: %s (—Å–æ–∑–¥–∞–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ù–ï –±—É–¥–µ–º)", title)
        raise

try:
    gc = gspread.service_account(filename=CREDENTIALS_FILE)
    sh = gc.open_by_url(TABLE_URL)

    # –ü—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ –ª–∏—Å—Ç—ã –∑–∞–¥–∞—á
    WS_TITLES = ["–ö–æ—Ñ–µ–π–Ω—è", "–¢–∞–±–∞—á–∫–∞", "–õ–∏—á–Ω–æ–µ", "WB"]
    WS_MAP = {t: must_get_ws(sh, t) for t in WS_TITLES}

    # –°–ª—É–∂–µ–±–Ω—ã–µ
    ws_suppliers = must_get_ws(sh, "–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏")
    ws_users     = must_get_ws(sh, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
    ws_logs      = must_get_ws(sh, "–õ–æ–≥–∏")
    log.info("Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω—ã.")
except Exception as e:
    log.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets", exc_info=True)
    raise

TASK_HEADERS = ["–î–∞—Ç–∞","–ö–∞—Ç–µ–≥–æ—Ä–∏—è","–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è","–ó–∞–¥–∞—á–∞","–î–µ–¥–ª–∞–π–Ω","User ID","–°—Ç–∞—Ç—É—Å","–ü–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å","–ò—Å—Ç–æ—á–Ω–∏–∫"]
PAGE_SIZE = 7

# ===================== –£–¢–ò–õ–ò–¢–´ =====================
def now_local():
    return datetime.now(LOCAL_TZ)

def today_str(dt=None):
    if dt is None: dt = now_local()
    return dt.strftime("%d.%m.%Y")

def weekday_ru(dt: datetime) -> str:
    names = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫","–í—Ç–æ—Ä–Ω–∏–∫","–°—Ä–µ–¥–∞","–ß–µ—Ç–≤–µ—Ä–≥","–ü—è—Ç–Ω–∏—Ü–∞","–°—É–±–±–æ—Ç–∞","–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    return names[dt.weekday()]

def row_to_dict_list(ws):
    return ws.get_all_records()

def log_event(user_id, action, payload=""):
    try:
        ws_logs.append_row([datetime.utcnow().isoformat(), str(user_id), action, payload], value_input_option="USER_ENTERED")
    except Exception:
        pass

def sha_task_id(user_id, date_s, cat, subcat, text, deadline):
    key = f"{user_id}|{date_s}|{cat}|{subcat}|{text}|{deadline}"
    return hashlib.sha1(key.encode("utf-8")).hexdigest()[:16]

def find_row_index_by_id(ws, task_id, rows):
    for i, r in enumerate(rows, start=2):
        rid = sha_task_id(str(r.get("User ID","")), r.get("–î–∞—Ç–∞",""), r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ó–∞–¥–∞—á–∞",""), r.get("–î–µ–¥–ª–∞–π–Ω",""))
        if rid == task_id:
            return i
    return None

def category_to_ws(category: str):
    """–í—ã–±–∏—Ä–∞–µ–º –ª–∏—Å—Ç –¥–ª—è –∑–∞–¥–∞—á–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    key = (category or "").strip()
    if key in WS_MAP:
        return WS_MAP[key]
    # –ú—è–≥–∫–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ:
    low = key.lower()
    for name in WS_TITLES:
        if name.lower() == low:
            return WS_MAP[name]
    # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî ¬´–õ–∏—á–Ω–æ–µ¬ª
    return WS_MAP["–õ–∏—á–Ω–æ–µ"]

def all_task_rows_for_user(uid):
    """–°–±–æ—Ä –≤—Å–µ—Ö –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –í–°–ï–• –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤."""
    bundle = []
    for title, ws in WS_MAP.items():
        rows = row_to_dict_list(ws)
        for r in rows:
            if str(r.get("User ID","")) == str(uid):
                bundle.append((title, ws, r))
    return bundle

def add_task(category, date_s, subcategory, text, deadline, user_id, status="", repeat="", source=""):
    ws = category_to_ws(category)
    row = [date_s, category, subcategory, text, deadline, str(user_id), status, repeat, source]
    ws.append_row(row, value_input_option="USER_ENTERED")

def update_cell(ws, row_idx, col_name, value):
    col = TASK_HEADERS.index(col_name) + 1
    ws.update_cell(row_idx, col, value)

def is_order_task(text: str) -> bool:
    t = (text or "").lower()
    return "–∑–∞–∫–∞–∑" in t or "–∑–∞–∫–∞–∑–∞—Ç—å" in t

def guess_supplier(text: str) -> str:
    t = (text or "").lower()
    if "–∫-—ç–∫—Å–ø—Ä–æ" in t or "–∫ —ç–∫—Å–ø—Ä–æ" in t or "k-exp" in t:
        return "–ö-–≠–∫—Å–ø—Ä–æ"
    if "–≤—ã–ª–µ–≥–∂–∞–Ω" in t:
        return "–ò–ü –í—ã–ª–µ–≥–∂–∞–Ω–∏–Ω–∞"
    return ""

def normalize_tt_from_subcat(subcat: str) -> str:
    s = (subcat or "").strip().lower()
    if "—Ü–µ–Ω—Ç—Ä" in s: return "–¶–µ–Ω—Ç—Ä"
    if "–ø–æ–ª–µ—Ç" in s or "–ø–æ–ª—ë—Ç" in s: return "–ü–æ–ª–µ—Ç"
    if "–∫–ª–∏–º–æ–≤" in s: return "–ö–ª–∏–º–æ–≤–æ"
    return subcat or ""

# ===================== –ü–†–ê–í–ò–õ–ê –ü–û–°–¢–ê–í–©–ò–ö–û–í =====================
SUPPLIER_RULES = {}  # name_lower -> rule dict

def load_supplier_rules_from_sheet():
    SUPPLIER_RULES.clear()
    try:
        rows = row_to_dict_list(ws_suppliers)
        for r in rows:
            name = str(r.get("–ü–æ—Å—Ç–∞–≤—â–∏–∫") or r.get("–ù–∞–∑–≤–∞–Ω–∏–µ") or "").strip()
            if not name:
                continue
            name_l = name.lower()
            rule_raw = str(r.get("–ü—Ä–∞–≤–∏–ª–æ") or r.get("Rule") or "").strip().lower()
            deadline = str(r.get("–î–µ–¥–ª–∞–π–Ω–ó–∞–∫–∞–∑–∞") or "14:00").strip()
            d_off_raw = r.get("DeliveryOffsetDays") or r.get("–°–º–µ—â–µ–Ω–∏–µ–ü–æ—Å—Ç–∞–≤–∫–∏–î–Ω–µ–π") or 1
            try:
                d_off = int(d_off_raw)
            except:
                d_off = 1

            rule = None
            if "–∫–∞–∂–¥" in rule_raw:
                # –Ω–∞–ø—Ä. "–∫–∞–∂–¥—ã–µ 2 –¥–Ω—è"
                nums = re.findall(r"\d+", rule_raw)
                n = int(nums[0]) if nums else 2
                rule = {"kind":"cycle_every_n_days","order_every_days":n,"delivery_offset_days":d_off,"order_deadline":deadline,"emoji":"üì¶"}
            elif "shelf" in rule_raw or "storage" in rule_raw or "72" in rule_raw or "—á–∞—Å" in rule_raw:
                nums = re.findall(r"\d+", rule_raw)
                shelf = int(nums[0]) if nums else 72
                rule = {"kind":"delivery_shelf_then_order","delivery_offset_days":d_off,"shelf_hours":shelf,"order_deadline":deadline,"emoji":"ü•ò"}
            else:
                # –¥–µ—Ñ–æ–ª—Ç: –ø–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–≤—Ç—Ä–∞, –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ 2 –¥–Ω—è
                rule = {"kind":"cycle_every_n_days","order_every_days":2,"delivery_offset_days":d_off,"order_deadline":deadline,"emoji":"üì¶"}

            SUPPLIER_RULES[name_l] = rule
    except Exception as e:
        log.warning("–ù–µ —Å–º–æ–≥ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: %s", e)

load_supplier_rules_from_sheet()

def plan_next_by_supplier_rule(user_id, supplier_name, category, subcategory):
    key = (supplier_name or "").strip().lower()
    rule = SUPPLIER_RULES.get(key)
    if not rule:
        return []
    created = []
    today = now_local().date()

    if rule["kind"] == "cycle_every_n_days":
        delivery_day = today + timedelta(days=rule["delivery_offset_days"])
        next_order_day = today + timedelta(days=rule["order_every_days"])
        add_task(category, delivery_day.strftime("%d.%m.%Y"), subcategory,
                 f"{rule.get('emoji','üì¶')} –ü—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É {supplier_name} ({normalize_tt_from_subcat(subcategory) or '‚Äî'})",
                 "10:00", user_id, source=f"auto:delivery:{supplier_name}")
        add_task(category, next_order_day.strftime("%d.%m.%Y"), subcategory,
                 f"{rule.get('emoji','üì¶')} –ó–∞–∫–∞–∑–∞—Ç—å {supplier_name} ({normalize_tt_from_subcat(subcategory) or '‚Äî'})",
                 rule["order_deadline"], user_id, source=f"auto:order:{supplier_name}")
        created.append((delivery_day, next_order_day))
    else:
        delivery_day = today + timedelta(days=rule.get("delivery_offset_days",1))
        next_order_day = delivery_day + timedelta(days=2)  # –ø–æ—Å–ª–µ 72—á
        add_task(category, delivery_day.strftime("%d.%m.%Y"), subcategory,
                 f"{rule.get('emoji','üì¶')} –ü—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É {supplier_name} ({normalize_tt_from_subcat(subcategory) or '‚Äî'})",
                 "11:00", user_id, source=f"auto:delivery:{supplier_name}")
        add_task(category, next_order_day.strftime("%d.%m.%Y"), subcategory,
                 f"{rule.get('emoji','üì¶')} –ó–∞–∫–∞–∑–∞—Ç—å {supplier_name} ({normalize_tt_from_subcat(subcategory) or '‚Äî'})",
                 rule["order_deadline"], user_id, source=f"auto:order:{supplier_name}")
        created.append((delivery_day, next_order_day))
    return created

# ===================== –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï =====================
def format_grouped(tasks, header_date=None):
    if not tasks:
        return "–ó–∞–¥–∞—á –Ω–µ—Ç."
    def k(r):
        dl = r.get("–î–µ–¥–ª–∞–π–Ω") or ""
        try:
            dlk = datetime.strptime(dl, "%H:%M").time()
        except:
            dlk = datetime.min.time()
        return (r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), dlk, r.get("–ó–∞–¥–∞—á–∞",""))
    tasks = sorted(tasks, key=k)
    out = []
    if header_date:
        dt = datetime.strptime(header_date, "%d.%m.%Y")
        out.append(f"‚Ä¢ {weekday_ru(dt)} ‚Äî {header_date}\n")
    cur_cat = cur_sub = None
    for r in tasks:
        cat = r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è","") or "‚Äî"
        sub = r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è","") or "‚Äî"
        txt = r.get("–ó–∞–¥–∞—á–∞","")
        dl  = r.get("–î–µ–¥–ª–∞–π–Ω","")
        st  = (r.get("–°—Ç–∞—Ç—É—Å","") or "").lower()
        rep = (r.get("–ü–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å","") or "").strip()
        icon = "‚úÖ" if st == "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ" else ("üîÅ" if rep else "‚¨ú")
        if cat != cur_cat:
            out.append(f"üìÇ <b>{cat}</b>"); cur_cat = cat; cur_sub = None
        if sub != cur_sub:
            out.append(f"  ‚îî <b>{sub}</b>"); cur_sub = sub
        line = f"    ‚îî {icon} {txt}"
        if dl: line += f"  <i>(–¥–æ {dl})</i>"
        out.append(line)
    return "\n".join(out)

def build_task_line(r, i=None):
    dl = r.get("–î–µ–¥–ª–∞–π–Ω") or "‚Äî"
    prefix = f"{i}. " if i is not None else ""
    return f"{prefix}{r.get('–ö–∞—Ç–µ–≥–æ—Ä–∏—è','‚Äî')}/{r.get('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è','‚Äî')}: {r.get('–ó–∞–¥–∞—á–∞','')[:40]}‚Ä¶ (–¥–æ {dl})"

# ===================== –ü–û–õ–£–ß–ï–ù–ò–ï –ó–ê–î–ê–ß =====================
def get_tasks_by_date(uid, date_s):
    res = []
    for title, ws in WS_MAP.items():
        for r in row_to_dict_list(ws):
            if str(r.get("User ID","")) == str(uid) and r.get("–î–∞—Ç–∞") == date_s:
                res.append(r)
    return res

def get_tasks_between(uid, start_dt, days=7):
    dates = {(start_dt + timedelta(days=i)).strftime("%d.%m.%Y") for i in range(days)}
    res = []
    for title, ws in WS_MAP.items():
        for r in row_to_dict_list(ws):
            if str(r.get("User ID","")) == str(uid) and r.get("–î–∞—Ç–∞") in dates:
                res.append(r)
    return res

# ===================== INLINE –ü–ê–ì–ò–ù–ê–¶–ò–Ø =====================
def mk_cb(action, **kwargs):
    payload = {"a": action, **kwargs}
    s = json.dumps(payload, ensure_ascii=False)
    sig = hmac.new(b"cb-key", s.encode("utf-8"), hashlib.sha1).hexdigest()[:6]
    return f"{sig}|{s}"

def parse_cb(data):
    try:
        sig, s = data.split("|", 1)
        check = hmac.new(b"cb-key", s.encode("utf-8"), hashlib.sha1).hexdigest()[:6]
        if sig != check: return None
        return json.loads(s)
    except Exception:
        return None

def page_buttons(items, page, total_pages, prefix_action):
    kb = types.InlineKeyboardMarkup()
    for it in items:
        kb.add(types.InlineKeyboardButton(it[0], callback_data=mk_cb(prefix_action, id=it[1])))
    nav = []
    if page > 1: nav.append(types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=mk_cb("page", p=page-1, pa=prefix_action)))
    nav.append(types.InlineKeyboardButton(f"{page}/{total_pages}", callback_data="noop"))
    if page < total_pages: nav.append(types.InlineKeyboardButton("‚û°Ô∏è", callback_data=mk_cb("page", p=page+1, pa=prefix_action)))
    if nav: kb.row(*nav)
    return kb

# ===================== –ú–ï–ù–Æ =====================
def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üìÖ –°–µ–≥–æ–¥–Ω—è","üìÜ –ù–µ–¥–µ–ª—è")
    kb.row("‚ûï –î–æ–±–∞–≤–∏—Ç—å","üîé –ù–∞–π—Ç–∏","‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å")
    kb.row("üöö –ü–æ—Å—Ç–∞–≤–∫–∞","üß† –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç","‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    return kb

def supply_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üÜï –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞","üì¶ –ó–∞–∫–∞–∑—ã —Å–µ–≥–æ–¥–Ω—è")
    kb.row("‚¨Ö –ù–∞–∑–∞–¥")
    return kb

# ===================== GPT: –ü–ê–†–°–ò–ù–ì / –ê–°–°–ò–°–¢–ï–ù–¢ =====================
def parse_natural_datetime(text):
    """–ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–∞—Ç—É/–≤—Ä–µ–º—è –∏–∑ —Ç–µ–∫—Å—Ç–∞. –°–Ω–∞—á–∞–ª–∞ GPT, –∑–∞—Ç–µ–º —Ñ–æ–ª–±—ç–∫."""
    d_s, t_s = "", ""
    used_ai = False

    if OPENAI_API_KEY:
        try:
            from openai import OpenAI
            client = OpenAI(api_key=OPENAI_API_KEY)
            sys = ("–¢—ã –∏–∑–≤–ª–µ–∫–∞–µ—à—å –¥–∞—Ç—É/–≤—Ä–µ–º—è –∏–∑ —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. "
                   "–í–µ—Ä–Ω–∏ JSON {date:'–î–î.–ú–ú.–ì–ì–ì–ì'|'', time:'–ß–ß:–ú–ú'|''}. –ù–∏–∫–∞–∫–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π.")
            prompt = f"–¢–µ–∫—Å—Ç: {text}\n–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞/–≤—Ä–µ–º—è: {now_local().strftime('%d.%m.%Y %H:%M')}"
            r = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role":"system","content":sys},{"role":"user","content":prompt}],
                temperature=0.0
            )
            raw = r.choices[0].message.content.strip()
            obj = json.loads(raw)
            d_s = obj.get("date") or ""
            t_s = obj.get("time") or ""
            used_ai = True
        except Exception as e:
            log.warning("parse_natural_datetime AI fail: %s", e)

    if not used_ai:
        low = text.lower()
        mtime = re.search(r"(\d{1,2}:\d{2})", text)
        if mtime: t_s = mtime.group(1)
        if "—Å–µ–≥–æ–¥–Ω—è" in low: d_s = today_str()
        elif "–∑–∞–≤—Ç—Ä–∞" in low: d_s = today_str(now_local()+timedelta(days=1))
        else:
            mdate = re.search(r"(\d{2}\.\d{2}\.\d{4})", text)
            if mdate: d_s = mdate.group(1)
    return d_s, t_s

def ai_parse_to_tasks(text, fallback_user_id):
    items = []
    used_ai = False
    if OPENAI_API_KEY:
        try:
            from openai import OpenAI
            client = OpenAI(api_key=OPENAI_API_KEY)
            sys = (
                "–¢—ã –ø–∞—Ä—Å–µ—Ä –∑–∞–¥–∞—á. –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON-–º–∞—Å—Å–∏–≤. "
                "–≠–ª–µ–º–µ–Ω—Ç—ã: {category:'–ö–æ—Ñ–µ–π–Ω—è|–¢–∞–±–∞—á–∫–∞|–õ–∏—á–Ω–æ–µ|WB', subcategory:'', task:'', date:'–î–î.–ú–ú.–ì–ì–ì–ì'|'', time:'–ß–ß:–ú–ú'|'', repeat:''|–æ–ø–∏—Å–∞–Ω–∏–µ, supplier:''|''}. "
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—é –≤—ã–±–∏—Ä–∞–π –∏–∑ 4 —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö. –ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω ‚Äî '–õ–∏—á–Ω–æ–µ'."
            )
            r = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role":"system","content":sys},{"role":"user","content":text}],
                temperature=0.1
            )
            raw = r.choices[0].message.content.strip()
            parsed = json.loads(raw)
            if isinstance(parsed, dict):
                parsed = [parsed]
            for it in parsed:
                items.append({
                    "category": it.get("category") or "–õ–∏—á–Ω–æ–µ",
                    "subcategory": it.get("subcategory") or "",
                    "task": it.get("task") or "",
                    "date": it.get("date") or "",
                    "deadline": it.get("time") or "",
                    "user_id": fallback_user_id,
                    "repeat": it.get("repeat") or "",
                    "supplier": it.get("supplier") or ""
                })
            used_ai = True
        except Exception as e:
            log.error("ai_parse_to_tasks fail: %s", e)

    if not used_ai:
        d_s, t_s = parse_natural_datetime(text)
        # –ø—Ä–∏–º–∏—Ç–∏–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è
        low = text.lower()
        if any(x in low for x in ["–∫–æ—Ñ–µ–π–Ω","–∫-—ç–∫—Å–ø—Ä–æ","–≤—ã–ª–µ–≥–∂–∞–Ω"]):
            cat = "–ö–æ—Ñ–µ–π–Ω—è"
        elif "—Ç–∞–±–∞—á" in low:
            cat = "–¢–∞–±–∞—á–∫–∞"
        elif "wb" in low or "wild" in low:
            cat = "WB"
        else:
            cat = "–õ–∏—á–Ω–æ–µ"
        sub = "–¶–µ–Ω—Ç—Ä" if "—Ü–µ–Ω—Ç—Ä" in low else ("–ü–æ–ª–µ—Ç" if ("–ø–æ–ª–µ—Ç" in low or "–ø–æ–ª—ë—Ç" in low) else "")
        items = [{
            "category": cat, "subcategory": sub, "task": text.strip(),
            "date": d_s or today_str(), "deadline": t_s or "",
            "user_id": fallback_user_id, "repeat":"", "supplier":""
        }]
    return items

def ai_assist_answer(query, user_id):
    try:
        rows = get_tasks_between(user_id, now_local().date(), 14)
        brief = []
        for r in sorted(rows, key=lambda x: (datetime.strptime(x["–î–∞—Ç–∞"], "%d.%m.%Y"), x.get("–î–µ–¥–ª–∞–π–Ω","") or "", x.get("–ó–∞–¥–∞—á–∞","") or "")):
            brief.append(f"{r['–î–∞—Ç–∞']} ‚Ä¢ {r['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']}/{r['–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è'] or '‚Äî'} ‚Äî {r['–ó–∞–¥–∞—á–∞']} (–¥–æ {r['–î–µ–¥–ª–∞–π–Ω'] or '‚Äî'}) [{r.get('–°—Ç–∞—Ç—É—Å','')}]")
        context = "\n".join(brief)[:6000]
        if not OPENAI_API_KEY:
            return "–°–æ–≤–µ—Ç: –Ω–∞—á–Ω–∏ —Å –±–ª–∏–∂–∞–π—à–∏—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤. –°–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Ä–∞–∑–±–µ–π –Ω–∞ –∫–æ—Ä–æ—Ç–∫–∏–µ —à–∞–≥–∏ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º."

        from openai import OpenAI
        client = OpenAI(api_key=OPENAI_API_KEY)
        sys = "–¢—ã —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∑–∞–¥–∞—á–∞–º. –ì–æ–≤–æ—Ä–∏ –∫—Ä–∞—Ç–∫–æ, –ø–æ –¥–µ–ª—É, –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –º–∞—Ä–∫–µ—Ä–∞–º–∏."
        prompt = f"–ó–∞–ø—Ä–æ—Å: {query}\n\n–ú–æ–∏ –∑–∞–¥–∞—á–∏ (14 –¥–Ω–µ–π):\n{context}\n\n–°—Ñ–æ—Ä–º–∏—Ä—É–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –ø–ª–∞–Ω —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–µ–º."
        r = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role":"system","content":sys},{"role":"user","content":prompt}],
            temperature=0.3
        )
        return r.choices[0].message.content.strip()
    except Exception as e:
        log.error("AI assistant error: %s", e)
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."

# ===================== –°–û–°–¢–û–Ø–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø =====================
USER_STATE = {}
USER_DATA  = {}

def set_state(uid, state, data=None):
    USER_STATE[uid] = state
    if data is not None:
        USER_DATA[uid] = data

def get_state(uid): return USER_STATE.get(uid)
def get_data(uid):  return USER_DATA.get(uid, {})
def clear_state(uid):
    USER_STATE.pop(uid, None); USER_DATA.pop(uid, None)

# ===================== –•–ï–ù–î–õ–ï–†–´ –ö–û–ú–ê–ù–î/–ú–ï–ù–Æ =====================
@bot.message_handler(commands=["start"])
def cmd_start(m):
    bot.send_message(m.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤. –í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "üìÖ –°–µ–≥–æ–¥–Ω—è")
def handle_today(m):
    uid = m.chat.id
    date_s = today_str()
    rows = get_tasks_by_date(uid, date_s)
    items = []
    for r in rows:
        tid = sha_task_id(str(r.get("User ID")), r.get("–î–∞—Ç–∞",""), r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ó–∞–¥–∞—á–∞",""), r.get("–î–µ–¥–ª–∞–π–Ω",""))
        items.append((build_task_line(r), tid, r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è","–õ–∏—á–Ω–æ–µ")))
    if not items:
        bot.send_message(uid, f"üìÖ –ó–∞–¥–∞—á–∏ –Ω–∞ {date_s}\n\n–ó–∞–¥–∞—á –Ω–µ—Ç.", reply_markup=main_menu()); return

    # –ø–∞–≥–∏–Ω–∞—Ü–∏—è
    page = 1
    total_pages = (len(items)+PAGE_SIZE-1)//PAGE_SIZE
    slice_items = items[(page-1)*PAGE_SIZE:page*PAGE_SIZE]
    kb = types.InlineKeyboardMarkup()
    for text, tid, _ in slice_items:
        kb.add(types.InlineKeyboardButton(text, callback_data=mk_cb("open", id=tid)))
    # –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    nav = []
    if page > 1: nav.append(types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=mk_cb("page", p=page-1, pa="open")))
    nav.append(types.InlineKeyboardButton(f"{page}/{total_pages}", callback_data="noop"))
    if page < total_pages: nav.append(types.InlineKeyboardButton("‚û°Ô∏è", callback_data=mk_cb("page", p=page+1, pa="open")))
    if nav: kb.row(*nav)

    header = f"üìÖ –ó–∞–¥–∞—á–∏ –Ω–∞ {date_s}\n\n" + format_grouped(rows, header_date=date_s)
    bot.send_message(uid, header, reply_markup=kb)

@bot.message_handler(func=lambda msg: msg.text == "üìÜ –ù–µ–¥–µ–ª—è")
def handle_week(m):
    uid = m.chat.id
    tasks = get_tasks_between(uid, now_local().date(), 7)
    if not tasks:
        bot.send_message(uid, "–ù–∞ –Ω–µ–¥–µ–ª—é –∑–∞–¥–∞—á –Ω–µ—Ç.", reply_markup=main_menu()); return
    by_day = {}
    for r in tasks:
        by_day.setdefault(r["–î–∞—Ç–∞"], []).append(r)
    parts = []
    for d in sorted(by_day.keys(), key=lambda s: datetime.strptime(s, "%d.%m.%Y")):
        parts.append(format_grouped(by_day[d], header_date=d))
        parts.append("")
    bot.send_message(uid, "\n".join(parts), reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å")
def handle_add(m):
    uid = m.chat.id
    set_state(uid, "add_name")
    bot.send_message(uid, "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–±–µ–∑ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏).")

@bot.message_handler(func=lambda msg: msg.text == "üîé –ù–∞–π—Ç–∏")
def handle_search(m):
    uid = m.chat.id
    set_state(uid, "search_text")
    bot.send_message(uid, "–ß—Ç–æ –∏—â–µ–º? –í–≤–µ–¥–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è/–∫–∞—Ç–µ–≥–æ—Ä–∏–∏/–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏/–¥–∞—Ç—ã.")

@bot.message_handler(func=lambda msg: msg.text == "‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å")
def handle_done_menu(m):
    uid = m.chat.id
    set_state(uid, "done_text")
    bot.send_message(uid, "–û–ø–∏—à–∏, —á—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ. –ü—Ä–∏–º–µ—Ä: ¬´—Å–¥–µ–ª–∞–ª –∑–∞–∫–∞–∑ –∫-—ç–∫—Å–ø—Ä–æ —Ü–µ–Ω—Ç—Ä¬ª")

@bot.message_handler(func=lambda msg: msg.text == "üöö –ü–æ—Å—Ç–∞–≤–∫–∞")
def handle_supply(m):
    bot.send_message(m.chat.id, "–ú–µ–Ω—é –ø–æ—Å—Ç–∞–≤–æ–∫:", reply_markup=supply_menu())

@bot.message_handler(func=lambda msg: msg.text == "üÜï –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")
def handle_add_supplier(m):
    uid = m.chat.id
    set_state(uid, "add_supplier")
    bot.send_message(uid, "–í–≤–µ–¥–∏: <b>–ù–∞–∑–≤–∞–Ω–∏–µ; –ü—Ä–∞–≤–∏–ª–æ; –î–µ–¥–ª–∞–π–Ω</b>\n–ù–∞–ø—Ä.: ¬´–ö-–≠–∫—Å–ø—Ä–æ; –∫–∞–∂–¥—ã–µ 2 –¥–Ω—è; 14:00¬ª")

@bot.message_handler(func=lambda msg: msg.text == "üì¶ –ó–∞–∫–∞–∑—ã —Å–µ–≥–æ–¥–Ω—è")
def handle_today_orders(m):
    uid = m.chat.id
    date_s = today_str()
    rows = get_tasks_by_date(uid, date_s)
    orders = [r for r in rows if is_order_task(r.get("–ó–∞–¥–∞—á–∞",""))]
    if not orders:
        bot.send_message(uid, "–°–µ–≥–æ–¥–Ω—è –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç.", reply_markup=supply_menu()); return
    kb = types.InlineKeyboardMarkup()
    for i,r in enumerate(orders, start=1):
        tid = sha_task_id(str(r.get("User ID")), r.get("–î–∞—Ç–∞",""), r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ó–∞–¥–∞—á–∞",""), r.get("–î–µ–¥–ª–∞–π–Ω",""))
        kb.add(types.InlineKeyboardButton(build_task_line(r, i), callback_data=mk_cb("open", id=tid)))
    bot.send_message(uid, "–ó–∞–∫–∞–∑—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:", reply_markup=kb)

@bot.message_handler(func=lambda msg: msg.text == "üß† –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç")
def handle_ai(m):
    uid = m.chat.id
    set_state(uid, "assistant_text")
    bot.send_message(uid, "–ß—Ç–æ –Ω—É–∂–Ω–æ? (—Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å, —Ä–∞—Å—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã, –Ω–∞–π—Ç–∏ —É–∑–∫–∏–µ –º–µ—Å—Ç–∞ –∏ —Ç.–¥.)")

@bot.message_handler(func=lambda msg: msg.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
def handle_settings(m):
    bot.send_message(m.chat.id, f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: <b>{TZ_NAME}</b>\n–£—Ç—Ä–µ–Ω–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç: <b>08:00</b>", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "‚¨Ö –ù–∞–∑–∞–¥")
def handle_back(m):
    clear_state(m.chat.id)
    bot.send_message(m.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

# ===================== –ü–û–®–ê–ì–û–í–û–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï =====================
@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "add_name")
def add_step_name(m):
    uid = m.chat.id
    USER_DATA[uid] = {"task": m.text.strip()}
    set_state(uid, "add_category")
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.row("–ö–æ—Ñ–µ–π–Ω—è","–¢–∞–±–∞—á–∫–∞")
    kb.row("–õ–∏—á–Ω–æ–µ","WB")
    kb.row("‚¨Ö –ù–∞–∑–∞–¥")
    bot.send_message(uid, "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "add_category")
def add_step_category(m):
    uid = m.chat.id
    cat = m.text.strip()
    if cat not in WS_TITLES:
        bot.send_message(uid, "–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        return
    data = get_data(uid)
    data["category"] = cat
    set_state(uid, "add_subcategory", data)
    bot.send_message(uid, "–í–≤–µ–¥–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –¶–µ–Ω—Ç—Ä / –ü–æ–ª–µ—Ç / –∏–ª–∏ –æ—Å—Ç–∞–≤—å –ø—É—Å—Ç–æ).")

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "add_subcategory")
def add_step_subcategory(m):
    uid = m.chat.id
    data = get_data(uid)
    data["subcategory"] = m.text.strip()
    set_state(uid, "add_date", data)
    bot.send_message(uid, "–í–≤–µ–¥–∏ –¥–∞—Ç—É (–Ω–∞–ø—Ä. ¬´—Å–µ–≥–æ–¥–Ω—è¬ª, ¬´–∑–∞–≤—Ç—Ä–∞¬ª, ¬´13.08.2025¬ª). –ú–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏.")

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "add_date")
def add_step_date(m):
    uid = m.chat.id
    data = get_data(uid)
    ds, _ = parse_natural_datetime(m.text.strip())
    if not ds:
        bot.send_message(uid, "–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –¥–∞—Ç—É. –ù–∞–ø–∏—à–∏ ¬´—Å–µ–≥–æ–¥–Ω—è¬ª, ¬´–∑–∞–≤—Ç—Ä–∞¬ª –∏–ª–∏ –î–î.–ú–ú.–ì–ì–ì–ì.")
        return
    data["date"] = ds
    set_state(uid, "add_time", data)
    bot.send_message(uid, "–í—Ä–µ–º—è –¥–µ–¥–ª–∞–π–Ω–∞? (–ß–ß:–ú–ú). –ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏–≤ ¬´-¬ª.")

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "add_time")
def add_step_time(m):
    uid = m.chat.id
    data = get_data(uid)
    t = m.text.strip()
    if t != "-" and not re.fullmatch(r"\d{1,2}:\d{2}", t):
        bot.send_message(uid, "–ù—É–∂–µ–Ω —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú –∏–ª–∏ ¬´-¬ª.")
        return
    data["deadline"] = "" if t == "-" else t
    set_state(uid, "add_repeat", data)
    bot.send_message(uid, "–ü–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å? (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–∫–∞–∂–¥—É—é —Å—Ä–µ–¥—É¬ª, ¬´–∫–∞–∂–¥—ã–µ 2 –¥–Ω—è¬ª). –ú–æ–∂–Ω–æ ¬´-¬ª.")

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "add_repeat")
def add_step_repeat(m):
    uid = m.chat.id
    data = get_data(uid)
    rep = m.text.strip()
    data["repeat"] = "" if rep == "-" else rep
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    add_task(data["category"], data["date"], data["subcategory"], data["task"], data["deadline"], uid, status="", repeat=data["repeat"], source="manual:wizard")
    clear_state(uid)
    bot.send_message(uid, "‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.", reply_markup=main_menu())

# ===================== –¢–ï–ö–°–¢–û–í–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø =====================
@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "search_text")
def search_text(m):
    uid = m.chat.id
    q = m.text.strip().lower()
    found = []
    for title, ws in WS_MAP.items():
        rows = row_to_dict_list(ws)
        for r in rows:
            if str(r.get("User ID","")) != str(uid): continue
            hay = " ".join([str(r.get(k,"")) for k in TASK_HEADERS]).lower()
            if q in hay:
                tid = sha_task_id(str(r.get("User ID")), r.get("–î–∞—Ç–∞",""), r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ó–∞–¥–∞—á–∞",""), r.get("–î–µ–¥–ª–∞–π–Ω",""))
                found.append((build_task_line(r), tid, title, ws, r))
    if not found:
        bot.send_message(uid, "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=main_menu()); clear_state(uid); return
    total_pages = (len(found)+PAGE_SIZE-1)//PAGE_SIZE
    page = 1
    slice_items = found[(page-1)*PAGE_SIZE:page*PAGE_SIZE]
    kb = types.InlineKeyboardMarkup()
    for text, tid, *_ in slice_items:
        kb.add(types.InlineKeyboardButton(text, callback_data=mk_cb("open", id=tid)))
    nav = []
    if page > 1: nav.append(types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=mk_cb("page", p=page-1, pa="open")))
    nav.append(types.InlineKeyboardButton(f"{page}/{total_pages}", callback_data="noop"))
    if page < total_pages: nav.append(types.InlineKeyboardButton("‚û°Ô∏è", callback_data=mk_cb("page", p=page+1, pa="open")))
    if nav: kb.row(*nav)
    bot.send_message(uid, "–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:", reply_markup=kb)
    clear_state(uid)

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "done_text")
def done_text(m):
    uid = m.chat.id
    txt = m.text.strip().lower()
    supplier = guess_supplier(txt)
    today = today_str()
    changed = 0
    last = None
    # –ò—â–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ –≤—Å–µ–º –ª–∏—Å—Ç–∞–º
    for title, ws in WS_MAP.items():
        rows = row_to_dict_list(ws)
        for i, r in enumerate(rows, start=2):
            if str(r.get("User ID","")) != str(uid) or r.get("–î–∞—Ç–∞") != today: continue
            if r.get("–°—Ç–∞—Ç—É—Å","").lower() == "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ": continue
            t = (r.get("–ó–∞–¥–∞—á–∞","") or "").lower()
            if supplier and supplier.lower() not in t: continue
            if not supplier and not any(w in t for w in ["–∑–∞–∫–∞–∑","—Å–¥–µ–ª–∞–ª","–≤—ã–ø–æ–ª"]): continue
            update_cell(ws, i, "–°—Ç–∞—Ç—É—Å", "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
            changed += 1
            last = r
    msg = f"‚úÖ –û—Ç–º–µ—á–µ–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º: {changed}."
    if changed and supplier and last:
        plan_next_by_supplier_rule(uid, supplier, last.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è","–õ–∏—á–Ω–æ–µ"), last.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""))
        msg += " üîÆ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∏–µ–º–∫–∞/—Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑ –ø–æ –ø—Ä–∞–≤–∏–ª—É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞."
    bot.send_message(uid, msg, reply_markup=main_menu())
    clear_state(uid)

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "assistant_text")
def assistant_text(m):
    uid = m.chat.id
    bot.send_message(uid, "üß† " + ai_assist_answer(m.text.strip(), uid), reply_markup=main_menu())
    clear_state(uid)

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "add_supplier")
def add_supplier_text(m):
    uid = m.chat.id
    txt = m.text.strip()
    try:
        parts = [p.strip() for p in txt.split(";")]
        name = parts[0]
        rule = parts[1] if len(parts) > 1 else ""
        deadline = parts[2] if len(parts) > 2 else "14:00"
        ws_suppliers.append_row([name, rule, deadline], value_input_option="USER_ENTERED")
        load_supplier_rules_from_sheet()
        bot.send_message(uid, f"‚úÖ –ü–æ—Å—Ç–∞–≤—â–∏–∫ ¬´{name}¬ª –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=supply_menu())
    except Exception as e:
        log.error("add_supplier error: %s", e)
        bot.send_message(uid, "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞.", reply_markup=supply_menu())
    finally:
        clear_state(uid)

# ===================== –ö–ê–†–¢–û–ß–ö–ò / CALLBACK =====================
def render_task_card(uid, task_id):
    # –∏—â–µ–º –∑–∞–¥–∞—á—É –ø–æ –≤—Å–µ–º –ª–∏—Å—Ç–∞–º
    for title, ws in WS_MAP.items():
        rows = row_to_dict_list(ws)
        idx = find_row_index_by_id(ws, task_id, rows)
        if idx:
            r = rows[idx-2]
            date_s = r.get("–î–∞—Ç–∞","")
            header = (f"<b>{r.get('–ó–∞–¥–∞—á–∞','')}</b>\n"
                      f"üìÖ {weekday_ru(datetime.strptime(date_s,'%d.%m.%Y'))} ‚Äî {date_s}\n"
                      f"üìÅ {r.get('–ö–∞—Ç–µ–≥–æ—Ä–∏—è','‚Äî')} / {r.get('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è','‚Äî')} ({title})\n"
                      f"‚è∞ –î–µ–¥–ª–∞–π–Ω: {r.get('–î–µ–¥–ª–∞–π–Ω') or '‚Äî'}\n"
                      f"üìù –°—Ç–∞—Ç—É—Å: {r.get('–°—Ç–∞—Ç—É—Å') or '‚Äî'}")
            kb = types.InlineKeyboardMarkup()
            kb.add(types.InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å", callback_data=mk_cb("done_card", id=task_id, title=title)))
            if is_order_task(r.get("–ó–∞–¥–∞—á–∞","")):
                kb.add(types.InlineKeyboardButton("üöö –ü—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É", callback_data=mk_cb("accept_delivery", id=task_id, title=title)))
            kb.add(types.InlineKeyboardButton("‚ûï –ü–æ–¥–∑–∞–¥–∞—á–∞", callback_data=mk_cb("add_sub", id=task_id, title=title)))
            kb.add(types.InlineKeyboardButton("‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data=mk_cb("remind_set", id=task_id, title=title)))
            kb.add(types.InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data=mk_cb("close_card")))
            return header, kb
    return "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", None

@bot.callback_query_handler(func=lambda c: True)
def callbacks(c):
    uid = c.message.chat.id
    data = parse_cb(c.data) if c.data and c.data != "noop" else None
    if not data:
        bot.answer_callback_query(c.id); return
    a = data.get("a")

    if a == "page":
        page = int(data.get("p", 1))
        date_s = today_str()
        rows = get_tasks_by_date(uid, date_s)
        items = []
        for r in rows:
            tid = sha_task_id(str(r.get("User ID")), r.get("–î–∞—Ç–∞",""), r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ó–∞–¥–∞—á–∞",""), r.get("–î–µ–¥–ª–∞–π–Ω",""))
            items.append((build_task_line(r), tid))
        total_pages = (len(items)+PAGE_SIZE-1)//PAGE_SIZE
        page = max(1, min(page, total_pages))
        slice_items = items[(page-1)*PAGE_SIZE:page*PAGE_SIZE]
        kb = types.InlineKeyboardMarkup()
        for text, tid in slice_items:
            kb.add(types.InlineKeyboardButton(text, callback_data=mk_cb("open", id=tid)))
        nav = []
        if page > 1: nav.append(types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=mk_cb("page", p=page-1, pa="open")))
        nav.append(types.InlineKeyboardButton(f"{page}/{total_pages}", callback_data="noop"))
        if page < total_pages: nav.append(types.InlineKeyboardButton("‚û°Ô∏è", callback_data=mk_cb("page", p=page+1, pa="open")))
        if nav: kb.row(*nav)
        try:
            bot.edit_message_reply_markup(uid, c.message.message_id, reply_markup=kb)
        except Exception:
            pass
        bot.answer_callback_query(c.id); return

    if a == "open":
        task_id = data.get("id")
        text, kb = render_task_card(uid, task_id)
        bot.answer_callback_query(c.id)
        if kb: bot.send_message(uid, text, reply_markup=kb)
        else:  bot.send_message(uid, text)
        return

    if a == "close_card":
        bot.answer_callback_query(c.id, "–ó–∞–∫—Ä—ã—Ç–æ")
        try:
            bot.delete_message(uid, c.message.message_id)
        except Exception:
            pass
        return

    if a == "done_card":
        task_id = data.get("id")
        # –Ω–∞–π—Ç–∏ –∏ –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º
        for title, ws in WS_MAP.items():
            rows = row_to_dict_list(ws)
            idx = find_row_index_by_id(ws, task_id, rows)
            if not idx: continue
            r = rows[idx-2]
            update_cell(ws, idx, "–°—Ç–∞—Ç—É—Å", "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
            supplier = guess_supplier(r.get("–ó–∞–¥–∞—á–∞",""))
            msg = "‚úÖ –ì–æ—Ç–æ–≤–æ."
            if supplier:
                plan_next_by_supplier_rule(uid, supplier, r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è","–õ–∏—á–Ω–æ–µ"), r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""))
                msg += " –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∏–µ–º–∫–∞/—Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑."
            bot.answer_callback_query(c.id, msg, show_alert=True)
            text, kb = render_task_card(uid, task_id)
            if kb: bot.edit_message_text(text, uid, c.message.message_id, reply_markup=kb)
            else:  bot.edit_message_text(text, uid, c.message.message_id)
            return
        bot.answer_callback_query(c.id, "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    if a == "accept_delivery":
        task_id = data.get("id")
        kb = types.InlineKeyboardMarkup()
        kb.row(
            types.InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è",  callback_data=mk_cb("accept_delivery_date", id=task_id, d="today")),
            types.InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞",   callback_data=mk_cb("accept_delivery_date", id=task_id, d="tomorrow")),
        )
        kb.row(types.InlineKeyboardButton("üìÖ –î—Ä—É–≥–∞—è –¥–∞—Ç–∞", callback_data=mk_cb("accept_delivery_pick", id=task_id)))
        bot.answer_callback_query(c.id)
        bot.send_message(uid, "–ö–æ–≥–¥–∞ –ø—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É?", reply_markup=kb)
        return

    if a == "accept_delivery_pick":
        task_id = data.get("id")
        set_state(uid, "pick_delivery_date", {"task_id": task_id})
        bot.answer_callback_query(c.id)
        bot.send_message(uid, "–í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return

    if a == "accept_delivery_date":
        task_id = data.get("id"); when = data.get("d")
        # –Ω–∞–π–¥—ë–º —Ä–æ–¥–∏—Ç–µ–ª—è
        parent = None
        for title, ws in WS_MAP.items():
            rows = row_to_dict_list(ws)
            idx = find_row_index_by_id(ws, task_id, rows)
            if idx:
                parent = (ws, rows[idx-2]); break
        if not parent:
            bot.answer_callback_query(c.id, "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True); return
        ws, r = parent
        date_s = today_str() if when=="today" else today_str(now_local()+timedelta(days=1))
        supplier = guess_supplier(r.get("–ó–∞–¥–∞—á–∞","")) or "–ü–æ—Å—Ç–∞–≤–∫–∞"
        add_task(r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è","–õ–∏—á–Ω–æ–µ"), date_s, r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""),
                 f"üöö –ü—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É {supplier} ({normalize_tt_from_subcat(r.get('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è','')) or '‚Äî'})",
                 "10:00", uid, source=f"subtask:{task_id}")
        bot.answer_callback_query(c.id, f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –Ω–∞ {date_s}", show_alert=True)
        return

    if a == "add_sub":
        task_id = data.get("id")
        set_state(uid, "add_subtask_text", {"task_id": task_id})
        bot.answer_callback_query(c.id)
        bot.send_message(uid, "–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –ø–æ–¥–∑–∞–¥–∞—á–∏:")
        return

    if a == "remind_set":
        task_id = data.get("id")
        set_state(uid, "set_reminder", {"task_id": task_id})
        bot.answer_callback_query(c.id)
        bot.send_message(uid, "–ö–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å? –ß–ß:–ú–ú (–ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è).")
        return

# ===================== –¢–ï–ö–°–¢: –ø–æ–¥–∑–∞–¥–∞—á–∏ / –¥–∞—Ç–∞ / –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è =====================
@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "add_subtask_text")
def add_subtask_text(m):
    uid = m.chat.id
    data = get_data(uid)
    task_id = data.get("task_id")
    text = m.text.strip()

    # –Ω–∞–π–¥—ë–º —Ä–æ–¥–∏—Ç–µ–ª—è
    for title, ws in WS_MAP.items():
        rows = row_to_dict_list(ws)
        idx = find_row_index_by_id(ws, task_id, rows)
        if not idx: continue
        parent = rows[idx-2]
        add_task(parent.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è","–õ–∏—á–Ω–æ–µ"), parent.get("–î–∞—Ç–∞",""), parent.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""),
                 f"‚Ä¢ {text}", parent.get("–î–µ–¥–ª–∞–π–Ω",""), uid, source=f"subtask:{task_id}")
        bot.send_message(uid, "–ü–æ–¥–∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.", reply_markup=main_menu())
        clear_state(uid); return
    bot.send_message(uid, "–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_menu())
    clear_state(uid)

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "pick_delivery_date")
def pick_delivery_date(m):
    uid = m.chat.id
    data = get_data(uid)
    task_id = data.get("task_id")
    ds = m.text.strip()
    try:
        datetime.strptime(ds, "%d.%m.%Y")
    except Exception:
        bot.send_message(uid, "–î–∞—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞. –ù—É–∂–µ–Ω —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì.", reply_markup=main_menu()); clear_state(uid); return
    # –Ω–∞–π–¥—ë–º —Ä–æ–¥–∏—Ç–µ–ª—è
    for title, ws in WS_MAP.items():
        rows = row_to_dict_list(ws)
        idx = find_row_index_by_id(ws, task_id, rows)
        if not idx: continue
        r = rows[idx-2]
        supplier = guess_supplier(r.get("–ó–∞–¥–∞—á–∞","")) or "–ü–æ—Å—Ç–∞–≤–∫–∞"
        add_task(r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è","–õ–∏—á–Ω–æ–µ"), ds, r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""),
                 f"üöö –ü—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É {supplier} ({normalize_tt_from_subcat(r.get('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è','')) or '‚Äî'})",
                 "10:00", uid, source=f"subtask:{task_id}")
        bot.send_message(uid, f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –Ω–∞ {ds}.", reply_markup=main_menu())
        clear_state(uid); return
    bot.send_message(uid, "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_menu())
    clear_state(uid)

@bot.message_handler(func=lambda msg: get_state(msg.chat.id) == "set_reminder")
def set_reminder(m):
    uid = m.chat.id
    data = get_data(uid)
    task_id = data.get("task_id")
    t = m.text.strip()
    if not re.fullmatch(r"\d{1,2}:\d{2}", t):
        bot.send_message(uid, "–ù—É–∂–µ–Ω —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú.", reply_markup=main_menu()); clear_state(uid); return
    # –Ω–∞–π–¥—ë–º –∑–∞–¥–∞—á—É –∏ –ø–æ—Å—Ç–∞–≤–∏–º –º–µ—Ç–∫—É
    for title, ws in WS_MAP.items():
        rows = row_to_dict_list(ws)
        idx = find_row_index_by_id(ws, task_id, rows)
        if not idx: continue
        cur_source = rows[idx-2].get("–ò—Å—Ç–æ—á–Ω–∏–∫","") or ""
        new_source = (cur_source + "; " if cur_source else "") + f"remind:{t}"
        update_cell(ws, idx, "–ò—Å—Ç–æ—á–Ω–∏–∫", new_source)
        bot.send_message(uid, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {t}.", reply_markup=main_menu())
        clear_state(uid); return
    bot.send_message(uid, "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_menu())
    clear_state(uid)

# ===================== –î–ê–ô–î–ñ–ï–°–¢ / –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø / –ü–û–í–¢–û–†–Ø–ï–ú–´–ï =====================
NOTIFIED = set()

def job_daily_digest():
    try:
        users = row_to_dict_list(ws_users)
        today = today_str()
        for u in users:
            uid = str(u.get("Telegram ID") or "").strip()
            if not uid: continue
            tasks = get_tasks_by_date(uid, today)
            if not tasks: continue
            text = f"üìÖ –ü–ª–∞–Ω –Ω–∞ {today}\n\n" + format_grouped(tasks, header_date=today)
            try:
                bot.send_message(uid, text)
            except Exception as e:
                log.error("send digest error %s", e)
    except Exception as e:
        log.error("job_daily_digest error %s", e)

def job_reminders():
    try:
        today = today_str()
        for title, ws in WS_MAP.items():
            rows = row_to_dict_list(ws)
            for r in rows:
                if r.get("–î–∞—Ç–∞") != today: 
                    continue
                src = (r.get("–ò—Å—Ç–æ—á–Ω–∏–∫") or "")
                if "remind:" not in src: 
                    continue
                matches = re.findall(r"remind:(\d{1,2}:\d{2})", src)
                for tm in matches:
                    key = sha_task_id(str(r.get("User ID")), r.get("–î–∞—Ç–∞",""), r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",""), r.get("–ó–∞–¥–∞—á–∞",""), r.get("–î–µ–¥–ª–∞–π–Ω","")) + "|" + today + "|" + tm
                    if key in NOTIFIED: 
                        continue
                    try:
                        hh, mm = map(int, tm.split(":"))
                        nowt = now_local().time()
                        if (nowt.hour, nowt.minute) >= (hh, mm):
                            bot.send_message(r.get("User ID"), f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {r.get('–ö–∞—Ç–µ–≥–æ—Ä–∏—è','')}/{r.get('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è','')} ‚Äî {r.get('–ó–∞–¥–∞—á–∞','')} (–¥–æ {r.get('–î–µ–¥–ª–∞–π–Ω') or '‚Äî'})")
                            NOTIFIED.add(key)
                    except Exception:
                        pass
    except Exception as e:
        log.error("job_reminders error %s", e)

def plan_week_for_repeats():
    """–†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è–µ–º—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ 7 –¥–Ω–µ–π –≤–ø–µ—Ä—ë–¥ –ø–æ –≤—Å–µ–º –ª–∏—Å—Ç–∞–º."""
    try:
        start = now_local().date()
        horizon = { (start + timedelta(days=i)).strftime("%d.%m.%Y") for i in range(1,8) }
        for title, ws in WS_MAP.items():
            rows = row_to_dict_list(ws)
            for r in rows:
                rep = (r.get("–ü–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å","") or "").strip().lower()
                if not rep: 
                    continue
                base_cat = r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è","–õ–∏—á–Ω–æ–µ")
                sub      = r.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è","")
                text     = r.get("–ó–∞–¥–∞—á–∞","")
                deadline = r.get("–î–µ–¥–ª–∞–π–Ω","")
                uid      = r.get("User ID","")
                # –ø—Ä–æ—Å—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
                if "–∫–∞–∂–¥—ã–µ" in rep:
                    nums = re.findall(r"\d+", rep)
                    step = int(nums[0]) if nums else 2
                    # —Å–æ–∑–¥–∞—ë–º —Ç–æ—á–∫–∏ —á–µ—Ä–µ–∑ step –¥–Ω—è –æ—Ç —Å–µ–≥–æ–¥–Ω—è
                    for i in range(step, 8, step):
                        ds = (start + timedelta(days=i)).strftime("%d.%m.%Y")
                        if ds in horizon:
                            add_task(base_cat, ds, sub, text, deadline, uid, status="", repeat="", source="recur:auto")
                elif any(x in rep for x in ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫","–≤—Ç–æ—Ä–Ω–∏–∫","—Å—Ä–µ–¥–∞","—á–µ—Ç–≤–µ—Ä–≥","–ø—è—Ç–Ω–∏—Ü–∞","—Å—É–±–±–æ—Ç–∞","–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]):
                    target = {
                        "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫":0,"–≤—Ç–æ—Ä–Ω–∏–∫":1,"—Å—Ä–µ–¥–∞":2,"—á–µ—Ç–≤–µ—Ä–≥":3,"–ø—è—Ç–Ω–∏—Ü–∞":4,"—Å—É–±–±–æ—Ç–∞":5,"–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ":6
                    }[[d for d in target] if False else "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"]  # hack for linter
                # –æ–±–ª–µ–≥—á–∏–º: –µ—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è ¬´—Å—Ä–µ–¥–∞¬ª ‚Äî —Å—Ç–∞–≤–∏–º –±–ª–∏–∂–∞–π—à—É—é —Å—Ä–µ–¥—É –∏ –ø–ª—é—Å –Ω–µ–¥–µ–ª—é –≤–ø–µ—Ä—ë–¥
                    for name, wd in {"–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫":0,"–≤—Ç–æ—Ä–Ω–∏–∫":1,"—Å—Ä–µ–¥–∞":2,"—á–µ—Ç–≤–µ—Ä–≥":3,"–ø—è—Ç–Ω–∏—Ü–∞":4,"—Å—É–±–±–æ—Ç–∞":5,"–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ":6}.items():
                        if name in rep:
                            # –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –≤ –≥–æ—Ä–∏–∑–æ–Ω—Ç–µ
                            for i in range(1,8):
                                d = start + timedelta(days=i)
                                if d.weekday() == wd:
                                    ds = d.strftime("%d.%m.%Y")
                                    add_task(base_cat, ds, sub, text, deadline, uid, status="", repeat="", source="recur:auto")
                                    break
    except Exception as e:
        log.error("plan_week_for_repeats error %s", e)

def scheduler_thread():
    schedule.clear()
    schedule.every().day.at("08:00").do(job_daily_digest)
    schedule.every(1).minutes.do(job_reminders)
    schedule.every().day.at("08:05").do(plan_week_for_repeats)
    while True:
        schedule.run_pending()
        time.sleep(1)

# ===================== WEBHOOK / FLASK =====================
app = Flask(__name__)

@app.route("/" + API_TOKEN, methods=["POST"])
def webhook():
    try:
        update = request.get_data().decode("utf-8")
        upd = types.Update.de_json(update)
        bot.process_new_updates([upd])
    except Exception as e:
        log.error("Webhook error: %s", e)
    return "OK", 200

@app.route("/")
def home():
    return "Bot is running!"

# ===================== START =====================
if __name__ == "__main__":
    if not API_TOKEN or not WEBHOOK_URL:
        raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω—ã TELEGRAM_TOKEN –∏–ª–∏ WEBHOOK_BASE")
    try:
        bot.remove_webhook()
    except Exception:
        pass
    time.sleep(0.5)
    bot.set_webhook(url=WEBHOOK_URL)
    threading.Thread(target=scheduler_thread, daemon=True).start()
    app.run(host="0.0.0.0", port=int(os.getenv("PORT","5000")))
