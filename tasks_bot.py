import telebot
import gspread
import schedule
import time
import threading
from datetime import datetime, timedelta
from flask import Flask
from telebot import types

# ====== –ù–ê–°–¢–†–û–ô–ö–ò ======
API_TOKEN = "7959600917:AAF7szpbvX8CoFObxjVb6y3aCiSceCi-Rt4"
TABLE_URL = "https://docs.google.com/spreadsheets/d/1lIV2kUx8sDHR1ynMB2di8j5n9rpj1ydhsmfjXJpRGeA/edit?usp=sharing"
CREDENTIALS_FILE = "/etc/secrets/credentials.json"

bot = telebot.TeleBot(API_TOKEN)

# ====== –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö GOOGLE SHEETS ======
gc = gspread.service_account(filename=CREDENTIALS_FILE)
sh = gc.open_by_url(TABLE_URL)

tasks_ws = sh.worksheet("–ó–∞–¥–∞—á–∏")
users_ws = sh.worksheet("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
repeat_ws = sh.worksheet("–ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–∞–¥–∞—á–∏")

# ====== –ü–û–õ–£–ß–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ======
def get_users():
    users = []
    rows = users_ws.get_all_records()
    for row in rows:
        if row.get("Telegram ID"):
            categories = []
            raw = row.get("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–¥–∞—á") or ""
            if raw:
                categories = [c.strip() for c in raw.split(",") if c.strip()]
            users.append({
                "name": row.get("–ò–º—è", ""),
                "id": str(row.get("Telegram ID")),
                "categories": categories
            })
    return users

# ====== –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–û–í–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ======
def add_new_user(user_id, username):
    users = get_users()
    if not any(u["id"] == str(user_id) for u in users):
        users_ws.append_row([username, str(user_id), ""])  # –ò–º—è, ID, –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
        print(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} ({user_id})")

# ====== –ü–û–õ–£–ß–ï–ù–ò–ï –ó–ê–î–ê–ß ======
def get_tasks_for_date(user_id, date_str):
    tasks = []
    rows = tasks_ws.get_all_records()
    for row in rows:
        if row.get("–î–∞—Ç–∞") == date_str and str(row.get("Telegram ID")) == str(user_id):
            tasks.append(row)
    return tasks

# ====== –î–û–ë–ê–í–õ–ï–ù–ò–ï –ó–ê–î–ê–ß ======
def add_task(date, category, subcategory, task, deadline, user_id, status="", repeat=""):
    tasks_ws.append_row([date, category, subcategory, task, deadline, status, repeat, str(user_id)])

# ====== –û–ë–†–ê–ë–û–¢–ö–ê –ü–û–í–¢–û–†–Ø–Æ–©–ò–•–°–Ø –ó–ê–î–ê–ß ======
def process_repeating_tasks():
    today_str = datetime.now().strftime("%d.%m.%Y")
    today_weekday = datetime.now().strftime("%A").lower()
    weekday_map = {
        "monday": "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "tuesday": "–≤—Ç–æ—Ä–Ω–∏–∫",
        "wednesday": "—Å—Ä–µ–¥–∞",
        "thursday": "—á–µ—Ç–≤–µ—Ä–≥",
        "friday": "–ø—è—Ç–Ω–∏—Ü–∞",
        "saturday": "—Å—É–±–±–æ—Ç–∞",
        "sunday": "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }
    today_rus = weekday_map.get(today_weekday, "")

    for row in repeat_ws.get_all_records():
        if (row.get("–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏") or "").strip().lower() == today_rus:
            add_task(today_str,
                     row.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", ""),
                     row.get("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è", ""),
                     row.get("–ó–∞–¥–∞—á–∞", ""),
                     row.get("–í—Ä–µ–º—è", ""),
                     row.get("Telegram ID", ""),  # —Ç–µ–ø–µ—Ä—å –∑–∞–¥–∞—á–∏ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ ID
                     "", "–ø–æ–≤—Ç–æ—Ä")

# ====== –û–¢–ü–†–ê–í–ö–ê –ü–õ–ê–ù–ê ======
def send_daily_plan():
    process_repeating_tasks()
    today = datetime.now().strftime("%d.%m.%Y")
    for user in get_users():
        tasks = get_tasks_for_date(user["id"], today)
        if tasks:
            text = f"üìÖ –ü–ª–∞–Ω –Ω–∞ {today}:\n\n"
            for i, t in enumerate(tasks, 1):
                status_icon = "‚úÖ" if (t.get("–°—Ç–∞—Ç—É—Å") or "").lower() == "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ" else "‚¨ú"
                text += f"{status_icon} {i}. [{t.get('–ö–∞—Ç–µ–≥–æ—Ä–∏—è','')} - {t.get('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è','')}] {t.get('–ó–∞–¥–∞—á–∞','')} (–¥–æ {t.get('–î–µ–¥–ª–∞–π–Ω','')})\n"
            bot.send_message(user["id"], text)

# ====== –ö–û–ú–ê–ù–î–ê /today ======
@bot.message_handler(commands=['today'])
def today_tasks(message):
    user_id = message.chat.id
    add_new_user(user_id, message.from_user.first_name)
    today = datetime.now().strftime("%d.%m.%Y")
    tasks = get_tasks_for_date(user_id, today)
    if not tasks:
        bot.send_message(user_id, "üì≠ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞—á –Ω–µ—Ç!")
        return
    text = f"üìÖ –í–∞—à–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
    for i, t in enumerate(tasks, 1):
        status_icon = "‚úÖ" if (t.get("–°—Ç–∞—Ç—É—Å") or "").lower() == "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ" else "‚¨ú"
        text += f"{status_icon} {i}. [{t.get('–ö–∞—Ç–µ–≥–æ—Ä–∏—è','')} - {t.get('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è','')}] {t.get('–ó–∞–¥–∞—á–∞','')} (–¥–æ {t.get('–î–µ–¥–ª–∞–π–Ω','')})\n"
    bot.send_message(user_id, text)

# ====== –ö–û–ú–ê–ù–î–ê /week ======
@bot.message_handler(commands=['week'])
def week_menu(message):
    add_new_user(message.chat.id, message.from_user.first_name)
    today = datetime.now()
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    
    for i in range(7):
        day_date = today + timedelta(days=i)
        day_name_rus = day_date.strftime("%A")
        day_name_rus = {
            "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
            "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
            "Wednesday": "–°—Ä–µ–¥–∞",
            "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
            "Friday": "–ü—è—Ç–Ω–∏—Ü–∞",
            "Saturday": "–°—É–±–±–æ—Ç–∞",
            "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
        }[day_name_rus]
        day_str = day_date.strftime("%d.%m.%Y")
        btn = types.InlineKeyboardButton(f"{day_name_rus} ({day_str})", callback_data=f"day_{day_str}")
        keyboard.add(btn)
    
    keyboard.add(types.InlineKeyboardButton("üìÖ –í—Å—è –Ω–µ–¥–µ–ª—è", callback_data="week_all"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –∏–ª–∏ –≤—Å—é –Ω–µ–¥–µ–ª—é:", reply_markup=keyboard)

# ====== –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö ======
@bot.callback_query_handler(func=lambda call: call.data.startswith("day_") or call.data == "week_all")
def callback_week(call):
    user_id = str(call.message.chat.id)
    if call.data.startswith("day_"):
        date_str = call.data.replace("day_", "")
        tasks = get_tasks_for_date(user_id, date_str)
        if not tasks:
            bot.send_message(user_id, f"üì≠ –ù–∞ {date_str} –∑–∞–¥–∞—á –Ω–µ—Ç!")
            return
        text = f"üìÖ –í–∞—à–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ {date_str}:\n\n"
        for i, t in enumerate(tasks, 1):
            status_icon = "‚úÖ" if (t.get("–°—Ç–∞—Ç—É—Å") or "").lower() == "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ" else "‚¨ú"
            text += f"{status_icon} {i}. [{t.get('–ö–∞—Ç–µ–≥–æ—Ä–∏—è','')} - {t.get('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è','')}] {t.get('–ó–∞–¥–∞—á–∞','')} (–¥–æ {t.get('–î–µ–¥–ª–∞–π–Ω','')})\n"
        bot.send_message(user_id, text)
    elif call.data == "week_all":
        today = datetime.now()
        text = "üìÖ –í–∞—à–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é:\n\n"
        has_tasks = False
        for i in range(7):
            date_str = (today + timedelta(days=i)).strftime("%d.%m.%Y")
            tasks = get_tasks_for_date(user_id, date_str)
            if tasks:
                has_tasks = True
                text += f"\nüìÜ {date_str}:\n"
                for j, t in enumerate(tasks, 1):
                    status_icon = "‚úÖ" if (t.get("–°—Ç–∞—Ç—É—Å") or "").lower() == "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ" else "‚¨ú"
                    text += f"{status_icon} {j}. [{t.get('–ö–∞—Ç–µ–≥–æ—Ä–∏—è','')} - {t.get('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è','')}] {t.get('–ó–∞–¥–∞—á–∞','')} (–¥–æ {t.get('–î–µ–¥–ª–∞–π–Ω','')})\n"
        if not has_tasks:
            text = "üì≠ –ù–∞ –Ω–µ–¥–µ–ª—é –∑–∞–¥–∞—á –Ω–µ—Ç!"
        bot.send_message(user_id, text)

# ====== –°–¢–ê–†–¢ ======
@bot.message_handler(commands=['start'])
def start(message):
    add_new_user(message.chat.id, message.from_user.first_name)
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∑–∞–¥–∞—á.\n–ö–æ–º–∞–Ω–¥—ã:\n/today - –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n/week - –∑–∞–¥–∞—á–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é")

# ====== –ó–ê–ü–£–°–ö ======
def run_scheduler():
    schedule.every().day.at("09:00").do(send_daily_plan)
    while True:
        schedule.run_pending()
        time.sleep(1)

def run_bot():
    bot.remove_webhook()
    bot.polling(none_stop=True)

app = Flask(__name__)

@app.route("/")
def home():
    return "Bot is running!"

if __name__ == "__main__":
    threading.Thread(target=run_scheduler, daemon=True).start()
    threading.Thread(target=run_bot, daemon=True).start()
    app.run(host="0.0.0.0", port=5000)
