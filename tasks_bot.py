import telebot
import gspread
import schedule
import time
import threading
import re
from datetime import datetime, timedelta
from flask import Flask, request
from telebot import types
import pytz

# ====== –ù–ê–°–¢–†–û–ô–ö–ò ======
API_TOKEN = "–¢–û–ö–ï–ù_–ë–û–¢–ê"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
TABLE_URL = "–°–°–´–õ–ö–ê_–ù–ê_GOOGLE_SHEETS"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ—é
CREDENTIALS_FILE = "/etc/secrets/credentials.json"
WEBHOOK_URL = "https://tasksbot-hy3t.onrender.com/" + API_TOKEN
TIMEZONE = pytz.timezone("Europe/Moscow")

bot = telebot.TeleBot(API_TOKEN)

# ====== –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö GOOGLE SHEETS ======
gc = gspread.service_account(filename=CREDENTIALS_FILE)
sh = gc.open_by_url(TABLE_URL)
tasks_ws = sh.worksheet("–ó–∞–¥–∞—á–∏")
users_ws = sh.worksheet("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
repeat_ws = sh.worksheet("–ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–∞–¥–∞—á–∏")

# ====== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ======
def get_users():
    return [
        {
            "name": row.get("–ò–º—è", ""),
            "id": str(row.get("Telegram ID")),
            "categories": [c.strip() for c in (row.get("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–¥–∞—á") or "").split(",") if c.strip()]
        }
        for row in users_ws.get_all_records()
        if row.get("Telegram ID")
    ]

def get_tasks_for_date(user_id, date_str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ã—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è"""
    tasks = []
    # –û–±—ã—á–Ω—ã–µ –∑–∞–¥–∞—á–∏
    for row in tasks_ws.get_all_records():
        if row.get("–î–∞—Ç–∞") == date_str and str(row.get("User ID")) == str(user_id):
            tasks.append({**row, "repeat": False})
    # –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–∞–¥–∞—á–∏
    weekday = datetime.strptime(date_str, "%d.%m.%Y").strftime("%A")
    for row in repeat_ws.get_all_records():
        if weekday.lower() in (row.get("–î–Ω–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è") or "").lower() and str(row.get("User ID")) == str(user_id):
            tasks.append({**row, "repeat": True})
    return tasks

def get_tasks_for_week(user_id):
    today = datetime.now(TIMEZONE)
    week_dates = [(today + timedelta(days=i)).strftime("%d.%m.%Y") for i in range(7)]
    tasks_by_day = {}
    for date_str in week_dates:
        tasks_by_day[date_str] = get_tasks_for_date(user_id, date_str)
    return tasks_by_day

def add_task(date, category, subcategory, task, deadline, user_id, status="", repeat=""):
    tasks_ws.append_row([date, category, subcategory, task, deadline, status, repeat, user_id])

# ====== –ö–ù–û–ü–ö–ò ======
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üìÖ –°–µ–≥–æ–¥–Ω—è", "üìÜ –ù–µ–¥–µ–ª—è", "üóì –í—Å—è –Ω–µ–¥–µ–ª—è", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
    return markup

def week_days_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    today = datetime.now(TIMEZONE)
    days_map = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫","–í—Ç–æ—Ä–Ω–∏–∫","–°—Ä–µ–¥–∞","–ß–µ—Ç–≤–µ—Ä–≥","–ü—è—Ç–Ω–∏—Ü–∞","–°—É–±–±–æ—Ç–∞","–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    for i in range(7):
        day_date = today + timedelta(days=i)
        btn_text = f"{days_map[day_date.weekday()]} ({day_date.strftime('%d.%m.%Y')})"
        markup.add(btn_text)
    markup.add("‚¨Ö –ù–∞–∑–∞–¥")
    return markup

# ====== –î–û–ë–ê–í–õ–ï–ù–ò–ï –ó–ê–î–ê–ß ======
user_steps = {}
temp_task_data = {}

@bot.message_handler(func=lambda msg: msg.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
def add_task_start(message):
    user_steps[message.chat.id] = 'date'
    temp_task_data[message.chat.id] = {}
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")

@bot.message_handler(func=lambda m: user_steps.get(m.chat.id) == 'date')
def get_task_date(message):
    if not re.match(r"^\d{2}\.\d{2}\.\d{4}$", message.text):
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!")
        return
    temp_task_data[message.chat.id]['date'] = message.text
    user_steps[message.chat.id] = 'category'
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:")

@bot.message_handler(func=lambda m: user_steps.get(m.chat.id) == 'category')
def get_task_category(message):
    temp_task_data[message.chat.id]['category'] = message.text
    user_steps[message.chat.id] = 'subcategory'
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:")

@bot.message_handler(func=lambda m: user_steps.get(m.chat.id) == 'subcategory')
def get_task_subcategory(message):
    temp_task_data[message.chat.id]['subcategory'] = message.text
    user_steps[message.chat.id] = 'task'
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")

@bot.message_handler(func=lambda m: user_steps.get(m.chat.id) == 'task')
def get_task_desc(message):
    temp_task_data[message.chat.id]['task'] = message.text
    user_steps[message.chat.id] = 'deadline'
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:")

@bot.message_handler(func=lambda m: user_steps.get(m.chat.id) == 'deadline')
def get_task_deadline(message):
    if not re.match(r"^\d{2}:\d{2}$", message.text):
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!")
        return
    data = temp_task_data[message.chat.id]
    data['deadline'] = message.text
    add_task(data['date'], data['category'], data['subcategory'], data['task'], data['deadline'], message.chat.id)
    bot.send_message(message.chat.id, "‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=main_menu())
    user_steps.pop(message.chat.id, None)
    temp_task_data.pop(message.chat.id, None)

# ====== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö ======
@bot.message_handler(commands=["start"])
def start_cmd(message):
    bot.send_message(message.chat.id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "üìÖ –°–µ–≥–æ–¥–Ω—è")
def today_tasks(message):
    user_id = message.chat.id
    today_str = datetime.now(TIMEZONE).strftime("%d.%m.%Y")
    tasks = get_tasks_for_date(user_id, today_str)
    send_tasks_formatted(user_id, today_str, tasks)

@bot.message_handler(func=lambda msg: msg.text == "üìÜ –ù–µ–¥–µ–ª—è")
def week_menu(message):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=week_days_menu())

@bot.message_handler(func=lambda msg: msg.text == "üóì –í—Å—è –Ω–µ–¥–µ–ª—è")
def all_week_tasks(message):
    user_id = message.chat.id
    tasks_by_day = get_tasks_for_week(user_id)
    days_map = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫","–í—Ç–æ—Ä–Ω–∏–∫","–°—Ä–µ–¥–∞","–ß–µ—Ç–≤–µ—Ä–≥","–ü—è—Ç–Ω–∏—Ü–∞","–°—É–±–±–æ—Ç–∞","–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    text = "üóì –ó–∞–¥–∞—á–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é:\n\n"
    for date_str, tasks in tasks_by_day.items():
        weekday = days_map[datetime.strptime(date_str, "%d.%m.%Y").weekday()]
        text += f"üìÖ {weekday} {date_str}\n"
        if tasks:
            for t in tasks:
                repeat_mark = " üîÅ" if t.get("repeat") else ""
                text += f"- {t.get('–ó–∞–¥–∞—á–∞','')} (–¥–æ {t.get('–î–µ–¥–ª–∞–π–Ω','')}){repeat_mark}\n\n"
        else:
            text += "–ù–µ—Ç –∑–∞–¥–∞—á\n\n"
    bot.send_message(user_id, text)

@bot.message_handler(func=lambda msg: "(" in msg.text and ")" in msg.text)
def day_tasks(message):
    user_id = message.chat.id
    date_str = message.text.split("(")[1].strip(")")
    tasks = get_tasks_for_date(user_id, date_str)
    send_tasks_formatted(user_id, date_str, tasks)

@bot.message_handler(func=lambda msg: msg.text == "‚¨Ö –ù–∞–∑–∞–¥")
def back_to_main(message):
    bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

def send_tasks_formatted(user_id, date_str, tasks):
    days_map = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫","–í—Ç–æ—Ä–Ω–∏–∫","–°—Ä–µ–¥–∞","–ß–µ—Ç–≤–µ—Ä–≥","–ü—è—Ç–Ω–∏—Ü–∞","–°—É–±–±–æ—Ç–∞","–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    weekday = days_map[datetime.strptime(date_str, "%d.%m.%Y").weekday()]
    if tasks:
        text = f"üìÖ {weekday} {date_str}\n\n"
        for t in tasks:
            repeat_mark = " üîÅ" if t.get("repeat") else ""
            text += f"- {t.get('–ó–∞–¥–∞—á–∞','')} (–¥–æ {t.get('–î–µ–¥–ª–∞–π–Ω','')}){repeat_mark}\n\n"
        bot.send_message(user_id, text)
    else:
        bot.send_message(user_id, f"üìÖ {weekday} {date_str}\n–ù–µ—Ç –∑–∞–¥–∞—á.")

# ====== –ü–õ–ê–ù–ò–†–û–í–©–ò–ö ======
def send_daily_plan():
    today_str = datetime.now(TIMEZONE).strftime("%d.%m.%Y")
    for user in get_users():
        tasks = get_tasks_for_date(user["id"], today_str)
        send_tasks_formatted(user["id"], today_str, tasks)

def run_scheduler():
    schedule.every().day.at("09:00").do(send_daily_plan)
    while True:
        schedule.run_pending()
        time.sleep(1)

# ====== WEBHOOK ======
app = Flask(__name__)

@app.route("/" + API_TOKEN, methods=["POST"])
def webhook():
    json_str = request.get_data().decode("utf-8")
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "OK", 200

@app.route("/")
def home():
    return "Bot is running!"

if __name__ == "__main__":
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL)
    threading.Thread(target=run_scheduler, daemon=True).start()
    app.run(host="0.0.0.0", port=5000)
